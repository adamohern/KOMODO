[
    {
        "type": "module",
        "docstring": "MODO TD API - A more 'pythonic' wrapper around the core MODO Python API intended to make performing common\ncoding tasks easier for TDs.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n",
        "name": "modo",
        "children": [
            {
                "type": "type",
                "docstring": "Action Clip and Render pass item.\n\n    :param item: either an item of type 'actionclip' or an item name/ID to lookup.\n    :type item: an instance of modo.item.Item\n\n    ",
                "name": "ActionClip",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Set or get the active state of the render pass.\n\n        :getter: Returns the active state of the render pass.\n        :rtype: bool\n\n        :setter: Sets the active state of the renter pass\n        :param state: active state.\n        :type state: bool\n        ",
                        "name": "active",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get or set the enabled state of the render pass.\n\n        :getter: Returns the enabled state.\n        :rtype: bool\n\n        :setter: Sets the enabled state of the render pass\n        :param state: enabled state.\n        :type state: bool\n\n        ",
                        "name": "enabled",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Read a value set on a channel for this render pass.\n\n        :param chan: the channel to read the value from.\n        :type chan: modo.channel.Channel object\n        :param time: the time (in seconds) to read the value for, defaults to 0.0.\n        :type time: float\n\n        ",
                        "name": "getValue",
                        "parameters": [
                            "self",
                            "chan",
                            "time"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Name of the render pass.\n\n        :getter: Returns the name of the render pass\n        :rtype: basestring\n\n        :setter: Assigns a new name to the render pass\n        :param name: new name for the render pass.\n        :type name: basestring\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The render pass group that the render pass belongs to.\n\n        :getter: Returns the render pass group\n        :rtype: modo.item.RenderPassGroup\n\n        :setter: Sets the render pass group\n        :param group: render pass group to parent to.\n        :type group: modo.item.RenderPassGroup\n\n        ",
                        "name": "passGroup",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set a value on a channel for this render pass.\n\n        :param chan: the channel to set the value on.\n        :type chan: modo.channel.Channel object\n        :param value: the value to set for the channel.\n        :type value: any\n        :param time: the time (in seconds) to set the value for, defaults to 0.0.\n        :type time: float\n        :param key: whether to set a key for the value or not, defaults to False.\n        :param key: bool\n\n        ",
                        "name": "setValue",
                        "parameters": [
                            "self",
                            "chan",
                            "value",
                            "time",
                            "key"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Wrapper class for actor groups.\n\n    ",
                "name": "Actor",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_Actor__addClip",
                        "parameters": [
                            "self",
                            "name",
                            "pose",
                            "typ",
                            "action_item",
                            "action_clip"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a list of ActionClip objects for this Actor\n        :rtype: list\n        ",
                        "name": "actions",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Adds an action to this actor\n\n        Note: please avoid naming actions 'setup', 'edit' or 'scene'\n\n        :returns ActionClip: ActionClip\n        :param basestring name: Optional name for the action\n        ",
                        "name": "addAction",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a channel to the group.\n        The supplied channel argument be a modo.channel.Channel() object, in which case no item argument is required or a channel\n        name (string) or index (int), both of which require an additional 'item' argument.\n\n        :param channel: the channel to add.\n        :type channel: modo.channel.Channel() object, int or basestring\n        :param item: the item to which the channel belongs. Not required if a Channel() object is provided as the\n            first argument.\n        :type item: modo.item.Item\n\n        ",
                        "name": "addChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add one or more items to the group if they're not already members.\n\n        :param items: the item or items to add\n        :type items: modo.item.Item or list of modo.item.Item objects\n\n        ",
                        "name": "addItems",
                        "parameters": [
                            "self",
                            "items",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Adds a pose to this actor\n\n        :returns ActionClip: ActionClip\n        :param basestring name: Optional name for the pose\n        ",
                        "name": "addPose",
                        "parameters": [
                            "self",
                            "name",
                            "activate"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the currently active action if any. None if no action is active\n        :rtype: ActionClip\n        ",
                        "name": "currentAction",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets the item at the specified index.\n\n        :returns: item at the specified index.\n        :rtype: modo.item.Item\n        :param index: index of the item in the group's list of items.\n        :type index: int\n\n        ",
                        "name": "getItemAt",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Index of the item within the groups list of items.\n\n        :return: item index in the group.\n        :rtype: int\n\n        ",
                        "name": "getItemIndex",
                        "parameters": [
                            "self",
                            "item",
                            "x",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The number of channels in the group.\n\n        :getter: Returns the number of channels in the group.\n        :rtype: int\n\n        ",
                        "name": "groupChannelCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "returns a list of all the channels in the group.\n        Each element of the list will be an modo.channel.Channel\n\n        :getter: Returns a list of channels.\n        :rtype: list of modo.channel.Channel items\n\n        ",
                        "name": "groupChannels",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets the channel at the specified index.\n\n        :returns: the channel at the specified index.\n        :rtype: modo.channel.Channel\n        :param index: index of the channel in the group's list of channels.\n        :type index: int\n\n        ",
                        "name": "groupGetChannelAt",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel",
                            "func"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the channel at the specified index from the group's list of channels.\n\n        :param index: index of the channel in the group's list of channels.\n        :type index: int\n\n        ",
                        "name": "groupRemoveChannelAt",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Check to see if the specified channel is a member of the group.\n        The supplied channel argument be a :class:`modo.channel.Channel` object, in which case no item argument\n        is required, a channel name (string) or index (int), both of which require an additional 'item' argument.\n\n        :param chan: the channel to check\n        :type chan: modo.channel.Channel, int or basestring\n        :param item: the item to which the channel belongs. Not required if a Channel() object is provided as the\n            first argument.\n        :type item: modo.item.Item\n        :returns: True if the channel is in the group, False if not.\n        :rtype: bool\n        ",
                        "name": "hasChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item",
                            "x",
                            "group",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :param item:\n        :type item:\n        :returns: True if the item is in the group, False if not.\n        :rtype: bool\n        ",
                        "name": "hasItem",
                        "parameters": [
                            "self",
                            "item",
                            "connection",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The number of items in the group\n\n        :getter: Returns the number of items\n        :rtype: int\n\n        ",
                        "name": "itemCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a list of LocatorSuperType items that are connected to this action.\n        :rtype: list\n        ",
                        "name": "items",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Return a pose by name\n\n        :param basestring poseName: Name of the pose to look up\n        :returns: Pose\n        ",
                        "name": "pose",
                        "parameters": [
                            "self",
                            "poseName",
                            "pose"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a list of ActionClip objects for this Actor\n        :rtype: list\n        ",
                        "name": "poses",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Remove a channel from the group.\n        The supplied channel argument can either be a channel name (string) or index (int).\n\n        :param item: the item to which the channel belongs.\n        :type item: modo.item.Item\n        :param channel: the channel to remove.\n        :type channel: int or basestring\n\n        ",
                        "name": "removeChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the item at the specified index from the group's list of items.\n\n        :param index: index of the item in the group's list of items.\n        :type index: int\n\n        ",
                        "name": "removeItemAt",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Remove one or more items from the group, if they exis.\n\n        :param items: the item or items to remove.\n        :type items: modo.item.Item or list of modo.item.Item objects\n\n        ",
                        "name": "removeItems",
                        "parameters": [
                            "self",
                            "items",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set's the index for the specified item in the list of items within the group.\n\n        :param item: the item to move\n        :type item: modo.item.Item\n        :param index: the index in the list of items belonging to the group to move the item to.\n        :type index: int\n        :raises ValueError: if index is less than zero.\n\n        ",
                        "name": "setItemIndex",
                        "parameters": [
                            "self",
                            "item",
                            "index",
                            "x",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get or set the group type.\n        If the group is a general group it has no type so returns None.\n\n        :getter: Returns the type of the group.\n        :rtype: basestring or None\n        :raises ValueError: if the supplied argument isn't one of the default group type strings.\n\n        :setter: Sets the group type\n        :param gtype: either one of the available group types - 'assembly', 'actor', 'render', 'keyset', 'chanset',\n            'preset', 'shader' to define the group as one of the built in types or any other string to define the\n            group as a custom type of your own.\n        :type gtype: basestring\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Area light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Area Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Area Light item.\n\n    :param light: Optional area light item object (type lx.symbol.sITYPE_AREALIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid area light item selected.\n    :raises TypeError: if the item passed as an argument isn't either an area light item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "AreaLight",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Camera item class.\n\n    Takes an optional 'camera' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'camera' or an item name or ID to look up. If no camera item is supplied as an argument an attempt will be made to\n    wrap the most recently selected camera.\n\n    :param camera: Optional camera item object (type lx.symbol.sITYPE_CAMERA) or string (item name or ID) to look up.\n    :type camera: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid camera item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'camera'\n        or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the camera argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "Camera",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "Channel",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Add a link between this channel and another.\n\n        :param to_channel: The channel to link to.\n        :type to_channel: modo.channel.Channel\n\n        ",
                        "name": "addLink",
                        "parameters": [
                            "self",
                            "to_channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "connectInput",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Delete a link from the channel graph.\n\n        :param to_channel: The channel the link is to.\n        :type to_channel: modo.channel.Channel\n\n        ",
                        "name": "deleteLink",
                        "parameters": [
                            "self",
                            "to_channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes an input connection from another channel if it exists.\n\n        :param Channel other: Other channel to disconnect from. If it is None, all input connections are removed.\n        ",
                        "name": "disconnectInput",
                        "parameters": [
                            "self",
                            "other",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": " Returns the channel's animation envelope.\n\n        :getter: Returns the channel's animation envelope.\n        :rtype: modo.channel.Envelope\n        :raises LookupError: if the channel isn't animated.\n        ",
                        "name": "envelope",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns the evaluation type of a channel, which is the type of slot allocated in the eval state\n        vector. This will return the \"gradstack\" exo-type for gradient channels.\n\n        :getter: Returns the evaluation type of the channel\n        :rtype: basestring\n\n        ",
                        "name": "evalType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the linked channel at the specified index forward of this channel in the channel graph.\n\n        :param index: The index of the channel to return.\n        :type index: int\n        :returns: The channel at specified index forward of this channel.\n        :rtype: modo.channel.Channel\n\n        ",
                        "name": "forward",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel",
                            "name",
                            "itemfunc",
                            "lxu_item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns the number of linked channels forward of this channel in this channel graph.\n\n        :getter: Returns the number of linked channels forward of this channel in this channel graph.\n        :rtype: int\n\n        ",
                        "name": "fwdCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a list of the linked channels forward of this channel in the channel graph.\n\n        :getter: Returns the forward channels in this item's channel graph.\n        :rtype: list\n\n        ",
                        "name": "fwdLinked",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel's value for an action at a specific time. Defaults to reading the channel's evaluated\n        value at the current time.\n\n        :param time: Optional time in seconds to read the value at.\n        :type time: float\n        :param action: The action to read the value from. Defaults to None (evaluation).\n        :type action: basestring\n        :returns: the channel's value.\n        :rtype: depends on the type of the channel being read.\n\n        ",
                        "name": "get",
                        "parameters": [
                            "self",
                            "time",
                            "action"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The channel's channel graph.\n\n        :getter: Returns the channel's channel graph.\n        :rtype: lxu.object.ChannelGraph\n\n        ",
                        "name": "graph",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The channel's index.\n\n        :getter: Returns the channel's index.\n        :rtype: int\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns whether the channel is animated.\n\n        :getter: Returns whether the channel is animated or not.\n        :rtype: bool\n\n        ",
                        "name": "isAnimated",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Returns the item that is associated with this channel\n        :rtype: Item\n        ",
                        "name": "item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The channel's name.\n\n        :getter: Returns the channel's name.\n        :rtype: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns the number of linked channels that occur before this channel in the channel graph.\n\n        :getter: Returns the number of linked channels that occur before this channel in the channel graph.\n        :rtype: int\n\n        ",
                        "name": "revCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a list of the linked channels that appear before this channel in the channel graph.\n\n        :getter: Returns the linked channels that appear before this channel in the channel graph.\n        :rtype: list\n\n        ",
                        "name": "revLinked",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the linked channel at the specified index before this channel in the channel graph.\n\n        :param index: The index of the channel to return.\n        :type index: int\n        :returns: The channel at specified index before of this channel.\n        :rtype: modo.channel.Channel\n\n        ",
                        "name": "reverse",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel",
                            "name",
                            "itemfunc",
                            "lxu_item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets a channel's value for an action at a specific time. Defaults to setting the channel's value\n        for the \"edit\" action and at the current time.\n\n        :param value: The value to set for the channel.\n        :type value: depends on the type of the channel\n        :param time: optional time in seconds to set the value for.\n        :type time: float\n        :param key: Specifies whether to set a key for the channel.\n        :type key: bool\n        :param action: The action to set the value on.\n        :type action: basestring\n\n        ",
                        "name": "set",
                        "parameters": [
                            "self",
                            "value",
                            "time",
                            "key",
                            "action",
                            "datatype"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set a link's position (from index, to index) in the channel graph.\n\n        :param from_index: The index in the channel graph for the current (from) channel.\n        :type from_index: int\n        :param to_channel: The to channel.\n        :type to_channel: modo.channel.Channel\n        :param to_index: the index in the channel graph for the 'to' channel.\n        :type to_index: int\n\n        ",
                        "name": "setLink",
                        "parameters": [
                            "self",
                            "from_index",
                            "to_channel",
                            "to_index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns the storage type of the channel, which can be valid exo-type name for numeric and stored\n        custom types or None if no storage type is found.\n\n        :getter: Returns the channel storage type\n        :rtype: basestring\n\n        ",
                        "name": "storageType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns the channel type. The numeric and gradient types can be keyframed. The return type is an int which\n        translates to the following types:\n\n            | 0: none\n            | 1: integer\n            | 2: float\n            | 3: gradient\n            | 4: storage\n            | 5: eval\n\n        :getter: Returns the channel type.\n        :rtype: int\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "ChannelRead",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Initialises the channel read object with a new action and/or an explicit time to read from. If no action is\n        provided the last action set is used. If no time value is provided the current time is used.\n\n        :param action: optional action to read from.\n        :type action: basestring\n        :param time: optional time (in seconds) to read at.\n        :type time: float\n\n        ",
                        "name": "set",
                        "parameters": [
                            "self",
                            "action",
                            "time"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Wrapper to allow setting and reading all three channels on a vector 'channel' at once\n\n    :param basestring channelName: The channel name. eg 'diffCol'\n    :param modo.item.Item item: The item the channel belongs to.\n\n    :raises: LookUpError if no respective channel of the given name was found\n    ",
                "name": "ChannelTriple",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Same arguments as Channel.get()\n        ",
                        "name": "get",
                        "parameters": [
                            "self",
                            "args",
                            "kwargs",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets three values for the three channels at once\n\n        :param float time: Time in seconds for the value to be set at (optional)\n        :param basestring action: Action to set the value for (optional)\n        ",
                        "name": "set",
                        "parameters": [
                            "self",
                            "values",
                            "time",
                            "action",
                            "channel",
                            "value"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "ChannelWrite",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Initialises the channel write object with an action and/or a time write to. Defaults to writing to the\n        \"edit\" action if no action is provided and to the current time if no time is provided.\n\n        :param action: the action to write to.\n        :type action: basestring\n        :param time: the time to write to in seconds.\n        :type time: float\n\n        ",
                        "name": "set",
                        "parameters": [
                            "self",
                            "action",
                            "time"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Cylinder light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Cylinder Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Cylinder Light item.\n\n    :param light: Optional Cylinder light item object (type lx.symbol.sITYPE_CYLINDERLIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid cylinder light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a cylinder light or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "CylinderLight",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "Deformer",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a list of connected meshes\n        ",
                        "name": "meshes",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the number of meshes connected to this deformer\n        ",
                        "name": "numMeshes",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "Deformer",
                        "docstring": null,
                        "name": "svc",
                        "children": [
                            "DeformEltToItem",
                            "DeformerChannel",
                            "DeformerDeformationItem",
                            "DeformerFlags",
                            "GroupDeformer",
                            "InvalidateTargets",
                            "ItemToDeformElt",
                            "MergeChangeState",
                            "MeshByIndex",
                            "MeshCount",
                            "ScriptQuery"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "DeformerGroup",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Connects an influence deformer into this deformGroup\n\n        :param other:\n        ",
                        "name": "connectInput",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "createJointLocator",
                        "parameters": [
                            "self",
                            "name",
                            "mesh",
                            "joint",
                            "influence",
                            "weightmap"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "mesh",
                        "parameters": [
                            "self",
                            "it"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Directional light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Directional Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Directional Light item.\n\n    :param light: Optional Directional light item object (type lx.symbol.sITYPE_SUNLIGHT)  or string (item\n        name or ID) to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid directional light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Directional light item or an item name or ID\n        string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "DirectionalLight",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Dome light item class\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Dome Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Dome Light item.\n\n    :param light: Optional Dome light item object (type lx.symbol.sITYPE_DOMELIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Dome light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Dome light item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "DomeLight",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "Envelope",
                "children": [
                    {
                        "type": "property",
                        "docstring": "gets/sets the behavior of times for both before the first keyframe and after the last keyframe in the\n        envelope.\n\n        :setter: Sets the envelope behavior\n        :param behavior: the behaviour to set for the envelope. See :meth:`preBehaviour` for available options.\n        :type behavior: int\n\n        :getter: Returns the envelope behavior\n        :rtype: int\n        ",
                        "name": "behavior",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Clears (removes all keys from) the envelope.",
                        "name": "clear",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns the interpolation setting for the envelope.  Can be one of:\n\n            | lx.symbol.iENVv_INTERP_CURVE\n            | lx.symbol.iENVv_INTERP_LINEAR\n            | lx.symbol.iENVv_INTERP_STEPPED\n\n        :getter: Returns the interpolation setting for the envelope.\n        :rtype: int\n\n        ",
                        "name": "interpolation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns whether the envelope is integer-valued type, if not it's a float type.\n\n        :Getter: Returns True if the envelope is integer-valued type, False otherwise.\n        :rtype: bool\n\n        ",
                        "name": "isInt",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a :class:`Keyframes` object that provides access to the keyframes set for the envelope and methods to\n        manipulate them.\n\n        :getter: Returns a :class:`Keyframes` object containing the keys for this envelope.\n        :rtype: modo.channel.Keyframes\n\n        ",
                        "name": "keyframes",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "gets/sets the behavior of times after the last keyframe in the envelope.\n\n        :setter: Sets the envelope post behavior\n        :param behavior: the behaviour to set for the envelope. See :meth:`preBehaviour` for available options.\n        :type behavior: int\n\n        :getter: Returns the envelope post behavior\n        :rtype: int\n        ",
                        "name": "postBehaviour",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "gets/sets the behavior of times before the first keyframe in the envelope.\n\n        - **RESET** A default value, or may be just zero.\n        - **CONSTANT** The value of the first or last keyframe. For first or last keys set to \"Auto\" or \"Auto Flat\"           the slopes of the keys will be adjusted to provide a smooth interpolation to or from the behavior.\n        - **REPEAT** The values in the keyframe range repeating continuously.\n        - **OSCILLATE** Like repeat, but the values run forwards and backward alternately. For first or last keys set           to \"Auto\" or \"Auto Flat\" the slopes of the keys will be adjusted to provide a smooth interpolation to or           from the behavior.\n        - **OFFSETREPEAT** Like repeat, but the values are offset in each cycle by the difference between the first           and last keyframes. For first or last keys set to \"Auto\" or \"Auto Flat\" the slopes of the keys will be           adjusted to provide a smooth interpolation to or from the behavior.\n        - **LINEAR** Linear interpolation from the slope at the nearest keyframe.\n        - **NONE** Indicates that the envelope does not exist before or after the explicit keyframe range. This can be           used by motion evaluation code to decide whether to use the envelope for a channel or to look up the parent           envelope or default value.\n        - **CONSTANT_KEEP_SLOPE** As for constant except that the slopes of the first or last keys are not changed.\n        - **OSCILLATE_KEEP_SLOPE** As for oscillate except that the slopes of the first or last keys are not changed.\n        - **OFFSETREPEAT_KEEP_SLOPE** As for offset repeat except that the slopes of the first or last keys are not           changed.\n\n        :setter: Sets the behavior\n        :param behavior: the behaviour to set for the envelope. Can be one of:\n\n                | lx.symbol.iENV_RESET\n                | lx.symbol.iENV_CONSTANT\n                | lx.symbol.iENV_REPEAT\n                | lx.symbol.iENV_OSCILLATE\n                | lx.symbol.iENV_OFFSETREPEAT\n                | lx.symbol.iENV_LINEAR\n                | lx.symbol.iENV_NONE\n                | lx.symbol.iENV_CONSTANT_KEEP_SLOPE\n                | lx.symbol.iENV_OSCILLATE_KEEP_SLOPE\n                | lx.symbol.iENV_OFFSETREPEAT_KEEP_SLOPE\n\n        :type behavior: int\n\n        :getter: Returns envelope behavior\n        :rtype: int\n\n        ",
                        "name": "preBehaviour",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the value of the envelope evaluated at the specified time. If no time is explicitly provided the\n        value of the envelope at the current time is returned\n\n        :param time: time to evaluate envelope at.\n        :type time: float\n        :returns: value of the envelope\n        :rtype: float for float type envelopes, int for integer-valued type envelopes\n\n        ",
                        "name": "value",
                        "parameters": [
                            "self",
                            "time"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "GeneralInfluenceDeformer",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "connectInput",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the UI version of the map name as string\n        ",
                        "name": "mapName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a list of connected meshes\n        ",
                        "name": "meshes",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the number of meshes connected to this deformer\n        ",
                        "name": "numMeshes",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "Deformer",
                        "docstring": null,
                        "name": "svc",
                        "children": [
                            "DeformEltToItem",
                            "DeformerChannel",
                            "DeformerDeformationItem",
                            "DeformerFlags",
                            "GroupDeformer",
                            "InvalidateTargets",
                            "ItemToDeformElt",
                            "MergeChangeState",
                            "MeshByIndex",
                            "MeshCount",
                            "ScriptQuery"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "A group item.\n\n    Takes an optional 'groupItem' argument which can be either an item object (lx.object.Item or lxu.object.Item) of\n    type 'Group' or an item name or ID to look up. If no groupItem is supplied as an argument an attempt will be\n    made to wrap the most recently selected Area Light item.\n\n    'gtype' can be any one of the built in group types by passing one of the built in type strings ('assembly', 'actor',\n    'render', 'keyset', 'chanset', 'preset', 'shader'), an empty string for a general group or any other string to\n    create a custom group type.\n\n    :param groupItem: an optional group item (type lx.symbol.sITYPE_GROUP) or an item name/ID to look up.\n    :type groupItem: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :param gtype: the group type.\n    :type gtype: basestring\n    :raises TypeError: if an item is supplied as the groupItem argument but is not of type lx.symbol.sITYPE_GROUP.\n    :raises ValueError: if no groupItem argument is supplied and no valid group item is selected in the scene.\n    :raises LookupError: if a name or ID is supplied as the groupItem argument but no item with that name/ID can\n        be found.\n\n    Note that the children() method derived from the Item object will only list child groups.\n    To iterate the contained items, use the method items.\n\n    ",
                "name": "Group",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a channel to the group.\n        The supplied channel argument be a modo.channel.Channel() object, in which case no item argument is required or a channel\n        name (string) or index (int), both of which require an additional 'item' argument.\n\n        :param channel: the channel to add.\n        :type channel: modo.channel.Channel() object, int or basestring\n        :param item: the item to which the channel belongs. Not required if a Channel() object is provided as the\n            first argument.\n        :type item: modo.item.Item\n\n        ",
                        "name": "addChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add one or more items to the group if they're not already members.\n\n        :param items: the item or items to add\n        :type items: modo.item.Item or list of modo.item.Item objects\n\n        ",
                        "name": "addItems",
                        "parameters": [
                            "self",
                            "items",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets the item at the specified index.\n\n        :returns: item at the specified index.\n        :rtype: modo.item.Item\n        :param index: index of the item in the group's list of items.\n        :type index: int\n\n        ",
                        "name": "getItemAt",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Index of the item within the groups list of items.\n\n        :return: item index in the group.\n        :rtype: int\n\n        ",
                        "name": "getItemIndex",
                        "parameters": [
                            "self",
                            "item",
                            "x",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The number of channels in the group.\n\n        :getter: Returns the number of channels in the group.\n        :rtype: int\n\n        ",
                        "name": "groupChannelCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "returns a list of all the channels in the group.\n        Each element of the list will be an modo.channel.Channel\n\n        :getter: Returns a list of channels.\n        :rtype: list of modo.channel.Channel items\n\n        ",
                        "name": "groupChannels",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets the channel at the specified index.\n\n        :returns: the channel at the specified index.\n        :rtype: modo.channel.Channel\n        :param index: index of the channel in the group's list of channels.\n        :type index: int\n\n        ",
                        "name": "groupGetChannelAt",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel",
                            "func"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the channel at the specified index from the group's list of channels.\n\n        :param index: index of the channel in the group's list of channels.\n        :type index: int\n\n        ",
                        "name": "groupRemoveChannelAt",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Check to see if the specified channel is a member of the group.\n        The supplied channel argument be a :class:`modo.channel.Channel` object, in which case no item argument\n        is required, a channel name (string) or index (int), both of which require an additional 'item' argument.\n\n        :param chan: the channel to check\n        :type chan: modo.channel.Channel, int or basestring\n        :param item: the item to which the channel belongs. Not required if a Channel() object is provided as the\n            first argument.\n        :type item: modo.item.Item\n        :returns: True if the channel is in the group, False if not.\n        :rtype: bool\n        ",
                        "name": "hasChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item",
                            "x",
                            "group",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :param item:\n        :type item:\n        :returns: True if the item is in the group, False if not.\n        :rtype: bool\n        ",
                        "name": "hasItem",
                        "parameters": [
                            "self",
                            "item",
                            "connection",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The number of items in the group\n\n        :getter: Returns the number of items\n        :rtype: int\n\n        ",
                        "name": "itemCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get a list of the items in the group.\n\n        :returns: the items in the group.\n        :rtype: list\n\n        ",
                        "name": "items",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Remove a channel from the group.\n        The supplied channel argument can either be a channel name (string) or index (int).\n\n        :param item: the item to which the channel belongs.\n        :type item: modo.item.Item\n        :param channel: the channel to remove.\n        :type channel: int or basestring\n\n        ",
                        "name": "removeChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the item at the specified index from the group's list of items.\n\n        :param index: index of the item in the group's list of items.\n        :type index: int\n\n        ",
                        "name": "removeItemAt",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Remove one or more items from the group, if they exis.\n\n        :param items: the item or items to remove.\n        :type items: modo.item.Item or list of modo.item.Item objects\n\n        ",
                        "name": "removeItems",
                        "parameters": [
                            "self",
                            "items",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set's the index for the specified item in the list of items within the group.\n\n        :param item: the item to move\n        :type item: modo.item.Item\n        :param index: the index in the list of items belonging to the group to move the item to.\n        :type index: int\n        :raises ValueError: if index is less than zero.\n\n        ",
                        "name": "setItemIndex",
                        "parameters": [
                            "self",
                            "item",
                            "index",
                            "x",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get or set the group type.\n        If the group is a general group it has no type so returns None.\n\n        :getter: Returns the type of the group.\n        :rtype: basestring or None\n        :raises ValueError: if the supplied argument isn't one of the default group type strings.\n\n        :setter: Sets the group type\n        :param gtype: either one of the available group types - 'assembly', 'actor', 'render', 'keyset', 'chanset',\n            'preset', 'shader' to define the group as one of the built in types or any other string to define the\n            group as a custom type of your own.\n        :type gtype: basestring\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Group locator item class.\n\n    Takes an optional 'grploc' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Group locator' or an item name or ID to look up. If no grploc item is supplied as an argument an attempt will be\n    made to wrap the most recently selected group locator item.\n\n    :param grploc: Optional group locator item object (type lx.symbol.sITYPE_GROUPLOCATOR) or string (item name or ID)\n        to look up.\n    :type grploc: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid group locator item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'group\n        locator' or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the grploc argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "GroupLocator",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Base item class\n\n    Takes an optional lx.object.Item object as an argument. If none is provided (the default) then the most\n    recently selected item is used.\n\n    :param item: Optional item object to wrap.\n    :type item: an instance of lx.object.Item or lxu.object.item\n    :raises ValueError: if no item is passed as an argument and no valid items are currently selected.\n    :raises LookupError: if a string (item name or ID) is passed as the item argument and no item with that name or ID\n        cane be found in the scene.\n    :raises TypeError: if the object passed as the 'item' argument isn't an instance of lx.object.Item.\n\n    ",
                "name": "Item",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Utility container class for quick access to ItemGraph compatible graphs\n\n    :param item:                            Item to look up graph for\n    :param ls.symbol.sGRAPH_* graphType:    Graph to look up. Common ones are 'parent', 'deformers', 'groups', 'chanMods'\n    :param bool reverse:                    Indices traverse the graph forwards if false or reverse if true\n    ",
                "name": "ItemGraph",
                "children": [
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_ItemGraph__toType",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Connects the given item as input.\n\n        This function is called by the >> operator.\n\n        :param Item other: Can be any type derived from Item\n        ",
                        "name": "connectInput",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a dictionary that lists the input- and output items at once.\n        :rtype: dictionary\n        ",
                        "name": "connectedItems",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "deleteLink",
                        "parameters": [
                            "self",
                            "args",
                            "kwargs"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the given item from the input connections if any.\n\n        This function is called by the << operator.\n\n        :param Item other: Can be any type derived from Item\n        ",
                        "name": "disconnectInput",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Items of the forward connections\n        ",
                        "name": "forward",
                        "parameters": [
                            "self",
                            "index",
                            "before",
                            "result",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the Item that this ItemGraph instance is bound to.\n        :return type: Item\n        ",
                        "name": "item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Items of the reverse connections\n        ",
                        "name": "reverse",
                        "parameters": [
                            "self",
                            "index",
                            "before",
                            "result",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "setLink",
                        "parameters": [
                            "self",
                            "args",
                            "kwargs"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets the direction that is used for lookup when using the angular brackets []\n\n        :param bool reverse: If True the graph is looked up forwards, if False, backwards.\n        ",
                        "name": "setReverse",
                        "parameters": [
                            "self",
                            "reverse"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the name of the graph type that this instance represents.\n        :return type: basestring\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "ABCMeta",
                "docstring": null,
                "name": "Iterable",
                "children": [
                    {
                        "type": "WeakSet",
                        "docstring": null,
                        "name": "_abc_cache",
                        "children": [
                            "_apply",
                            "_commit_removals",
                            "_iterating",
                            "_pending_removals",
                            "_remove",
                            "add",
                            "clear",
                            "copy",
                            "data",
                            "difference",
                            "difference_update",
                            "discard",
                            "intersection",
                            "intersection_update",
                            "isdisjoint",
                            "issubset",
                            "issuperset",
                            "pop",
                            "remove",
                            "symmetric_difference",
                            "symmetric_difference_update",
                            "union",
                            "update"
                        ]
                    },
                    {
                        "type": "WeakSet",
                        "docstring": null,
                        "name": "_abc_negative_cache",
                        "children": [
                            "_apply",
                            "_commit_removals",
                            "_iterating",
                            "_pending_removals",
                            "_remove",
                            "add",
                            "clear",
                            "copy",
                            "data",
                            "difference",
                            "difference_update",
                            "discard",
                            "intersection",
                            "intersection_update",
                            "isdisjoint",
                            "issubset",
                            "issuperset",
                            "pop",
                            "remove",
                            "symmetric_difference",
                            "symmetric_difference_update",
                            "union",
                            "update"
                        ]
                    },
                    {
                        "type": "int",
                        "docstring": "int(x[, base]) -> integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string.  If base is zero, the proper base is guessed based on the\nstring content.  If the argument is outside the integer range a\nlong object will be returned instead.",
                        "name": "_abc_negative_cache_version",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "WeakSet",
                        "docstring": null,
                        "name": "_abc_registry",
                        "children": [
                            "_apply",
                            "_commit_removals",
                            "_iterating",
                            "_pending_removals",
                            "_remove",
                            "add",
                            "clear",
                            "copy",
                            "data",
                            "difference",
                            "difference_update",
                            "discard",
                            "intersection",
                            "intersection_update",
                            "isdisjoint",
                            "issubset",
                            "issuperset",
                            "pop",
                            "remove",
                            "symmetric_difference",
                            "symmetric_difference_update",
                            "union",
                            "update"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "Joint",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "Keyframes",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_indexFromTime",
                        "parameters": [
                            "self",
                            "time",
                            "index",
                            "i",
                            "values"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Adds a new keyframe at the specified time. If no time value is passed as an argument a keyframe is set at\n        the current time.\n\n        :param time: optional time (in seconds) to add a keyframe at.\n        :type time: float\n        :param val: the value to set for the keyframe\n        :type val: int or float\n\n        ",
                        "name": "add",
                        "parameters": [
                            "self",
                            "val",
                            "time"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deletes the current key",
                        "name": "delete",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Go to the first keyframe.",
                        "name": "first",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the slope type for either side of a keyframe.\n\n        :returns: a tuple of the slope type set for the side of the keyframe specified and whether the slope is         weighted or not.\n        :rtype: (int, int)\n\n        ",
                        "name": "getSlopeType",
                        "parameters": [
                            "self",
                            "side"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Go to the last keyframe.",
                        "name": "last",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Go to the next keyframe.",
                        "name": "next",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the number of keyframes found\n        :rtype: int\n        ",
                        "name": "numKeys",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Go to the previous keyframe.",
                        "name": "prev",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Go to the keyframe by index",
                        "name": "setIndex",
                        "parameters": [
                            "self",
                            "index",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Sets the slope type for either side of a keyframe\n\n        - **SLOPE_DIRECT** the slope of the tangent is set based on the value stored in the key.\n        - **SLOPE_AUTO** the slope of the tangent is calculated automatically with regard to surrounding keys.         This is similar to the slope adjustments made by TCB curves.\n        - **SLOPE_LINEAR_IN** the slope of the tangent is calculated to align with the previous key's value.\n        - **SLOPE_LINEAR_OUT** the slope of the tangent is calculated to align with the next key's value.\n        - **SLOPE_FLAT** The slope of the tangent is set to zero.\n        - **SLOPE_AUTOFLAT** the same as auto but if a neighboring key has the same value as the key the slope         is set to zero.\n        - **SLOPE_STEPPED** Maintains the value of the previous key between pairs of keys.\n\n        :param stype: set the slope type for the current keyframe. Can be one of:\n\n            | lx.symbol.iSLOPE_AUTO\n            | lx.symbol.iSLOPE_AUTOFLAT\n            | lx.symbol.iSLOPE_DIRECT\n            | lx.symbol.iSLOPE_FLAT\n            | lx.symbol.iSLOPE_LINEAR_IN\n            | lx.symbol.iSLOPE_LINEAR_OUT\n            | lx.symbol.iSLOPE_STEPPED\n\n        :type stype: int\n        :param side: the side of the key (in or out) the slope type is being set for\n        :type side: int\n\n        ",
                        "name": "setSlopeType",
                        "parameters": [
                            "self",
                            "stype",
                            "side"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns & sets the time for the current keyframe.\n\n        :setter: Sets the time\n        :param time: the time to move the key to.\n        :type time: float\n\n        :getter: Returns the time of the current keyframe\n        :rtype: float\n\n        ",
                        "name": "time",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Convenience property to get & set value of the current keyframe for the 90% case of an unbroken key.\n\n        :setter: Sets a value\n        :param val: the value to set for the key.\n        :type val: int or float\n\n        :getter: Returns the value of an (unbroken) key.\n        :rtype: int or float\n        ",
                        "name": "value",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Base Light item class.\n\n    Each light item encapsulates both an lx.object.Item object (via inheritance from the Item class) of a specific modo\n    light type and a corresponding lx.object.Item of type 'lightMaterial' as a :class:`LightMaterial` object via the\n    light's material property.\n\n    example::\n\n        # to set the diffuse color on the currently selected spotlight\n        spotlight = modo.SpotLight()\n        spotlight.material.ch_diffCol.set((0.7, 0.1, 0.5))\n\n    .. note::\n\n        Although \"Light\" isn't technically a base class since, like all other classes in modo.item, it inherits from\n        \"Item\", it does encapsulate modo's 'Light\" supertype and can be treated as a kind of 'pseudo' base class for\n        all modo's light types. As such it should not be instantiated directly, create one of the specific light types\n        instead.\n\n    |\n\n    :param light: Optional light item object to wrap. Must be a specific type of light, not the light supertype.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid light item selected.\n    :raises TypeError: if the item passed as an argument isn't an instance of a specific subclass of Light.\n\n    ",
                "name": "Light",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Wraps a light material texture layer item.\n\n        :param material: the light material item to be wrapped.\n        :type material: lx.object.Item of type lx.symbol.sITYPE_LIGHTMATERIAL\n\n        ",
                "name": "LightMaterial",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: The light item that the material belongs to.\n\n        :param light_item: the light item to parent the material layer to.\n        :type light_item: an instance of one of the modo.Light types or either lx.object.Item or lxu.object.Item of\n            a specific light item type\n        :returns: the parent light item.\n        :rtype: one of the modo light types.\n\n        ",
                        "name": "light",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "A wrapper property for the light material item's three diffuse color channels. Returns an\n        :class:`modo.channel.Channel` object\n\n        :getter: Returns a channelTriple object.\n        :rtype: modo.channel.channelTriple\n\n        ",
                        "name": "lightCol",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: A wrapper property for the light material item's three scattering color channels. Returns an\n        :class:`modo.channel.Channel` object\n\n        :returns: a channelTriple object.\n        :rtype: modo.channel.channelTriple\n\n        ",
                        "name": "scatteringCol",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: A wrapper property for the light material item's three shadow color channels. Returns an\n        :class:`modo.channel.Channel` object\n\n        :returns: a channelTriple object.\n        :rtype: modo.channel.channelTriple\n\n        ",
                        "name": "shadCol",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Locator item class.\n\n    Takes an optional 'locator' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'locator' or an item name or ID to look up. If no locator item is supplied as an argument an attempt will be made to\n    wrap the most recently selected locator item.\n\n    :param locator: Optional locator item object (type lx.symbol.sITYPE_LOCATOR) or string (item name or ID) to look up.\n    :type locator: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid locator item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'locator'\n        or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the locator argument but no item with that name/ID can\n        be found.\n\n    Hint: Items of other locator derived types should be casted as LocatorSuperType, casting to this class will fail.\n    ",
                "name": "Locator",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "The LocatorSuperType reflects all items that can be seen and transformed in the 3d view.\n    Locators have transform items that hold the respective transform channels, such as position and rotation.\n\n    ",
                "name": "LocatorSuperType",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Matrix3 class ",
                "name": "Matrix3",
                "children": [
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_MatrixToEuler",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_getIdentity",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns euler values from the Matrix\n\n        :param bool degrees: If True, the values are returned as degrees, otherwise as radians\n        :param basestring order: The rotation order to return values for.\n        :return list: Euler values\n        ",
                        "name": "asEuler",
                        "parameters": [
                            "self",
                            "degrees",
                            "order",
                            "euler",
                            "angle"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :return: A copy of this Matrix\n        ",
                        "name": "copy",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Inverts this Matrix in place\n        ",
                        "name": "invert",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns Matrix: An inverted copy of this Matrix\n        ",
                        "name": "inverted",
                        "parameters": [
                            "self",
                            "tmp"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Copy values from other Matrix\n\n        :param Matrix other: Source Matrix\n        ",
                        "name": "set",
                        "parameters": [
                            "self",
                            "other",
                            "transpose",
                            "row"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set this matrix to it's identity ",
                        "name": "setIdentity",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "This function transposes a matrix, by flipping it across it's main\n        diagonal.",
                        "name": "transpose",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "This function transposes a matrix, by flipping it across it's main\n        diagonal. It returns a new transposed matrix. ",
                        "name": "transposed",
                        "parameters": [
                            "self",
                            "out_mat",
                            "i",
                            "j"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Matrix class ",
                "name": "Matrix4",
                "children": [
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_MatrixToEuler",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_getIdentity",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_matrix_calcRotation",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "\n\n        :param matrix:\n        :param vector:\n        :param result:\n        :return:\n        ",
                        "name": "_matrix_vectorMultiply",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "asEuler",
                        "parameters": [
                            "self",
                            "degrees",
                            "order",
                            "euler",
                            "angle"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the translation part of this Matrix ",
                        "name": "asRotateMatrix",
                        "parameters": [
                            "self",
                            "retM",
                            "i",
                            "j"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :return: A copy of this Matrix\n        ",
                        "name": "copy",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "determinant",
                        "parameters": [
                            "self",
                            "row",
                            "m",
                            "a0",
                            "a1",
                            "a2",
                            "a3",
                            "a4",
                            "a5",
                            "b0",
                            "b1",
                            "b2",
                            "b3",
                            "b4",
                            "b5"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "fromEuler",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Inverts this Matrix in place\n        ",
                        "name": "invert",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "inverted",
                        "parameters": [
                            "self",
                            "output",
                            "a0",
                            "a1",
                            "a2",
                            "a3",
                            "a4",
                            "a5",
                            "b0",
                            "b1",
                            "b2",
                            "b3",
                            "b4",
                            "b5",
                            "det",
                            "inv_det",
                            "i",
                            "j"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the translation part of this matrix\n        :rtype: tuple\n\n        :setter: Sets the translation part of this matrix\n        :param position: Position\n        :type position: iterable\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "scale",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "set",
                        "parameters": [
                            "self",
                            "other",
                            "row"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set this matrix to it's identity ",
                        "name": "setIdentity",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "This function transposes a matrix, by flipping it across it's main\n        diagonal.",
                        "name": "transpose",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "This function transposes a matrix, by flipping it across it's main\n        diagonal. It returns a new transposed matrix. ",
                        "name": "transposed",
                        "parameters": [
                            "self",
                            "out_mat",
                            "i",
                            "j"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Mesh item class.\n\n    Takes an optional 'mesh' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'mesh' or an item name or ID to look up. If no mesh item is supplied as an argument an attempt will be made to\n    wrap the most recently selected mesh layer.\n\n    :param mesh: Optional mesh item object (type lx.symbol.sITYPE_MESH) or string (item name or ID) to look up.\n    :type mesh: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid mesh item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'mesh'\n        or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the mesh argument but no item with that name/ID can\n        be found.\n\n    The mesh geometry can be accessed by the :class:`geometry<modo.meshgeometry.MeshGeometry>` attribute.\n\n    .. py:attribute:: geometry\n\n        :rtype: :class:`MeshGeometry<modo.meshgeometry.MeshGeometry>`\n\n\n    ",
                "name": "Mesh",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "geometry",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "\n        Base class for vertex, edge- and polygon containers to share common behaviour\n    ",
                "name": "MeshComponentContainer",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "General access for angular brackets\n        ",
                        "name": "_getitem",
                        "parameters": [
                            "self",
                            "index",
                            "cls",
                            "i",
                            "indices"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: returns the wrapped lx.object.Mesh object\n        ",
                        "name": "internalMesh",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Class representing an edge\n    ",
                "name": "MeshEdge",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Helper function for operators ",
                        "name": "_MeshEdge__apply_operator",
                        "parameters": [
                            "self",
                            "func_name",
                            "operand",
                            "vertex"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared EdgeAccessor object of the core SDK (lx.object.Edge)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "deselect",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromID",
                        "parameters": [
                            "cls",
                            "id",
                            "geometry",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromIDs",
                        "parameters": [
                            "cls",
                            "id1",
                            "id2",
                            "parent",
                            "mesh",
                            "point",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromVertices",
                        "parameters": [
                            "cls",
                            "vertices",
                            "parent",
                            "mesh",
                            "point",
                            "id1",
                            "id2",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the pointer ID of this edge",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the polygons connected to this edge",
                        "name": "polygons",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace",
                            "op"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the connected vertex indices as tuple\n        ",
                        "name": "vertex_indices",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the connected :class:`vertices<MeshVertex>` as tuple\n        ",
                        "name": "vertices",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Extension class of the Edge accessor lx.object.Edge that adds iteration methods.\n\n        Note: Modo does not store edges by index, therefore they cannot be accessed by such.\n        You can use the built-in python iterator however.\n\n        :param mesh: Input mesh to obtain PointAccessor from\n        :param parent: MeshGeometry parent object\n    ",
                "name": "MeshEdges",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_MeshEdges__pollEdgeIDs",
                        "parameters": [
                            "self",
                            "lxifc",
                            "MeshEdgePollVisitor",
                            "visitor"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "General access for angular brackets\n        ",
                        "name": "_getitem",
                        "parameters": [
                            "self",
                            "index",
                            "cls",
                            "i",
                            "indices"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_performSelectionOperation",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Enumerate edges using a visitor\n\n        :param int mode: lx.symbol.iMARK_ANY\n        :param lxifc.Visitor visitor: Visitor class instance to use\n        :param monitor: Optional monitor (progress bar) to display\n        ",
                        "name": "enumerate",
                        "parameters": [
                            "self",
                            "mode",
                            "visitor",
                            "monitor"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromVertices",
                        "parameters": [
                            "self",
                            "vertices"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: returns the wrapped lx.object.Mesh object\n        ",
                        "name": "internalMesh",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects one or multiple edges of this mesh\n\n        :param list or tuple edges: index, MeshEdge, or sequence of indices or MeshEdge objects. If None, the selection is cleared.\n        :param bool replace: Clears the selection first\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "edges",
                            "replace",
                            "p",
                            "polygon",
                            "index",
                            "pid"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the currently selected edges as tuple\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": " A class wrapped around lx.object.Mesh that provides access to geometry of a given Mesh Item\n\n    :param item: Input item\n    :type item: type lx.object.Item\n    :param mode: Mode in which to access the mesh. Possible values: \"write\", \"read\", \"deformed\"\n    :type mode: string\n    :return: Instance of MeshGeometry\n\n    :raises LookupError: If item was passed as string and could not be found in the scene\n    :raises TypeError: If the passed item is not of type lx.object.Item\n    :raises TypeError: If the passed item is not compatible with the mesh type\n\n\n    example::\n\n        scene = modo.scene.current()\n\n        # Get the selected mesh\n        for mesh in scene.selectedByType(\"mesh\")[:1]:\n\n            # Print the number of vertices\n            print len(mesh.geometry.vertices)\n\n            # Print point position by index\n            print mesh.geometry.vertices[4]\n\n            # Set point position by index\n            mesh.geometry.vertices[4] = (1,2,3)\n\n            # Iterate all vertices and move them by 0.1 in x\n            for point in mesh.geometry.vertices:\n                point += (0.1, 0, 0)\n\n            # Update to see mesh changes\n            mesh.geometry.setMeshEdits()\n\n    .. py:attribute:: vertices\n\n        :rtype: :class:`MeshVertices<MeshVertices>`\n\n    .. py:attribute:: edges\n\n        :rtype: :class:`MeshEdges<MeshEdges>`\n\n    .. py:attribute:: polygons\n\n        :rtype: :class:`MeshPolygons<MeshPolygons>`\n\n    .. py:attribute:: vmaps\n\n        :rtype: :class:`MeshMaps<MeshMaps>`\n\n    ",
                "name": "MeshGeometry",
                "children": [
                    {
                        "type": "Selection",
                        "docstring": null,
                        "name": "_SEL_SVC",
                        "children": [
                            "AbortBatch",
                            "Allocate",
                            "ByIndex",
                            "Clear",
                            "Count",
                            "CurrentSubTypes",
                            "CurrentType",
                            "Deselect",
                            "Drop",
                            "EndBatch",
                            "GetTime",
                            "LookupName",
                            "LookupType",
                            "Recent",
                            "Remove",
                            "ScriptQuery",
                            "Select",
                            "SetTime",
                            "StartBatch",
                            "State",
                            "Test",
                            "Toggle"
                        ]
                    },
                    {
                        "type": "Undo",
                        "docstring": null,
                        "name": "_UNDO_SVC",
                        "children": [
                            "Apply",
                            "Record",
                            "ScriptQuery",
                            "State"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "accessMode",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get the bounding box of this mesh\n\n        :getter: Returns a tuple representing the two corners of the bounding box\n        ",
                        "name": "boundingBox",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":return: Center position of the bounding box\n        ",
                        "name": "getMeshCenter",
                        "parameters": [
                            "self",
                            "a",
                            "b",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the wrapped lx.object.Mesh object\n        ",
                        "name": "internalMesh",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: returns the vertex count of this mesh",
                        "name": "numEdges",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: returns the polygon count of this mesh",
                        "name": "numPolygons",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: returns the vertex count of this mesh",
                        "name": "numVertices",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "setAccessMode",
                        "parameters": [
                            "self",
                            "value",
                            "time",
                            "item",
                            "scene",
                            "mesh",
                            "chanWrite",
                            "write_mesh_obj",
                            "chanRead",
                            "read_mesh_obj",
                            "chanRead_deformed",
                            "channelmesh",
                            "read_deformed_mesh_obj",
                            "mesh_filter"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Updates mesh edits applying previous changes.\n\n        :param lx.symbol.f_MESHEDIT_* editType: The type of change to set. Defaults to all.\n        ",
                        "name": "setMeshEdits",
                        "parameters": [
                            "self",
                            "editType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "This module provides access to the various map types that a mesh holds.\n\n        example::\n\n            # By index\n            myMap = geo.vmaps[0]\n\n            # From string\n            myMap = geo.vmaps['MyMap']\n\n            # From string with wildcard\n            myMap = geo.vmaps['MyMap*']\n\n            # Get the first morph map if any and change vertex 36\n            for morph in geo.vmaps.morphMaps[0:1]:\n                morph[36] = (0, 0, 0)\n\n            # Update changes on the mesh\n            geo.setMeshEdits()\n\n\n\n    ",
                "name": "MeshMaps",
                "children": [
                    {
                        "type": "function",
                        "docstring": "Returns the class that corresponds to the given symbol\n\n        :param lx.symbol symbol: VMap symbol, for example lx.symbol.i_VMAP_MORPH\n        :returns: Class\n        ",
                        "name": "_MeshMaps__classFromSymbol",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Enumerates and returns information about the mesh.\n\n        :param list types_list: optional list of symbols (lx.symbol.i_VMAP_WEIGHT etc.)\n        :returns: List of dictionaries with fields \"name\", \"type_name\", \"ID\" and \"map_type\"\n        ",
                        "name": "_MeshMaps__poll",
                        "parameters": [
                            "self",
                            "types_list",
                            "lxifc",
                            "QueryMapsVisitor",
                            "visitor"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "General access for angular brackets\n        ",
                        "name": "_getitem",
                        "parameters": [
                            "self",
                            "index",
                            "cls",
                            "i",
                            "indices"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a new map\n\n        :arg string name: Name\n        :returns: New map\n        ",
                        "name": "addMap",
                        "parameters": [
                            "self",
                            "mapType",
                            "name",
                            "cls",
                            "map_accessor",
                            "id"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a morph map\n\n        :arg string name: Name\n        :arg bool static: Creates a static (absolute) morph map if true and relative one if false\n        :returns MorphMap:\n        ",
                        "name": "addMorphMap",
                        "parameters": [
                            "self",
                            "name",
                            "static",
                            "map_type",
                            "cls",
                            "map_accessor",
                            "id"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addPickMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addRGBAMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addRGBMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addSubdivMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addUVMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addVectorMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addVertexNormalMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addWeightMap",
                        "parameters": [
                            "self",
                            "name",
                            "initValue",
                            "map",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "edgePickMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :param types_list: List of lx.symbol types. If it is None, all map types will be retrieved\n        :type types_list: list\n        :returns: tuple containing the requested map objects of this mesh\n        ",
                        "name": "getMapsByType",
                        "parameters": [
                            "self",
                            "types_list",
                            "mapInfos",
                            "out_maps",
                            "map_dict",
                            "cls",
                            "new_map"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: returns the wrapped lx.object.Mesh object\n        ",
                        "name": "internalMesh",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of morph maps",
                        "name": "morphMaps",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of pick maps (aka selection sets)",
                        "name": "pickMaps",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of RGB maps",
                        "name": "rgbMaps",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of RGBA maps",
                        "name": "rgbaMaps",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "tangentBasisMap",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of uv maps",
                        "name": "uvMaps",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of weight maps",
                        "name": "weightMaps",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Class wrapped around lx.object.Polygon for polygon access.\n    ",
                "name": "MeshPolygon",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Helper function for operators ",
                        "name": "_MeshPolygon__apply_operator",
                        "parameters": [
                            "self",
                            "func_name",
                            "operand",
                            "vertex"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_MeshPolygon__lookupUVMap",
                        "parameters": [
                            "self",
                            "uvmap",
                            "map_id",
                            "meshmap",
                            "uvmaps"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :param basestring operation: 'add', 'replace' or 'deselect'\n        ",
                        "name": "_performSelectionOperation",
                        "parameters": [
                            "self",
                            "operation"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared PolygonAccessor object of the core SDK (lx.object.Polygon)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the area of this polygon",
                        "name": "area",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this polygon\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the :class:`edges<MeshEdge>` connected to this polygon\n        ",
                        "name": "edges",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromID",
                        "parameters": [
                            "cls",
                            "ID",
                            "geometry",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Initializes a polygon from a given MeshGeometry object\n\n        :param index: The polygon index to be obtained\n        :type: int\n        :param geometry: The geometry to obtain the polygon from\n        :type: MeshGeometry\n        :return: An instance of MeshPolygon\n        ",
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "index",
                            "geometry",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets a polygon tag\n\n        :param basestring tagType: Any out of lx.symbol.i_POLYTAG_*\n        :return: Value of the tag\n        ",
                        "name": "getTag",
                        "parameters": [
                            "self",
                            "tagType",
                            "loc"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get a UV value pair from a vertex specific to this polygon.\n\n        :param UVMap uvmap: The UVMap to read the value from\n        :vertex int or MeshVertex: Vertex to read the uv value pair for. Can be a vertex index or a MeshVertex object.\n        ",
                        "name": "getUV",
                        "parameters": [
                            "self",
                            "vertex",
                            "uvmap",
                            "map_id",
                            "point",
                            "vertex_id",
                            "values"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the pointer ID of this polygon",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this polygon",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :param bool asIndices: Indices are returned if True, MeshVertex instances if False\n        :returns generator object: Tuples consisting of 3 vertices each\n        ",
                        "name": "iterTriangles",
                        "parameters": [
                            "self",
                            "asIndices",
                            "point",
                            "num",
                            "index",
                            "ids",
                            "indices",
                            "id_"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Iterator for vertex normals\n        :return: Generator object that returns a vertex normal per polygon vertex\n        ",
                        "name": "iterVertexNormals",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Get the value of the material tag\n        :setter: Set the value of the material tag, taking a string argument\n        ",
                        "name": "materialTag",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the neighbour polygons as tuple\n        ",
                        "name": "neighbours",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the normal of this polygon face",
                        "name": "normal",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":returns: The number of triangles on the polygon",
                        "name": "numTriangles",
                        "parameters": [
                            "self",
                            "keepTriangles",
                            "num"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the number of vertices of this polygon",
                        "name": "numVertices",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "remove",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this polygon\n\n        :param bool replace: Deselects all polygons of this mesh before selecting\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets a polygon tag\n\n        :param basestring tagType: Any out of lx.symbol.i_POLYTAG_*\n        :param value: Value to set\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagType",
                            "value",
                            "loc"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set a UV value pair for a vertex specific to this polygon.\n        Splitting UVs off their surrounding connections can be done this way.\n\n        :param tuple values: A tuple containing the two uv floats to be set\n        :vertex int or MeshVertex: Vertex to write the uv value pair for. Can be a vertex index or a MeshVertex object.\n        :param UVMap uvmap: The UVMap to write the value to. Will look for the first found UV map if None\n        ",
                        "name": "setUV",
                        "parameters": [
                            "self",
                            "values",
                            "vertex",
                            "uvmap",
                            "map_id",
                            "point",
                            "vertex_id",
                            "storage"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "List tags of this polygon\n        ",
                        "name": "tags",
                        "parameters": [
                            "self",
                            "polytag",
                            "i",
                            "attr",
                            "id",
                            "name",
                            "result",
                            "loc",
                            "tagType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter : Returns all triangle vertices as tuple\n        ",
                        "name": "triangles",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: Vertex index on the polygon\n        :returns tuple: The normal of the vertex\n        ",
                        "name": "vertexNormal",
                        "parameters": [
                            "self",
                            "index",
                            "point",
                            "id"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the connected :class:`vertices<MeshVertex>` of the polygon\n        ",
                        "name": "vertices",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "\n        Extension class of the Polygon accessor that adds iteration methods.\n\n        The vertices of of individual vertices can be accessed through the built-in iterator function\n        or angular brackets\n\n        example::\n\n            mesh, = modo.scene.current().selectedByType(\"mesh\")\n\n            # Get the number of polygon\n            print \"Number of polygons: %i\" % len(mesh.geometry.polygons)\n\n            # Access the first polygon and print it's normal\n            polygon = mesh.geometry.polygons[0]\n            print polygon.normal\n\n            # Iterates all polygons through a generator object and print it's vertices\n            for polygon in mesh.geometry.polygons:\n                print polygon.vertices\n\n    ",
                "name": "MeshPolygons",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "General access for angular brackets\n        ",
                        "name": "_getitem",
                        "parameters": [
                            "self",
                            "index",
                            "cls",
                            "i",
                            "indices"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_performSelectionOperation",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared PolygonAccessor object of the core SDK (lx.object.Polygon)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "addFromPointIndices",
                        "parameters": [
                            "self",
                            "indices",
                            "reversed",
                            "i",
                            "points",
                            "points_storage"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Enumerate polygons using a visitor\n\n        :param int mode: lx.symbol.iMARK_ANY\n        :param lxifc.Visitor visitor: Visitor class instance to use\n        :param monitor: Optional monitor (progress bar) to display\n        ",
                        "name": "enumerate",
                        "parameters": [
                            "self",
                            "mode",
                            "visitor",
                            "monitor"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: returns the wrapped lx.object.Mesh object\n        ",
                        "name": "internalMesh",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Iterate over polygons of a given list of indices.\n\n        Use this if you want to save memory for large meshes.\n\n        :param poly_list: List of point indices to visit\n        :return: Iterable MeshPolygon generator object\n\n        example::\n\n            for polygon in mesh.geometry.polygons.iterByIndices([1,4,2]):\n                print polygon\n\n        ",
                        "name": "iterByIndices",
                        "parameters": [
                            "self",
                            "poly_list",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param string polyType: Value in FACE, CURV, BEZR, SUBD, SPCH, TEXT, PSUB, LINE\n        :returns: Generator object for polygons of specified type\n        ",
                        "name": "iterByType",
                        "parameters": [
                            "self",
                            "polyType",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "This method currently broken, please use iterByType('CURV') instead\n\n        :returns: Iterable for curve polygons ",
                        "name": "iterCurves",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":returns: Iterable for curve polygons ",
                        "name": "iterFaces",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":returns: Iterable for line polygons ",
                        "name": "iterLines",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":returns: Iterable for pixar subdiv polygons ",
                        "name": "iterPixarSubdivs",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":returns: Iterable for spline patch polygons ",
                        "name": "iterSplinePatches",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":returns: Iterable for subdiv polygons ",
                        "name": "iterSubdivs",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": ":returns: Iterable for text polygons ",
                        "name": "iterTexts",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Clockwise for normal forward, anti for backwards\n        ",
                        "name": "new",
                        "parameters": [
                            "self",
                            "vertices",
                            "reversed",
                            "indices",
                            "v",
                            "pa",
                            "ids",
                            "index",
                            "points_storage"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects one or multiple polygons of this mesh\n\n        :param int, list or tuple polygons: index, MeshPolygon, or sequence of indices or MeshPolygon objects. If None, the selection is cleared.\n        :param bool replace: Clears the selection first\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "polygons",
                            "replace",
                            "p",
                            "polygon",
                            "index",
                            "pid"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the selected polygons as tuple\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Class representing a single vertex\n\n    example::\n\n        #Supports operators\n\n        v1 = mesh.geometry.vertices[1]\n        v2 = mesh.geometry.vertices[2]\n\n        v1 += v2\n        v1 = v1 - v2\n\n    ",
                "name": "MeshVertex",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_MeshVertex__performSelectionOp",
                        "parameters": [
                            "self",
                            "operation",
                            "polygon"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared PointAccessor object of the core SDK (lx.object.Point)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this vertex\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Initializes a vertex from a given MeshGeometry object\n\n        :param int or long vertex: The index of the vertex to be obtained. If vertex is of type long,\n        it will be looked up as pointer ID.\n        :type: int\n        :param geometry: The geometry to obtain the vertex from\n        :type: MeshGeometry\n        :return: An instance of MeshVertex\n        ",
                        "name": "fromId",
                        "parameters": [
                            "cls",
                            "id",
                            "geometry",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "getUVs",
                        "parameters": [
                            "self",
                            "uvmap"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the pointer ID of this vertex",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the index of this vertex\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param Vector3 direction: A start vector\n        :param float minAlign: A threshold between -1.0 and 1.0. The smaller the value, the bigger the angle range that is considered.\n        :returns MeshVertex: The vertex closest to the given vector direction\n        ",
                        "name": "nextPointByVector",
                        "parameters": [
                            "self",
                            "direction",
                            "minAlign",
                            "self_pos",
                            "other_vertex",
                            "index",
                            "candidate",
                            "vertex",
                            "vertex_dir",
                            "dotproduct"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the connected polygons",
                        "name": "polygons",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get or set the local position vector as tuple\n\n        :getter: Returns position as a tuple\n        :setter: Takes an Iterable as input to set the position from\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes this vertex from the mesh\n        ",
                        "name": "remove",
                        "parameters": [
                            "self",
                            "accessor",
                            "vid",
                            "edge_selection",
                            "points_storage",
                            "poly_index",
                            "vlist",
                            "vi",
                            "point"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this vertex\n\n        :param MeshPolygon polygon: Selects the vertex specific to this polygon, needed for UV selections\n        :param bool replace: Clears the selection before selecting\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "polygon",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "setUVs",
                        "parameters": [
                            "self",
                            "values",
                            "uvmap"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the connected vertices",
                        "name": "vertices",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the x position\n        :setter: Takes a float value to set the x position from\n        ",
                        "name": "x",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the y position\n        :setter: Takes a float value to set the y position from\n        ",
                        "name": "y",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the z position\n        :setter: Takes a float value to set the z position from\n        ",
                        "name": "z",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Extension class of the point accessor that adds iteration methods.\n\n    The individual vertex objects can be accessed through the built-in iterator function\n    or angular brackets\n\n    example::\n\n        # Get the vertex count\n        print \"Number of vertices: %i\" % len(mesh.geometry.vertices)\n\n        # Access first vertex\n        print mesh.geometry.vertices[0]\n\n        # Iterates all vertices through a generator object\n        for vertex in mesh.geometry.vertices:\n            print vertex\n\n\n    :param mesh: Input mesh to obtain PointAccessor from\n    :param parent: MeshGeometry parent object\n    ",
                "name": "MeshVertices",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "General access for angular brackets\n        ",
                        "name": "_getitem",
                        "parameters": [
                            "self",
                            "index",
                            "cls",
                            "i",
                            "indices"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "\n\n        :param int operation: 0=select(add), 1=select(replace), 2=deselect, 3=clear\n        ",
                        "name": "_vertexSelectionOperation",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Enumerate vertices using a visitor\n\n        :param int mode: lx.symbol.iMARK_ANY\n        :param lxifc.Visitor visitor: Visitor class instance to use\n        :param monitor: Optional monitor (progress bar) to display\n        ",
                        "name": "enumerate",
                        "parameters": [
                            "self",
                            "mode",
                            "visitor",
                            "monitor"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: returns the wrapped lx.object.Mesh object\n        ",
                        "name": "internalMesh",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Iterate over vertices of a given list of point indices.\n\n        :return: Iterable MeshVertices generator object\n        :param vertex_list: List of point indices to visit\n\n        example::\n\n            # Iterate all vertices and move them by 0.1 in x\n            for point in mesh.geometry.vertices.iterByList([1,3,6,7]):\n                pos = list(point.Pos())\n                pos[0] += 0.1\n                point.SetPos(pos)\n\n            # Update to see mesh changes\n            mesh.geometry.setMeshEdits()\n\n        ",
                        "name": "iterByList",
                        "parameters": [
                            "self",
                            "vertex_list",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Adds a new vertex\n\n        :param tuple: Position\n        :returns MeshVertex: New vertex object\n        ",
                        "name": "new",
                        "parameters": [
                            "self",
                            "position",
                            "id",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes a single vertex or a list of vertices\n\n        :param int or list/tuple vertices: Vertices to remove\n        ",
                        "name": "remove",
                        "parameters": [
                            "self",
                            "vertices"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects one or multiple vertices of this mesh\n\n        :param int, list or tuple vertices: index, MeshVertex, or sequence of indices or MeshVertex objects. If None, the selection is cleared.\n        :param bool replace: Clears the selection first\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "vertices",
                            "replace",
                            "v",
                            "vertex",
                            "index",
                            "pid"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the currently selected vertices (tuple)\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "\n    example::\n\n        # Get first morph map if exists\n        for morph in geo.vmaps.morphMaps[:1]:\n\n            # Set position for vertex 10\n            morph[10] = (1,2,3)\n\n        # Update mesh\n        geo.setMeshEdits()\n\n    ",
                "name": "MorphMap",
                "children": [
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: If not None, the vertex of this index is deallocated from the map. Otherwise all values of the map are deallocated.\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "args",
                            "kwargs",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets the absolute position instead of the relative position\n\n        :param int index: Vertex index to read\n        :returns tuple: position values\n        ",
                        "name": "getAbsolutePosition",
                        "parameters": [
                            "self",
                            "index",
                            "point",
                            "pos",
                            "storageBuffer",
                            "result",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets the absolute position instead of the relative position\n\n        :param int index: Vertex index to change\n        :param tuple: xyz values\n        ",
                        "name": "setAbsolutePosition",
                        "parameters": [
                            "self",
                            "index",
                            "value",
                            "point",
                            "pos",
                            "storageBuffer"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Photometric (ies) light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Photometric Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Photometric Light item.\n\n    :param light: Optional Photometric light item object (type lx.symbol.sITYPE_PHOTOMETRYLIGHT)  or string (item\n        name or ID) to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Photometric light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Photometric light item or an item name or ID\n        string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "PhotometricLight",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Point light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Point Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Point Light item.\n\n    :param light: Optional Point light item object (type lx.symbol.sITYPE_POINTLIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Point light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Point light item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "PointLight",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Portal item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Portal' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Portal item.\n\n    :param light: Optional Portal item object (type 'portal')  or string (item name or ID) to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Portal item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Portal item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "Portal",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Minimal quaternion class",
                "name": "Quaternion",
                "children": [
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_Quaternion__dTolerance",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_quaternion_identity",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "This function calculates the length of the quaternion.\n\n        :param Quaternion q:\n        :returns float:\n        ",
                        "name": "_quaternion_length",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "This function normalizes a quaternion, setting the length of the quaternion to 1.0.\n\n        :param Quaternion q:\n        :return:\n        ",
                        "name": "_quaternion_normalize",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a copy of this quaternion object",
                        "name": "copy",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " This function converts a matrix into a quaternion, containing the same rotation.\n\n        :param Matrix3 input:\n        :param Quaternion output:\n        ",
                        "name": "fromMatrix3",
                        "parameters": [
                            "self",
                            "input",
                            "output",
                            "nxt",
                            "i",
                            "j",
                            "k",
                            "tr",
                            "s"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " This function converts a matrix into a quaternion, containing the same rotation.\n\n        :param Matrix4 input:\n        ",
                        "name": "fromMatrix4",
                        "parameters": [
                            "self",
                            "input",
                            "matrix",
                            "quat"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the axis and angle of this quaternion\n\n        :returns tuple: Axis [tuple] and angle [float]\n        ",
                        "name": "getAxisAngle",
                        "parameters": [
                            "self",
                            "q_temp",
                            "q",
                            "omega",
                            "s",
                            "axis",
                            "angle"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the length of this quaternion",
                        "name": "length",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Normalizes the quaternion in place",
                        "name": "normalize",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "This function takes an axis and an angle, and calculates a quaternion that encodes that rotation.\n\n        :param float angle: Angle in radians\n        :param Vector3 axis: Axis\n        ",
                        "name": "setAxisAngle",
                        "parameters": [
                            "self",
                            "axis",
                            "angle",
                            "q",
                            "s"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "This function converts a quaternion into a Matrix3, containing the same rotation.\n\n        :return Matrix3: Result\n        ",
                        "name": "toMatrix3",
                        "parameters": [
                            "self",
                            "input",
                            "output",
                            "norm",
                            "s",
                            "xx",
                            "yy",
                            "zz",
                            "xy",
                            "xz",
                            "yz",
                            "wx",
                            "wy",
                            "wz"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns Matrix4: This quaternion as Matrix4, containing the same rotation\n        ",
                        "name": "toMatrix4",
                        "parameters": [
                            "self",
                            "matrix"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Quick access to the w component of the quaternion",
                        "name": "w",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Quick access to the x component of the quaternion",
                        "name": "x",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Quick access to the y component of the quaternion",
                        "name": "y",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Quick access to the z component of the quaternion",
                        "name": "z",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "RGBAMap",
                "children": [
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: If not None, the vertex of this index is deallocated from the map. Otherwise all values of the map are deallocated.\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "args",
                            "kwargs",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": null,
                "name": "RGBMap",
                "children": [
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: If not None, the vertex of this index is deallocated from the map. Otherwise all values of the map are deallocated.\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "args",
                            "kwargs",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Render pass group\n\n    :param groupItem: either a group item or an item name/ID to look up.\n    :type groupItem: lx.object.item or modo.item.Item\n    :raises TypeError: if the item is not a 'Group\" item.\n    :raises LookupError: if a name or ID is supplied as the groupItem argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "RenderPassGroup",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a channel to the group.\n        The supplied channel argument be a modo.channel.Channel() object, in which case no item argument is required or a channel\n        name (string) or index (int), both of which require an additional 'item' argument.\n\n        :param channel: the channel to add.\n        :type channel: modo.channel.Channel() object, int or basestring\n        :param item: the item to which the channel belongs. Not required if a Channel() object is provided as the\n            first argument.\n        :type item: modo.item.Item\n\n        ",
                        "name": "addChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add one or more items to the group if they're not already members.\n\n        :param items: the item or items to add\n        :type items: modo.item.Item or list of modo.item.Item objects\n\n        ",
                        "name": "addItems",
                        "parameters": [
                            "self",
                            "items",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a render pass item to the group.\n\n        :param name: optional name for the render pass\n        :type name: basestring\n        :return: the render pass item.\n        :rtype: modo.item.ActionClip\n\n        ",
                        "name": "addPass",
                        "parameters": [
                            "self",
                            "name",
                            "rpass"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets the item at the specified index.\n\n        :returns: item at the specified index.\n        :rtype: modo.item.Item\n        :param index: index of the item in the group's list of items.\n        :type index: int\n\n        ",
                        "name": "getItemAt",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Index of the item within the groups list of items.\n\n        :return: item index in the group.\n        :rtype: int\n\n        ",
                        "name": "getItemIndex",
                        "parameters": [
                            "self",
                            "item",
                            "x",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The number of channels in the group.\n\n        :getter: Returns the number of channels in the group.\n        :rtype: int\n\n        ",
                        "name": "groupChannelCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "returns a list of all the channels in the group.\n        Each element of the list will be an modo.channel.Channel\n\n        :getter: Returns a list of channels.\n        :rtype: list of modo.channel.Channel items\n\n        ",
                        "name": "groupChannels",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Gets the channel at the specified index.\n\n        :returns: the channel at the specified index.\n        :rtype: modo.channel.Channel\n        :param index: index of the channel in the group's list of channels.\n        :type index: int\n\n        ",
                        "name": "groupGetChannelAt",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel",
                            "func"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the channel at the specified index from the group's list of channels.\n\n        :param index: index of the channel in the group's list of channels.\n        :type index: int\n\n        ",
                        "name": "groupRemoveChannelAt",
                        "parameters": [
                            "self",
                            "index",
                            "item",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Check to see if the specified channel is a member of the group.\n        The supplied channel argument be a :class:`modo.channel.Channel` object, in which case no item argument\n        is required, a channel name (string) or index (int), both of which require an additional 'item' argument.\n\n        :param chan: the channel to check\n        :type chan: modo.channel.Channel, int or basestring\n        :param item: the item to which the channel belongs. Not required if a Channel() object is provided as the\n            first argument.\n        :type item: modo.item.Item\n        :returns: True if the channel is in the group, False if not.\n        :rtype: bool\n        ",
                        "name": "hasChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item",
                            "x",
                            "group",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :param item:\n        :type item:\n        :returns: True if the item is in the group, False if not.\n        :rtype: bool\n        ",
                        "name": "hasItem",
                        "parameters": [
                            "self",
                            "item",
                            "connection",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The number of items in the group\n\n        :getter: Returns the number of items\n        :rtype: int\n\n        ",
                        "name": "itemCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get a list of the items in the group.\n\n        :returns: the items in the group.\n        :rtype: list\n\n        ",
                        "name": "items",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a lst of render passes in the group.\n\n        :returns: list of render pass items\n        :rtype: list of modo.item.ActionClip\n\n        ",
                        "name": "passes",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Remove a channel from the group.\n        The supplied channel argument can either be a channel name (string) or index (int).\n\n        :param item: the item to which the channel belongs.\n        :type item: modo.item.Item\n        :param channel: the channel to remove.\n        :type channel: int or basestring\n\n        ",
                        "name": "removeChannel",
                        "parameters": [
                            "self",
                            "chan",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Removes the item at the specified index from the group's list of items.\n\n        :param index: index of the item in the group's list of items.\n        :type index: int\n\n        ",
                        "name": "removeItemAt",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Remove one or more items from the group, if they exis.\n\n        :param items: the item or items to remove.\n        :type items: modo.item.Item or list of modo.item.Item objects\n\n        ",
                        "name": "removeItems",
                        "parameters": [
                            "self",
                            "items",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set's the index for the specified item in the list of items within the group.\n\n        :param item: the item to move\n        :type item: modo.item.Item\n        :param index: the index in the list of items belonging to the group to move the item to.\n        :type index: int\n        :raises ValueError: if index is less than zero.\n\n        ",
                        "name": "setItemIndex",
                        "parameters": [
                            "self",
                            "item",
                            "index",
                            "x",
                            "groupItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get or set the group type.\n        If the group is a general group it has no type so returns None.\n\n        :getter: Returns the type of the group.\n        :rtype: basestring or None\n        :raises ValueError: if the supplied argument isn't one of the default group type strings.\n\n        :setter: Sets the group type\n        :param gtype: either one of the available group types - 'assembly', 'actor', 'render', 'keyset', 'chanset',\n            'preset', 'shader' to define the group as one of the built in types or any other string to define the\n            group as a custom type of your own.\n        :type gtype: basestring\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "The main scene class.\n\n    Takes an optional lx.object.Scene object as an argument. If none is provided (the default) then the currently\n    selected scene is used which will mostly be the general case. The module function :func:`sceneList` makes use of\n    the scene parameter to return a list of open scenes as modo.scene.Scene objects.\n\n    :param scene: Optional scene object to wrap.\n    :type scene: lx.object.Scene\n\n    ",
                "name": "Scene",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_Scene__ItemAdd",
                        "parameters": [
                            "self",
                            "groupType",
                            "item_"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_Scene__setupTextureLayerType",
                        "parameters": [
                            "self",
                            "newItem",
                            "render",
                            "index",
                            "defaultShader"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get all items of a scene\n        ",
                        "name": "_allItems",
                        "parameters": [
                            "self",
                            "types",
                            "i",
                            "item_types",
                            "idents",
                            "item_count",
                            "item",
                            "ident"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a list of all actors in the scene\n\n        :getter: Returns a list of Actor objects found in this scene\n        :rtype: list\n\n        ",
                        "name": "actors",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a new actor to the scene\n\n        :returns modo.item.Actor: Actor item object\n        :param basestring name: optional name\n        :param list items: list of items for the actor to contain\n\n        ",
                        "name": "addActor",
                        "parameters": [
                            "self",
                            "name",
                            "items",
                            "makeActive",
                            "group"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a new camera item to the scene\n\n        :returns: camera item\n        :rtype: modo.item.Camera\n        :param name: optional name for the camera.\n        :type name: basestring\n\n        ",
                        "name": "addCamera",
                        "parameters": [
                            "self",
                            "name",
                            "camera"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a new group item to the scene\n\n        :returns: group item\n        :rtype: modo.item.Group\n        :param name: optional name for the group item.\n        :type name: basestring\n        :param gtype: optional group type, can be one of the default group types ('assembly', 'actor', 'render',\n            'keyset', 'chanset', 'preset', 'shader') or any other string to create a custom group type. Default is an\n            empty string which creates a 'Genera' group type.\n        :type gtype: basestring\n\n        ",
                        "name": "addGroup",
                        "parameters": [
                            "self",
                            "name",
                            "gtype",
                            "grp"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a new item to the scene\n\n        :returns: item\n        :rtype: modo.item.item\n        :param itype: item type\n        :type itype: modo.Constant\n        :param name: optional name for the item.\n        :type name: basestring\n        :raises TypeError: When failing\n\n        ",
                        "name": "addItem",
                        "parameters": [
                            "self",
                            "itype",
                            "name",
                            "func",
                            "newitem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Adds a new joint to the scene\n\n        ",
                        "name": "addJointLocator",
                        "parameters": [
                            "self",
                            "name",
                            "parent",
                            "channelValues",
                            "joint"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Adds a new material to the scene\n\n        :param modo.c.MATERIAL_* matType: Type of material to create\n        :param name: Optional name for the material\n        :returns Item: The material item\n        ",
                        "name": "addMaterial",
                        "parameters": [
                            "self",
                            "matType",
                            "name",
                            "index",
                            "render",
                            "material"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a new mesh item to the scene\n\n        :returns: mesh item\n        :rtype: modo.item.Mesh\n        :param name: optional name for the mesh.\n        :type name: basestring\n\n        ",
                        "name": "addMesh",
                        "parameters": [
                            "self",
                            "name",
                            "mesh"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Add a render pass group to the scene\n\n        :returns: render pass group.\n        :rtype: modo.item.RenderPassGroup\n        :param name: optional name for the render pass group.\n        :type name: basestring\n\n        ",
                        "name": "addRenderPassGroup",
                        "parameters": [
                            "self",
                            "name",
                            "grp"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a camera item in the scene.\n        The supplied argument can be either a string (camera ID or name) or an integer\n        (camera index in the scene's collection of cameras)\n\n        :param cam: the camera\n        :type cam: basestring or int\n        :returns: camera item\n        :rtype: modo.item.Camera\n\n        ",
                        "name": "camera",
                        "parameters": [
                            "self",
                            "cam"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Number of cameras in the scene.\n\n        :getter: Returns the number of camera items.\n        :rtype: int\n\n        ",
                        "name": "cameraCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a list of all the camera items in the scene as modo.item.Camera objects.\n\n        :getter: Returns a list of the camera items in the scene.\n        :rtype: list of modo.item.Camera\n\n        ",
                        "name": "cameras",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Set or read the current frame range\n        start and end frame value should be passed in as a tuple.\n\n        :setter: Sets the range\n        :param frange: frame range - a tuple of ints (start, end).\n        :type frange: tuple\n\n        :Getter: Returns the start and end frames.\n        :rtype: tuple\n        :exception ValueError: if supplied start frame is higher than end frame.\n\n        ",
                        "name": "currentRange",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "deformers",
                        "parameters": [
                            "self",
                            "result",
                            "dvc",
                            "item_"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselect an item.\n\n        :param itemObj: the item to deselect. Clears the entire selection if None\n        :type itemObj: basestring (item name or ID) or instance of either lx.object.Item or modo.item.Item\n\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "itemObj",
                            "seltype",
                            "spkttype",
                            "sptrans",
                            "spacket"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Creates and returns a duplicate of the passed item\n\n        :returns item: Item\n        ",
                        "name": "duplicateItem",
                        "parameters": [
                            "self",
                            "item",
                            "instance",
                            "duplicate"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "File path of the scene.\n\n        :getter: Returns the file path of the scene or 'None' if not yet saved.\n        :rtype: basestring or None\n\n        ",
                        "name": "filename",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Scene frames per second.\n\n        .. note::\n            There is no way to set the fps value from the Python API for any scene other than the currently selected\n            one. Therefore, for any other scene the property will be read only and attempts to write to it will throw\n            an AttributeError.\n\n        |\n\n        :getter: Returns the Frames Per Second\n        :rtype: float\n\n        :setter: Sets the Frames Per Second\n        :param fps: Scene frames per second.\n        :type fps: float\n        :raises: AttributeError\n\n        ",
                        "name": "fps",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a list of all the group items in the scene as modo.item.Group objects.\n\n        :getter: Returns a list of the group items in the scene.\n        :rtype: list of modo.item.Group\n\n        ",
                        "name": "groups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Look up item by name\n\n        :param string item: Name to look for\n        :returns item: Found item\n        ",
                        "name": "item",
                        "parameters": [
                            "self",
                            "name",
                            "item_"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "The number of items of a specified type in the scene.\n\n        :param itype: type of the items.\n        :type itype: int or basestring\n        :returns: the number of items of the specified type in the scene.\n        :rtype: int\n        ",
                        "name": "itemCount",
                        "parameters": [
                            "self",
                            "itype"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "List of items of the specified type in the scene.\n\n        :param itype: the item type.\n        :type itype:\n        :param basestring name: Optionally filter result by this text. Can use * and ? wildcards for globbing.\n        :param bool superType: If True, all items that have 'itype' as superType are listed. Else, only items of specifically that type are returned.\n        :returns: list of the items of the specified type in the scene. If itype is None, all items in the scene are returned.\n        :rtype: list\n        ",
                        "name": "items",
                        "parameters": [
                            "self",
                            "itype",
                            "name",
                            "superType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Same as items(), but returns a generator object.\n\n        ",
                        "name": "iterItems",
                        "parameters": [
                            "self",
                            "itype",
                            "name",
                            "superType",
                            "namefilter_func",
                            "item_",
                            "obj",
                            "typefilter",
                            "result",
                            "it"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Number of lights in the scene.\n\n        :getter: Returns the number of light items.\n        :rtype: int\n\n        ",
                        "name": "lightCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "locators",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Number of mesh items in the scene.\n\n        :getter: Returns the number of mesh items.\n        :rtype: int\n\n        ",
                        "name": "meshCount",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a list of all the mesh items in the scene as modo.item.Mesh objects.\n\n        :getter: Returns a list of the mesh items in the scene.\n        :rtype: list of modo.item.Mesh\n\n        ",
                        "name": "meshes",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Friendly name of the scene.\n\n        :getter: Returns the name of the scene.\n        :rtype: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :param Item: Item to remove from the scene\n        :param bool children: If True, all found children are deleted also\n        ",
                        "name": "removeItems",
                        "parameters": [
                            "self",
                            "itm",
                            "children",
                            "i",
                            "queue",
                            "items",
                            "a",
                            "it"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Get & set the scene's current render camera\n\n        :setter: Set the scene's current render camera\n        :param camera: the camera item to set as the current render camera.\n        :type camera: lx.object.Item of type 'Camera'\n\n        :getter: Returns the current render camera.\n        :rtype: modo.Item.Camera\n        ",
                        "name": "renderCamera",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the first found render item of the scene\n        :rtype: Item\n        ",
                        "name": "renderItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Returns a list of all the render pass group items in the scene as modo.item.RenderPassGroup objects.\n\n        :getter: Returns a list of the render pass group items in the scene.\n        :rtype: list of modo.item.Group\n\n        ",
                        "name": "renderPassGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The scene's 'scene item'\n\n        :getter: Returns the scene's scene item.\n        :rtype: lxdt.item.Item (type lx.symbol.sITYPE_SCENE)\n        ",
                        "name": "sceneItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Set or read the scene's frame range\n        start and end frame value should be passed in as a tuple.\n\n        :setter: Sets the range\n        :param frange: frame range - a tuple of ints (start, end).\n        :type frange: tuple\n\n        :getter: Returns the start and end frames.\n        :rtype: tuple\n        :exception ValueError: if supplied start frame is higher than end frame.\n\n        ",
                        "name": "sceneRange",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param itemObj: the item to select.\n        :type item: basestring (item name or ID) or instance of either lx.object.Item or modo.item.Item\n        :param add: whether to add to the current selection, False replaces the current selection.\n        :type add: bool\n\n        Note::\n\n            To clear the selection of the scene, please use deselect() instead.\n\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "itemObj",
                            "add",
                            "it"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Selected items in the scene.\n\n        :getter: Returns the selected items\n        :rtype: list\n\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the selected items of a specific type as modo.item.Item objects.\n\n        :param itype: item type to filter on.\n        :type itype: int or string\n        :return: selcted items of specified type.\n        :param bool superType: If True, all items derived fom itype are listed. Otherwise only items of the exact type of itype.\n        :rtype: list of modo.item.Item\n\n        ",
                        "name": "selectedByType",
                        "parameters": [
                            "self",
                            "itype",
                            "superType",
                            "typefunc",
                            "filter_func",
                            "items",
                            "selected"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Spotlight item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Spotlight' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Spotlight item.\n\n    :param light: Optional Spotlight item object (type lx.symbol.sITYPE_SPOTLIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Spotlight item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Spotlight item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "SpotLight",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "The light material item associated with this light\n\n        :type material: modo.item.LightMaterial\n        :getter: the base light material (ie the light material at the bottom of the stack if there are more than one)\n            for the light item.\n        :rtype: modo.item.LightMaterial\n\n        :setter: Parents a material to the light\n        :param material: a material item to parent to the light\n\n        ",
                        "name": "material",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Texture locator item class.\n\n    Takes an optional 'texloc' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Texture locator' or an item name or ID to look up. If no texloc item is supplied as an argument an attempt will be\n    made to wrap the most recently selected group locator item.\n\n    :param texloc: Optional texture locator item object (type lx.symbol.sITYPE_TEXTURELOC) or string (item name or ID)\n        to look up.\n    :type texloc: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid texture locator item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'texture\n        locator' or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the texloc argument but no item with that name/ID can\n        be found.\n\n    ",
                "name": "TextureLocator",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Contains a group of animatable transform channels of a locator object.\n\n    It has convenience functions for access of the locator's position, rotation and scale.\n\n    examples::\n\n        # We retrieve two meshes from the current scene by name, assuming they exist\n        cube = modo.Mesh('Cube')\n        sphere = modo.Mesh('Sphere')\n\n        # Set rotation values\n        cube.rotation.set(10, 20, 30, degrees=True)\n\n        # Link the position.x channel of the sphere to to the position.x channel of the cube\n        cube.position.y.setLink(0, sphere.position.x, 0)\n\n        # Set position values to zero\n        cube.position.clear()\n\n        # Insert keyframe for rotation on frame 21\n        frame = lx.service.Value().FrameToTime(21)\n        cube.rotation.insertKey(time=frame)\n\n    ",
                "name": "TransformItem",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "_TransformItem__rotationType",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "_TransformItem__scaleType",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Utility function to consume and process the 'degrees' argument for the set function\n        ",
                        "name": "_TransformItem__toDegrees",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function that returns the corresponding string value from __types, for later channel lookup\n        ",
                        "name": "_TransformItem__transformType",
                        "parameters": [
                            "self",
                            "transform_str",
                            "transformType",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "_TransformItem__translationType",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "dict",
                        "docstring": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
                        "name": "_TransformItem__types",
                        "children": [
                            "clear",
                            "copy",
                            "fromkeys",
                            "get",
                            "has_key",
                            "items",
                            "iteritems",
                            "iterkeys",
                            "itervalues",
                            "keys",
                            "pop",
                            "popitem",
                            "setdefault",
                            "update",
                            "values",
                            "viewitems",
                            "viewkeys",
                            "viewvalues"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets values to 1.0 if is a scaling transform and to 0.0 otherwise\n\n        :param arguments: Same as :meth:`Channel.set<modo.channel.Channel.set>`\n\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "args",
                            "kwargs"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Function to get the x, y and z-values of the locator at once.\n\n        :param bool degrees: If set, values are interpreted as degrees instead of radians. Only relevant when getting rotation.\n        :param keywords: Same as as :meth:`Channel.get<modo.channel.Channel.get>`\n        :returns tuple: x, y and z values\n\n        ",
                        "name": "get",
                        "parameters": [
                            "self",
                            "time",
                            "action",
                            "degrees",
                            "kwargs",
                            "asDegrees",
                            "transform_str",
                            "out",
                            "i",
                            "axis",
                            "math"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Inserts a keyframe on the respective x, y and z channels.\n\n        :param float time: Time in seconds to create the new keys\n        :param action: Action to create keys in.\n        ",
                        "name": "insertKey",
                        "parameters": [
                            "self",
                            "time",
                            "action",
                            "kwargs",
                            "channel",
                            "value"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        ",
                        "name": "removeKey",
                        "parameters": [
                            "self",
                            "time",
                            "action",
                            "channel",
                            "keys",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Function to set the x, y and z-values of the locator at once.\n\n        :param values: either three floats, or a list/tuple containing the x, y, z values to set\n        :param bool degrees: If set, values are interpreted as degrees instead of radians. Only relevant when setting rotation.\n        :param keywords: Same as as :meth:`Channel.set<modo.channel.Channel.set>`\n\n        ",
                        "name": "set",
                        "parameters": [
                            "self",
                            "values",
                            "time",
                            "key",
                            "action",
                            "degrees",
                            "kwargs",
                            "x",
                            "y",
                            "z",
                            "axis",
                            "value"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Shortcut to the x channel of the locator\n\n        :getter: :class:`Channel<modo.channel.Channel>`\n        :rtype: float\n        ",
                        "name": "x",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Shortcut to the y channel of the locator\n\n        :getter: :class:`Channel<modo.channel.Channel>`\n        :rtype: float\n        ",
                        "name": "y",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Shortcut to the z channel of the locator\n\n        :getter: :class:`Channel<modo.channel.Channel>`\n        :rtype: float\n        ",
                        "name": "z",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Container class for the stacked transform items of a Locator object.\n\n    Transform items contain channels for either position, rotation or scale.\n    The order of how they are processed can be changed and new transform items can be inserted or existing ones deleted.\n\n    example::\n\n        scene = modo.scene.current()\n\n        # Grab first selected object\n        for item in scene.selected[:1]:\n\n            # Print the amount of transform items\n            print len(item.transforms)\n\n            # Add a new position transform item\n            position = item.transforms.insert('position', values=(1,0,0), name='New_Position')\n\n            # Add a new scale transform item\n            scale = item.transforms.insert('scale', values=(2,2,2), name='Scaled')\n\n            # Swap the indices of the first two transform items\n            item.transforms.reposition(0,1)\n\n            # Delete\n            item.transforms.delete(scale)\n\n            # Clear values of all transforms\n            for i in item.transforms:\n                i.clear()\n\n    ",
                "name": "TransformItems",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :returns list: list of all descendant children\n        ",
                        "name": "_Item__descendants",
                        "parameters": [
                            "self",
                            "itemType",
                            "queue",
                            "items",
                            "a",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Utility function to get an 'internal' position, rotation or scale transform item\n        ",
                        "name": "_LocatorSuperType__getTransformitem",
                        "parameters": [
                            "self",
                            "symbol",
                            "xfrm"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Note: ignores non-numerical and non-string types\n\n        This method is marked as private because it is likely to be moved somewhere else\n\n        :arg list chNames: Optional list of channel names to receive. If None, all channels are retrieved.\n        :arg float time: Time to get the values at. Default to the current time if None\n        :arg string action: Action to get the values from (optional)\n        :returns dict: A dictionary containing the values\n        ",
                        "name": "_getChannelValuesAsDict",
                        "parameters": [
                            "self",
                            "chNames",
                            "time",
                            "action",
                            "kwargs",
                            "result",
                            "chName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_item",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Set channel values from a provided dictionary\n\n        This method is marked as private because it is likely to be moved somewhere else\n        ",
                        "name": "_setChannelValuesFromDict",
                        "parameters": [
                            "self",
                            "pairs",
                            "time",
                            "key",
                            "action",
                            "kwargs",
                            "name",
                            "value",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's base name.\n\n        :return: item's base name before disambiguation.\n        :rtype: basestring\n\n        ",
                        "name": "baseName",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a channel object for the channel name provided.\n\n        :param channelName: name of the channel.\n        :type channelName: basestring\n        :returns: a channel object for the specified channel\n        :rtype: modo.channel.Channel.\n        :raises LookupError: if the channel can not be found\n\n        ",
                        "name": "channel",
                        "parameters": [
                            "self",
                            "channelName",
                            "channel"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a list of all the names of the channels belonging to an object.\n\n        :returns: list of channel names.\n        :rtype: list\n\n        ",
                        "name": "channelNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "channels",
                        "parameters": [
                            "self",
                            "name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the child item at the specified index.\n\n        :param index: the child's index.\n        :type index: int\n        :returns: the child item at the specified index.\n        :rtype: an instance of one of the defined modo.Item subtypes or an modo.Item\n\n        ",
                        "name": "childAtIndex",
                        "parameters": [
                            "self",
                            "index",
                            "child"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "returns the number of children an item has.\n\n        :returns: the number of child items the item has.\n        :rtype: int\n\n        ",
                        "name": "childCount",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a list of the child items of this item. Each type of each of the returned child items\n        will be one of the item types supported by the :meth:`modo.util.typeToFunc` method if\n        possible, or an object of type lx.item.Item otherwise.\n\n        :param bool recursive: Returns all childen's children if True.\n        :returns: the children of the item.\n        :rtype: list\n\n        ",
                        "name": "children",
                        "parameters": [
                            "self",
                            "recursive",
                            "itemType",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns all the children of an item that are of the specified type.\n\n        :param itype: the type of the children to return\n        :type itype: int or basestring\n        :returns: list of all the children of the specified type.\n        :rtype: list\n\n        ",
                        "name": "childrenByType",
                        "parameters": [
                            "self",
                            "itype",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns a tuple of all Group objects that this item belongs to\n        :rtype: tuple\n        ",
                        "name": "connectedGroups",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns input connections of the 'deformers' graph\n\n        :param basestring dtype: Optionally filter the result by this type.\n        :returns tuple: Deformer items\n        ",
                        "name": "deformers",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "delete",
                        "parameters": [
                            "self",
                            "index",
                            "idNames",
                            "names",
                            "locator",
                            "xfrm",
                            "scene"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Deselects this item\n        ",
                        "name": "deselect",
                        "parameters": [
                            "self",
                            "sv",
                            "spTrans",
                            "spType",
                            "pkt"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Get the string tags attached to an item.\n\n        if 'values' is True (default) a dictionary of tag name/tag value pairs is returned,\n        if 'values' is False a list of tag names is returned instead.\n\n        :returns: the string tags attached to the item.\n        :rtype: dictionary or list.\n\n        ",
                        "name": "getTags",
                        "parameters": [
                            "self",
                            "values",
                            "tags",
                            "tag",
                            "x",
                            "tagID",
                            "tagData",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns whether the tag with the specified name exists or not.\n\n        :param tagName: the four character tag ID\n        :type tagName: basestring\n        :returns: True if the specified tag exists on the group, False if not.\n        :rtype: bool\n\n        ",
                        "name": "hasTag",
                        "parameters": [
                            "self",
                            "tagName"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's unique ID (Ident)\n\n        :return: ID\n        :rtype: basestring\n\n        ",
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "idNames",
                        "parameters": [
                            "self",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Index of the item in the collection of items of the same type in the scene.\n\n        :return: Returns item index by type.\n        :rtype: int\n\n        ",
                        "name": "index",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Insert a new transform item into the transform chain.\n\n        The 'prepend' and 'append' placement values place the new item at the top or bottom of the stack,\n        where 'pre' and 'post' place it around the respective transform highlighted in black in the channel view.\n\n        I am myself confused about the order though, is it bottom to top or the other way around?\n\n        Note that modo always keeps at least one of each type of transform, so when you attempt to delete it\n        a new one is created automatically.\n\n        :param string xfrmType: 'position', 'rotation' or 'scale'\n        :param string placement: 'prepend', 'append', 'pre' or 'post'\n        :param tuple values: Initial xyz values to be optionally set\n        :param string name: Optional name\n\n        ",
                        "name": "insert",
                        "parameters": [
                            "self",
                            "xfrmType",
                            "placement",
                            "values",
                            "name",
                            "funcs",
                            "types",
                            "func_",
                            "type_",
                            "writer",
                            "item_",
                            "index",
                            "outItem"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the internal Modo item embedded in this object",
                        "name": "internalItem",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if item is an instance of another item, False otherwise.\n        :rtype: bool\n        ",
                        "name": "isAnInstance",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns bool: whether this item derives from the locator type.\n        ",
                        "name": "isLocatorSuperType",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Retrieve ItemGraph by name\n\n        :returns ItemGraph:\n        ",
                        "name": "itemGraph",
                        "parameters": [
                            "self",
                            "graphType"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Get connected ItemGraph names\n\n        :returns list of strings: List of connected graph types\n        :type: list\n        ",
                        "name": "itemGraphNames",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of connected ItemGraphs\n        :rtype: list\n        ",
                        "name": "itemGraphs",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a generator object for iterating all channels of this item\n\n        :returns generator object: iterable of channel objects\n        ",
                        "name": "iterChannels",
                        "parameters": [
                            "self",
                            "name",
                            "name_filter",
                            "ch_name"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item's name.\n\n        :return: Item's unique (disambiguated) name\n        :rtype: string\n        :param name: Item's base name - before disambiguation.\n        :type: basestring\n\n        ",
                        "name": "name",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "names",
                        "parameters": [
                            "self",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n\n        :returns list: Package names that are attached to this item\n        ",
                        "name": "packageNames",
                        "parameters": [
                            "self",
                            "hst_svc",
                            "all_packages",
                            "contains_packages",
                            "i",
                            "factory",
                            "package"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Item parent\n\n        When setting accepts either an item object (modo.Item or lx.object.Item) or a string (item ID or name).\n\n        :return: parent item or None if the item has no parent\n        :rtype: modo.item.Item\n        :param parent: item to parent to\n        :type parent: basestring, modo.Item or lx.object.Item\n        :raises LookupError: if the argument was a string and no item with that name or id can be found.\n\n        ",
                        "name": "parent",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the index of this item from from the perspective of it's parent\n\n        This correlates to the order items appear in the UI, i.e. the item view and Shader Tree\n\n        :returns int: Index\n        ",
                        "name": "parentIndex",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns list of all ancestor parents\n        :rtype: tuple\n        ",
                        "name": "parents",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "pivot",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a position TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "position",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Get the value of a string tag attached to the item.\n\n            :param tagName: the four character tag ID.\n            :type tagName: basestring\n            :returns: the value of the specified tag.\n            :rtype: string\n\n        ",
                        "name": "readTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Places a transform item to the provided index of the transform item stack\n\n        :param int indexFrom: Source Index of the item that is to be moved\n        :param int indexTo: Destination index to place item at\n        ",
                        "name": "reposition",
                        "parameters": [
                            "self",
                            "indexFrom",
                            "indexTo",
                            "item"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returnsa rotation TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "rotation",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns a scale TransformItem object. An appropriate channel is created if it does not exist.\n        :rtype: :class:`TransformItem`\n        ",
                        "name": "scale",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "scene",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Selects this item\n\n        :param bool replace: If True, the selection is cleared before selecting this item\n        ",
                        "name": "select",
                        "parameters": [
                            "self",
                            "replace"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns True if this item is selected, False otherwise\n        :type: bool\n        ",
                        "name": "selected",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Parents this item to another\n\n        :param modo.item.Item newParent: Item to parent to. If None, the item is parented to root level.\n        :param int index: Optionally sets the position the item appears in the item view for locatorSuperType items\n\n        Note that this method does not preserve world transformations as in parenting in place.\n        Please use the command 'item.parent' instead\n        ",
                        "name": "setParent",
                        "parameters": [
                            "self",
                            "newParent",
                            "index",
                            "shaderFolderType",
                            "cueTag",
                            "graph",
                            "current_parent"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": " Create or set a string tag on to the item.\n\n        :param tagName: the four character tagID.\n        :type tagName: basestring\n        :param tagval: The string value to be stored under the tag.\n        :type tagval: basestring\n\n        ",
                        "name": "setTag",
                        "parameters": [
                            "self",
                            "tagName",
                            "tagval",
                            "tagID",
                            "tag"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the parent type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n        ",
                        "name": "superType",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n\n        :getter: Access to the stacked transform items.\n        :rtype: :class:`TransformItems`\n        ",
                        "name": "transforms",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": ":getter: Returns the type of the item as a string.\n\n        :return: the type of the item.\n        :rtype: basestring\n\n        ",
                        "name": "type",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Access for UV-Map values\n    ",
                "name": "UVMap",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Get the u and v value from a point\n\n        A vertexuv pair is continuous if it's uv values are shared by multiple polygons.\n\n        :param int point_index: Index of the vertex to get the uv value from\n        :param bool listContinuous: Skips vertices with continuous uvs if False.\n        :param bool listNonContinuous: Skips vertices with non-continuous uvs if False.\n        :returns: A tuple containing the u and v values\n        ",
                        "name": "_UVMap__get",
                        "parameters": [
                            "self",
                            "point_index",
                            "listContinuous",
                            "listNonContinuous",
                            "datatype",
                            "datasize",
                            "storageBuffer",
                            "point",
                            "poly",
                            "point_uvs",
                            "polygon_indices",
                            "polygons",
                            "polygon_index",
                            "ID",
                            "isContinuous"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets UV values for this vertex.\n\n        :param int vertexIndex: Index of vertex to change the UV values for\n        :param tuple values: The u and v values to set (pair consisting of of 2 floats)\n        :param bool nonContinuous: If True, the values are applied to all non-continuous occurrences on polygons found for this vertex.\n        If False, Nothing happens when the vertex has non-continuous UVs.\n        ",
                        "name": "_setValue",
                        "parameters": [
                            "self",
                            "vertexIndex",
                            "values",
                            "nonContinuous",
                            "datatype",
                            "datasize",
                            "storageBuffer",
                            "point",
                            "num_polys",
                            "polygon",
                            "polygon_index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: If not None, the vertex of this index is deallocated from the map. Otherwise all values of the map are deallocated.\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "continuousVertices",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "disContinuousVertices",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "args",
                            "kwargs",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "iterContinuousVertices",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "iterDisContinuousVertices",
                        "parameters": [
                            "self",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Vector3 class\n    ",
                "name": "Vector3",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the angle between this and another vector",
                        "name": "angle",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "copy",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a new vector with the result of crossing this vector with another",
                        "name": "cross",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the distance between this and another point",
                        "name": "distanceBetweenPoints",
                        "parameters": [
                            "self",
                            "other",
                            "tmp"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "dot",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns if this vector is equivalent to another vector",
                        "name": "equals",
                        "parameters": [
                            "self",
                            "other",
                            "tolerance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns the length of this vector",
                        "name": "length",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Transform this point's position by a Matrix4 in place.\n\n        :param Matrix4 other: Other Matrix\n        ",
                        "name": "mulByMatrixAsPoint",
                        "parameters": [
                            "self",
                            "other",
                            "result"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Returns a normalized copy of this vector",
                        "name": "normal",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Normalizes this vector in place",
                        "name": "normalize",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "rotate",
                        "parameters": [
                            "self",
                            "other"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Rotates this vector by a given axis and angle\n\n        :param Vector3 axis: This axis to rotate about\n        :param float angle: The angle in radians to rotate by\n        ",
                        "name": "rotateByAxisAngle",
                        "parameters": [
                            "self",
                            "axis",
                            "angle",
                            "quat",
                            "result"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Rotate this vector by a quaternion",
                        "name": "rotateByQuat",
                        "parameters": [
                            "self",
                            "other",
                            "matrix",
                            "i"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "Sets the length of this vector",
                        "name": "setLength",
                        "parameters": [
                            "self",
                            "value",
                            "tmp"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Quick access to the x component of the vector",
                        "name": "x",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Quick access to the y component of the vector",
                        "name": "y",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "Quick access to the z component of the vector",
                        "name": "z",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "A class representing a vertex map, accessible by point indices through angular brackets.\n\n    Base class for other maps.\n\n    ",
                "name": "VertexMap",
                "children": [
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: If not None, the vertex of this index is deallocated from the map. Otherwise all values of the map are deallocated.\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "geometry",
                            "accessor",
                            "ID",
                            "map_type",
                            "name",
                            "kwargs",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Vertex Normal Map class\n\n    * Available from Modo 901 SP1 and upwards *\n\n    Allows manipulation of a vertex normal map on either vertex or polygon basis.\n\n    Example::\n\n        import modo\n        reload(modo)\n\n        # Create a subdivided cube\n        lx.eval('script.implicit {Unit Cube Item}')\n        lx.eval('poly.subdivide ccsds')\n\n        mesh = modo.Mesh('Cube')\n\n        # Create a vertex normal map\n        normals = mesh.geometry.vmaps.addVertexNormalMap()\n\n        normalValue = (0, 0, -1)\n\n        # Set the normal value on every vertex per polygon\n        for polygon in mesh.geometry.polygons:\n            for vert in polygon.vertices:\n                normals.setNormal( normalValue, vert, polygon)\n\n        # Update the mesh\n        mesh.geometry.setMeshEdits(lx.symbol.f_MESHEDIT_MAP_OTHER)\n\n        # Select the vertex normal map to see the effect\n        lx.eval('select.vertexMap \"%s\" norm replace' % normals.name)\n\n    ",
                "name": "VertexNormalMap",
                "children": [
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: If not None, the vertex of this index is deallocated from the map. Otherwise all values of the map are deallocated.\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "args",
                            "kwargs",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "getNormal",
                        "parameters": [
                            "self",
                            "vertex",
                            "polygon",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "setNormal",
                        "parameters": [
                            "self",
                            "values",
                            "vertex",
                            "polygon",
                            "normalize",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    }
                ]
            },
            {
                "type": "type",
                "docstring": "Provides access to weight map values.\n\n    example::\n\n        scene = modo.scene.current()\n\n        # Get the first selected Mesh\n        mesh = scene.selectedByType(\"mesh\")[0]\n\n        # Get the weight maps object\n        vmaps = mesh.geometry.vmaps.weight_maps\n\n        if vmaps:\n\n            # Get the first weight map found\n            weightMap = vmaps[0]\n\n            # Set and get values\n            weightMap[0] = 0.333\n            print weightMap[0]\n\n            # Iterate and print all weight values\n            if weightMap:\n                for index, weight in enumerate(weightMap):\n                    print index, weight\n\n    ",
                "name": "WeightMap",
                "children": [
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "_WeightMap__null",
                        "parameters": [
                            "self"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "_accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": "\n        :getter: Returns the internal shared MeshMapAccessor object of the core SDK (lx.object.MeshMap)\n        ",
                        "name": "accessor",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": "\n        :param int index: If not None, the vertex of this index is deallocated from the map. Otherwise all values of the map are deallocated.\n        ",
                        "name": "clear",
                        "parameters": [
                            "self",
                            "index"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "instancemethod",
                        "docstring": null,
                        "name": "fromMesh",
                        "parameters": [
                            "cls",
                            "geometry",
                            "accessor",
                            "ID",
                            "map_type",
                            "name",
                            "kwargs",
                            "instance"
                        ],
                        "children": [
                            "im_class",
                            "im_func",
                            "im_self"
                        ]
                    },
                    {
                        "type": "property",
                        "docstring": null,
                        "name": "id",
                        "children": [
                            "deleter",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "Module",
                "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                "name": "c",
                "children": [
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ABCDEFORM_SAMPLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ACTIONCLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ACTIONPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ADVANCEDMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICCLOUD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICCURVES_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICFILE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICMESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ANCHOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "AREALIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "AUDIOCLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "AUDIOFILE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BACKDROP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BASEVOLUME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BEZIERNODE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BLOB_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CAMERA_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CAPSULE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CEFLOAT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CELLULAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CEMATRIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CHANEFFECT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CHANMODIFY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CHECKER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCHANNELRELATION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCLAMP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORBLEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORCORRECT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORGAMMA_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORHSV_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORINVERT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORKELVIN_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCONSTANT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCURVEPROBE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCYCLER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMDIRECTIONCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMDISTANCECONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMDYNAMICPARENT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMFLOATOFFSET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMFLOATWARP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMGEOMETRYCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMIKDUAL2D_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMINTERSECT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMLINEARBLEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMLOGIC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHBASIC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHMULTI_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHTRIG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHVECTOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXBLEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXCOMPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXCONSTRUCT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXFROMEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXINVERT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXOFFSET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXTOEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXTRANSPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXVECTORMULTIPLY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXVECTOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXWARP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMEASUREANGLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMEASUREDISTANCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMNOISE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMOSCILLATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMPATHCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMPID_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONCONJUGATE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONFROMAXISANGLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONFROMEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONFROMMATRIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONGETVALUE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONMATH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONNORMALIZE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONSETVALUE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONSLERP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONTOAXISANGLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONTOEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONTOMATRIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONVECTORMULTIPLY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMRANDOM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMREVOLVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADEREFFECTS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERLIGHTING_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERRAYCAST_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERRAYTYPE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERSWITCH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSIMPLEKINEMATICS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSMOOTH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSOUND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSPEED_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSTRINGCOMPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSTRINGFINDANDREPLACE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSTRINGSWITCH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSWITCH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMTIME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMTRANSFORMCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORBYSCALAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORMAGNITUDE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORORTHOGONALIZE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORREFLECTION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVELOCITY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMWAVEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "COLLECTOREMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSHINGE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSPIN_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSPOINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSSLIDEHINGE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSSPRING_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSTANT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CSVCACHE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CURVEEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CYLINDERLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFAULTSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFERREDMESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMFOLDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMGROUP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMMDD2_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMMDD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_BEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_BEZIER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_CRVCONST_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_LAG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_LATTICE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_MAGNET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_SLACK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_SPLINE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_VORTEX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_WRAP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DOMELIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DOTS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICCOLLIDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICCOLLISIONEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICFLUID_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMIC_REPLICATORFILTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ENVIRONMENT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ENVMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "EXPRESSION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_BEZIER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_CAPSULE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_LINEAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_RADIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_SPLINE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FLOCKINGOP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_CURVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_DRAG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_LINEAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_NEWTON_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_RADIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_ROOT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_TURBULENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_VORTEX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_WIND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FURMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GASKETTOY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GEAR_ITEM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GENINFLUENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GPLANE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GRADIENT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    null,
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GRID_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GROUPLOCATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GROUP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IKFULLBODY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IKSOLVER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGEFOLDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGEGROUP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGELAYER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGEMAP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEMCHANNELPROBE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEMINFLUENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEMMODIFY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEM_ROCK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LIGHTMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LOCATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LOCDEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MAPMIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MASK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATCAPSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_CELEDGES_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_CELSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_HAIRMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_HALFTONE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_IRIDESCENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_SKINMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_THINFILM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MEDIACLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MESHINST_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MORPHDEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MORPHMIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "NOISE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "OCCLUSION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PARTICLEOP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PARTICLESIM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PARTICLETERMINATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PCLOUD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PHOTOMETRYLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_AUDIO_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_BASIC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_EXPRESSION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_GENERATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_LOOKAT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_RANDOM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_SIEVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_STEP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "POINTLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "POLYRENDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PORTAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROBEFALLOFF_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROCESS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROJECTSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROXY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RADIALEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "REALPARTICLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RENDERBOOL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RENDEROUTPUT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RENDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "REPLICATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RIPPLES_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ROTATION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RPC_MESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SCALE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "Scene",
                        "docstring": null,
                        "name": "SCENE_SVC",
                        "children": [
                            "ChannelVectorSize",
                            "CreateScene",
                            "DestroyScene",
                            "GetMeshInstSourceItem",
                            "GetReplicatorEnumerator",
                            "ItemSubTypeByIndex",
                            "ItemSubTypeCount",
                            "ItemTypeByIndex",
                            "ItemTypeCommonChannels",
                            "ItemTypeCount",
                            "ItemTypeGetTag",
                            "ItemTypeLookup",
                            "ItemTypeName",
                            "ItemTypeSuper",
                            "ItemTypeTest",
                            "LoadImage",
                            "MeshInstanceByIndex",
                            "MeshInstanceCount",
                            "Root",
                            "ScriptQuery",
                            "SubSceneAdd",
                            "SubSceneLoad"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SCENE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SCHMNODE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "Selection",
                        "docstring": null,
                        "name": "SEL_SVC",
                        "children": [
                            "AbortBatch",
                            "Allocate",
                            "ByIndex",
                            "Clear",
                            "Count",
                            "CurrentSubTypes",
                            "CurrentType",
                            "Deselect",
                            "Drop",
                            "EndBatch",
                            "GetTime",
                            "LookupName",
                            "LookupType",
                            "Recent",
                            "Remove",
                            "ScriptQuery",
                            "Select",
                            "SetTime",
                            "StartBatch",
                            "State",
                            "Test",
                            "Toggle"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SHADERFOLDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SHEAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SOFTLAG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SOLVER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SOURCEEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SPOTLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SPRITE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SUNLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    null,
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SURFEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SURFGENLOC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SURFGEN_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TENSIONTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TEXTURELAYER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TRANSFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TRANSLATION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TRISURF_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TXTRLOCATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_RING_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_AGATE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_BOZO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_CRUDDY_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_DENTED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_ETCHED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_FBM_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_GABOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_GRANITE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_HYBRID_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_LUMP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_PEBBLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_POISSON_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_RIDGED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_SCAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_STRATA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_STUCCO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_DIRT_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_FIRE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_MINKY_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_VEINS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_WIRES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_PEEL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_PLATES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_RIVETS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_RUST_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_SMEAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_RPCTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_RTCURVATURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_CAMO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_DISEASE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_LEATHER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_MONSTER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_PASTELLA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_PEENED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_BLAST_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_FLARE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_GASGIANT_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_GLINT_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_HURRICANE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_NURNIES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_PLANET_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_RINGS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_STARFIELD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_SWIRL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_TERRA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_WINDOWS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_BASKET_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_BATHTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_BRICKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_CHECKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_CORNERLESS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_CUBES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_DASHLINE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_FISHSCALES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_HEXTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_LATTICE1_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_LATTICE2_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_LATTICE3_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_MOSAIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_OCTTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PARQUET_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PAVING_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PLAID_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PLANKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_RIBS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_SHINGLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_SPOTS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_STAMPED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TACOS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TARTAN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TILER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TRICHECKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TRIHEXES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TRITILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_WALL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_DRIPDROP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_RAIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_RIPPLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_SURF_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_WAVES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WIREFRAME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VARIATIONTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOBLANK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOCLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOSEQUENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOSTILL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VMAPTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VOLUME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    null,
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WEAVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WEIGHTCONTAINER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WIDGET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WOOD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "XFRMCORE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "_module",
                        "children": [
                            "SCENE_SVC",
                            "SEL_SVC",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "Module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "_pmodule",
                        "children": [
                            "ABCDEFORM_SAMPLE_TYPE",
                            "ACTIONCLIP_TYPE",
                            "ACTIONPOSE_TYPE",
                            "ADVANCEDMATERIAL_TYPE",
                            "ALEMBICCLOUD_TYPE",
                            "ALEMBICCURVES_TYPE",
                            "ALEMBICFILE_TYPE",
                            "ALEMBICMESH_TYPE",
                            "ANCHOR_TYPE",
                            "AREALIGHT_TYPE",
                            "AUDIOCLIP_TYPE",
                            "AUDIOFILE_TYPE",
                            "BACKDROP_TYPE",
                            "BASEVOLUME_TYPE",
                            "BEZIERNODE_TYPE",
                            "BLOB_TYPE",
                            "CAMERA_TYPE",
                            "CAPSULE_TYPE",
                            "CEFLOAT_TYPE",
                            "CELLULAR_TYPE",
                            "CEMATRIX_TYPE",
                            "CHANEFFECT_TYPE",
                            "CHANMODIFY_TYPE",
                            "CHECKER_TYPE",
                            "CMCHANNELRELATION_TYPE",
                            "CMCLAMP_TYPE",
                            "CMCOLORBLEND_TYPE",
                            "CMCOLORCORRECT_TYPE",
                            "CMCOLORGAMMA_TYPE",
                            "CMCOLORHSV_TYPE",
                            "CMCOLORINVERT_TYPE",
                            "CMCOLORKELVIN_TYPE",
                            "CMCONSTANT_TYPE",
                            "CMCURVEPROBE_TYPE",
                            "CMCYCLER_TYPE",
                            "CMDIRECTIONCONSTRAINT_TYPE",
                            "CMDISTANCECONSTRAINT_TYPE",
                            "CMDYNAMICPARENT_TYPE",
                            "CMFLOATOFFSET_TYPE",
                            "CMFLOATWARP_TYPE",
                            "CMGEOMETRYCONSTRAINT_TYPE",
                            "CMIKDUAL2D_TYPE",
                            "CMINTERSECT_TYPE",
                            "CMLINEARBLEND_TYPE",
                            "CMLOGIC_TYPE",
                            "CMMATHBASIC_TYPE",
                            "CMMATHMULTI_TYPE",
                            "CMMATHTRIG_TYPE",
                            "CMMATHVECTOR_TYPE",
                            "CMMATH_TYPE",
                            "CMMATRIXBLEND_TYPE",
                            "CMMATRIXCOMPOSE_TYPE",
                            "CMMATRIXCONSTRUCT_TYPE",
                            "CMMATRIXFROMEULER_TYPE",
                            "CMMATRIXINVERT_TYPE",
                            "CMMATRIXOFFSET_TYPE",
                            "CMMATRIXTOEULER_TYPE",
                            "CMMATRIXTRANSPOSE_TYPE",
                            "CMMATRIXVECTORMULTIPLY_TYPE",
                            "CMMATRIXVECTOR_TYPE",
                            "CMMATRIXWARP_TYPE",
                            "CMMEASUREANGLE_TYPE",
                            "CMMEASUREDISTANCE_TYPE",
                            "CMNOISE_TYPE",
                            "CMOSCILLATOR_TYPE",
                            "CMPATHCONSTRAINT_TYPE",
                            "CMPID_TYPE",
                            "CMQUATERNIONCONJUGATE_TYPE",
                            "CMQUATERNIONFROMAXISANGLE_TYPE",
                            "CMQUATERNIONFROMEULER_TYPE",
                            "CMQUATERNIONFROMMATRIX_TYPE",
                            "CMQUATERNIONGETVALUE_TYPE",
                            "CMQUATERNIONMATH_TYPE",
                            "CMQUATERNIONNORMALIZE_TYPE",
                            "CMQUATERNIONSETVALUE_TYPE",
                            "CMQUATERNIONSLERP_TYPE",
                            "CMQUATERNIONTOAXISANGLE_TYPE",
                            "CMQUATERNIONTOEULER_TYPE",
                            "CMQUATERNIONTOMATRIX_TYPE",
                            "CMQUATERNIONVECTORMULTIPLY_TYPE",
                            "CMRANDOM_TYPE",
                            "CMREVOLVE_TYPE",
                            "CMSHADEREFFECTS_TYPE",
                            "CMSHADERLIGHTING_TYPE",
                            "CMSHADERRAYCAST_TYPE",
                            "CMSHADERRAYTYPE_TYPE",
                            "CMSHADERSWITCH_TYPE",
                            "CMSIMPLEKINEMATICS_TYPE",
                            "CMSMOOTH_TYPE",
                            "CMSOUND_TYPE",
                            "CMSPEED_TYPE",
                            "CMSTRINGCOMPOSE_TYPE",
                            "CMSTRINGFINDANDREPLACE_TYPE",
                            "CMSTRINGSWITCH_TYPE",
                            "CMSWITCH_TYPE",
                            "CMTIME_TYPE",
                            "CMTRANSFORMCONSTRAINT_TYPE",
                            "CMVECTORBYSCALAR_TYPE",
                            "CMVECTORMAGNITUDE_TYPE",
                            "CMVECTORORTHOGONALIZE_TYPE",
                            "CMVECTORREFLECTION_TYPE",
                            "CMVECTOR_TYPE",
                            "CMVELOCITY_TYPE",
                            "CMWAVEFORM_TYPE",
                            "COLLECTOREMITTER_TYPE",
                            "CONSHINGE_TYPE",
                            "CONSPIN_TYPE",
                            "CONSPOINT_TYPE",
                            "CONSSLIDEHINGE_TYPE",
                            "CONSSPRING_TYPE",
                            "CONSTANT_TYPE",
                            "CONS_TYPE",
                            "CSVCACHE_TYPE",
                            "CURVEEMITTER_TYPE",
                            "CYLINDERLIGHT_TYPE",
                            "DEFAULTSHADER_TYPE",
                            "DEFERREDMESH_TYPE",
                            "DEFORMFOLDER_TYPE",
                            "DEFORMGROUP_TYPE",
                            "DEFORMMDD2_TYPE",
                            "DEFORMMDD_TYPE",
                            "DEFORM_BEND_TYPE",
                            "DEFORM_BEZIER_TYPE",
                            "DEFORM_CRVCONST_TYPE",
                            "DEFORM_LAG_TYPE",
                            "DEFORM_LATTICE_TYPE",
                            "DEFORM_MAGNET_TYPE",
                            "DEFORM_SLACK_TYPE",
                            "DEFORM_SPLINE_TYPE",
                            "DEFORM_TYPE",
                            "DEFORM_VORTEX_TYPE",
                            "DEFORM_WRAP_TYPE",
                            "DOMELIGHT_TYPE",
                            "DOTS_TYPE",
                            "DYNAMICCOLLIDER_TYPE",
                            "DYNAMICCOLLISIONEMITTER_TYPE",
                            "DYNAMICFLUID_TYPE",
                            "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                            "DYNAMIC_REPLICATORFILTER_TYPE",
                            "ENVIRONMENT_TYPE",
                            "ENVMATERIAL_TYPE",
                            "EXPRESSION_TYPE",
                            "FALLOFF_BEZIER_TYPE",
                            "FALLOFF_CAPSULE_TYPE",
                            "FALLOFF_LINEAR_TYPE",
                            "FALLOFF_RADIAL_TYPE",
                            "FALLOFF_SPLINE_TYPE",
                            "FALLOFF_TYPE",
                            "FLOCKINGOP_TYPE",
                            "FORCE_CURVE_TYPE",
                            "FORCE_DRAG_TYPE",
                            "FORCE_LINEAR_TYPE",
                            "FORCE_NEWTON_TYPE",
                            "FORCE_RADIAL_TYPE",
                            "FORCE_ROOT_TYPE",
                            "FORCE_TURBULENCE_TYPE",
                            "FORCE_VORTEX_TYPE",
                            "FORCE_WIND_TYPE",
                            "FURMATERIAL_TYPE",
                            "GASKETTOY_TYPE",
                            "GEAR_ITEM_TYPE",
                            "GENINFLUENCE_TYPE",
                            "GPLANE_TYPE",
                            "GRADIENT_TYPE",
                            "GRASS_ITEM_TYPE",
                            "GRID_TYPE",
                            "GROUPLOCATOR_TYPE",
                            "GROUP_TYPE",
                            "IKFULLBODY_TYPE",
                            "IKSOLVER_TYPE",
                            "IMAGEFOLDER_TYPE",
                            "IMAGEGROUP_TYPE",
                            "IMAGELAYER_TYPE",
                            "IMAGEMAP_TYPE",
                            "ITEMCHANNELPROBE_TYPE",
                            "ITEMINFLUENCE_TYPE",
                            "ITEMMODIFY_TYPE",
                            "ITEM_ROCK_TYPE",
                            "LIGHTMATERIAL_TYPE",
                            "LIGHT_TYPE",
                            "LOCATOR_TYPE",
                            "LOCDEFORM_TYPE",
                            "MAPMIX_TYPE",
                            "MASK_TYPE",
                            "MATCAPSHADER_TYPE",
                            "MATERIAL_CELEDGES_TYPE",
                            "MATERIAL_CELSHADER_TYPE",
                            "MATERIAL_HAIRMATERIAL_TYPE",
                            "MATERIAL_HALFTONE_TYPE",
                            "MATERIAL_IRIDESCENCE_TYPE",
                            "MATERIAL_SKINMATERIAL_TYPE",
                            "MATERIAL_THINFILM_TYPE",
                            "MEDIACLIP_TYPE",
                            "MESHINST_TYPE",
                            "MESH_TYPE",
                            "MORPHDEFORM_TYPE",
                            "MORPHMIX_TYPE",
                            "NOISE_TYPE",
                            "OCCLUSION_TYPE",
                            "PARTICLEOP_TYPE",
                            "PARTICLESIM_TYPE",
                            "PARTICLETERMINATOR_TYPE",
                            "PCLOUD_TYPE",
                            "PHOTOMETRYLIGHT_TYPE",
                            "PMOD_AUDIO_TYPE",
                            "PMOD_BASIC_TYPE",
                            "PMOD_EXPRESSION_TYPE",
                            "PMOD_GENERATOR_TYPE",
                            "PMOD_LOOKAT_TYPE",
                            "PMOD_RANDOM_TYPE",
                            "PMOD_SIEVE_TYPE",
                            "PMOD_STEP_TYPE",
                            "POINTLIGHT_TYPE",
                            "POLYRENDER_TYPE",
                            "PORTAL_TYPE",
                            "PROBEFALLOFF_TYPE",
                            "PROCESS_TYPE",
                            "PROJECTSHADER_TYPE",
                            "PROXY_TYPE",
                            "RADIALEMITTER_TYPE",
                            "REALPARTICLE_TYPE",
                            "RENDERBOOL_TYPE",
                            "RENDEROUTPUT_TYPE",
                            "RENDER_TYPE",
                            "REPLICATOR_TYPE",
                            "RIPPLES_TYPE",
                            "ROTATION_TYPE",
                            "RPC_MESH_TYPE",
                            "SCALE_TYPE",
                            "SCENE_SVC",
                            "SCENE_TYPE",
                            "SCHMNODE_TYPE",
                            "SEL_SVC",
                            "SHADERFOLDER_TYPE",
                            "SHADER_TYPE",
                            "SHEAR_TYPE",
                            "SOFTLAG_TYPE",
                            "SOLVER_TYPE",
                            "SOURCEEMITTER_TYPE",
                            "SPOTLIGHT_TYPE",
                            "SPRITE_TYPE",
                            "SUNLIGHT_TYPE",
                            "SURFACESCATTER_TYPE",
                            "SURFEMITTER_TYPE",
                            "SURFGENLOC_TYPE",
                            "SURFGEN_TYPE",
                            "TENSIONTEXTURE_TYPE",
                            "TEXTURELAYER_TYPE",
                            "TRANSFORM_TYPE",
                            "TRANSLATION_TYPE",
                            "TRISURF_TYPE",
                            "TXTRLOCATOR_TYPE",
                            "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                            "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                            "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                            "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                            "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                            "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                            "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                            "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                            "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                            "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                            "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_RING_RJJ_TYPE",
                            "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                            "VAL_NOISE_AGATE_RJJ_TYPE",
                            "VAL_NOISE_BOZO_RJJ_TYPE",
                            "VAL_NOISE_CRUDDY_RJJ_TYPE",
                            "VAL_NOISE_DENTED_RJJ_TYPE",
                            "VAL_NOISE_ETCHED_RJJ_TYPE",
                            "VAL_NOISE_FBM_RJJ_TYPE",
                            "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                            "VAL_NOISE_GABOR_TYPE",
                            "VAL_NOISE_GRANITE_RJJ_TYPE",
                            "VAL_NOISE_HYBRID_RJJ_TYPE",
                            "VAL_NOISE_LUMP_RJJ_TYPE",
                            "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                            "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                            "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                            "VAL_NOISE_PEBBLES_RJJ_TYPE",
                            "VAL_NOISE_POISSON_TYPE",
                            "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                            "VAL_NOISE_RIDGED_RJJ_TYPE",
                            "VAL_NOISE_SCAR_RJJ_TYPE",
                            "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                            "VAL_NOISE_STRATA_RJJ_TYPE",
                            "VAL_NOISE_STUCCO_RJJ_TYPE",
                            "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                            "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                            "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                            "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                            "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                            "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                            "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                            "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                            "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                            "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                            "VAL_ORGANIC_DIRT_RJJ_TYPE",
                            "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                            "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                            "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                            "VAL_ORGANIC_FIRE_RJJ_TYPE",
                            "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                            "VAL_ORGANIC_MINKY_RJJ_TYPE",
                            "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                            "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                            "VAL_ORGANIC_VEINS_RJJ_TYPE",
                            "VAL_ORGANIC_WIRES_RJJ_TYPE",
                            "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                            "VAL_PANELS_PEEL_RJJ_TYPE",
                            "VAL_PANELS_PLATES_RJJ_TYPE",
                            "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                            "VAL_PANELS_RIVETS_RJJ_TYPE",
                            "VAL_PANELS_RUST_RJJ_TYPE",
                            "VAL_PANELS_SMEAR_RJJ_TYPE",
                            "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                            "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                            "VAL_RPCTEXTURE_TYPE",
                            "VAL_RTCURVATURE_TYPE",
                            "VAL_SKINS_CAMO_RJJ_TYPE",
                            "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                            "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                            "VAL_SKINS_DISEASE_RJJ_TYPE",
                            "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                            "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                            "VAL_SKINS_LEATHER_RJJ_TYPE",
                            "VAL_SKINS_MONSTER_RJJ_TYPE",
                            "VAL_SKINS_PASTELLA_RJJ_TYPE",
                            "VAL_SKINS_PEENED_RJJ_TYPE",
                            "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                            "VAL_SPACE_BLAST_RJJ_TYPE",
                            "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                            "VAL_SPACE_FLARE_RJJ_TYPE",
                            "VAL_SPACE_GASGIANT_RJJ_TYPE",
                            "VAL_SPACE_GLINT_RJJ_TYPE",
                            "VAL_SPACE_HURRICANE_RJJ_TYPE",
                            "VAL_SPACE_NURNIES_RJJ_TYPE",
                            "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                            "VAL_SPACE_PLANET_RJJ_TYPE",
                            "VAL_SPACE_RINGS_RJJ_TYPE",
                            "VAL_SPACE_STARFIELD_RJJ_TYPE",
                            "VAL_SPACE_SWIRL_RJJ_TYPE",
                            "VAL_SPACE_TERRA_RJJ_TYPE",
                            "VAL_SPACE_WINDOWS_RJJ_TYPE",
                            "VAL_TILES_BASKET_RJJ_TYPE",
                            "VAL_TILES_BATHTILE_RJJ_TYPE",
                            "VAL_TILES_BRICKS_RJJ_TYPE",
                            "VAL_TILES_CHECKS_RJJ_TYPE",
                            "VAL_TILES_CORNERLESS_RJJ_TYPE",
                            "VAL_TILES_CUBES_RJJ_TYPE",
                            "VAL_TILES_DASHLINE_RJJ_TYPE",
                            "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                            "VAL_TILES_FISHSCALES_RJJ_TYPE",
                            "VAL_TILES_HEXTILE_RJJ_TYPE",
                            "VAL_TILES_LATTICE1_RJJ_TYPE",
                            "VAL_TILES_LATTICE2_RJJ_TYPE",
                            "VAL_TILES_LATTICE3_RJJ_TYPE",
                            "VAL_TILES_MOSAIC_RJJ_TYPE",
                            "VAL_TILES_OCTTILE_RJJ_TYPE",
                            "VAL_TILES_PARQUET_RJJ_TYPE",
                            "VAL_TILES_PAVING_RJJ_TYPE",
                            "VAL_TILES_PLAID_RJJ_TYPE",
                            "VAL_TILES_PLANKS_RJJ_TYPE",
                            "VAL_TILES_RIBS_RJJ_TYPE",
                            "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                            "VAL_TILES_SHINGLES_RJJ_TYPE",
                            "VAL_TILES_SPOTS_RJJ_TYPE",
                            "VAL_TILES_STAMPED_RJJ_TYPE",
                            "VAL_TILES_TACOS_RJJ_TYPE",
                            "VAL_TILES_TARTAN_RJJ_TYPE",
                            "VAL_TILES_TILER_RJJ_TYPE",
                            "VAL_TILES_TRICHECKS_RJJ_TYPE",
                            "VAL_TILES_TRIHEXES_RJJ_TYPE",
                            "VAL_TILES_TRITILE_RJJ_TYPE",
                            "VAL_TILES_WALL_RJJ_TYPE",
                            "VAL_WATER_DRIPDROP_RJJ_TYPE",
                            "VAL_WATER_RAIN_RJJ_TYPE",
                            "VAL_WATER_RIPPLES_RJJ_TYPE",
                            "VAL_WATER_SURF_RJJ_TYPE",
                            "VAL_WATER_WAVES_RJJ_TYPE",
                            "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                            "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                            "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                            "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                            "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                            "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                            "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                            "VAL_WIREFRAME_TYPE",
                            "VARIATIONTEXTURE_TYPE",
                            "VIDEOBLANK_TYPE",
                            "VIDEOCLIP_TYPE",
                            "VIDEOSEQUENCE_TYPE",
                            "VIDEOSTILL_TYPE",
                            "VMAPTEXTURE_TYPE",
                            "VOLUME_TYPE",
                            "VOXELITEM_TYPE",
                            "WEAVE_TYPE",
                            "WEIGHTCONTAINER_TYPE",
                            "WIDGET_TYPE",
                            "WOOD_TYPE",
                            "XFRMCORE_TYPE",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "integer type = ItemTypeLookup(string name)",
                        "name": "item_type",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "\n    Use this descriptor as a decorator in the same way that you would use\n    'property', but only apply it to module-level functions, and watch as your\n    module gains properties!\n    ",
                        "name": "mproperty",
                        "children": [
                            "deleter",
                            "doc",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": "\n\n.. module:: modo.channel\n    :synopsis: A collection of channel related classes & functions.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                "name": "channel",
                "children": [
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Channel",
                        "children": [
                            "addLink",
                            "connectInput",
                            "deleteLink",
                            "disconnectInput",
                            "envelope",
                            "evalType",
                            "forward",
                            "fwdCount",
                            "fwdLinked",
                            "get",
                            "graph",
                            "index",
                            "isAnimated",
                            "item",
                            "name",
                            "revCount",
                            "revLinked",
                            "reverse",
                            "set",
                            "setLink",
                            "storageType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "ChannelRead",
                        "children": [
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Wrapper to allow setting and reading all three channels on a vector 'channel' at once\n\n    :param basestring channelName: The channel name. eg 'diffCol'\n    :param modo.item.Item item: The item the channel belongs to.\n\n    :raises: LookUpError if no respective channel of the given name was found\n    ",
                        "name": "ChannelTriple",
                        "children": [
                            "get",
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "ChannelWrite",
                        "children": [
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Envelope",
                        "children": [
                            "behavior",
                            "clear",
                            "interpolation",
                            "isInt",
                            "keyframes",
                            "postBehaviour",
                            "preBehaviour",
                            "value"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Keyframes",
                        "children": [
                            "_indexFromTime",
                            "add",
                            "delete",
                            "first",
                            "getSlopeType",
                            "last",
                            "next",
                            "numKeys",
                            "prev",
                            "setIndex",
                            "setSlopeType",
                            "time",
                            "value"
                        ]
                    },
                    {
                        "type": "Module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "c",
                        "children": [
                            "ABCDEFORM_SAMPLE_TYPE",
                            "ACTIONCLIP_TYPE",
                            "ACTIONPOSE_TYPE",
                            "ADVANCEDMATERIAL_TYPE",
                            "ALEMBICCLOUD_TYPE",
                            "ALEMBICCURVES_TYPE",
                            "ALEMBICFILE_TYPE",
                            "ALEMBICMESH_TYPE",
                            "ANCHOR_TYPE",
                            "AREALIGHT_TYPE",
                            "AUDIOCLIP_TYPE",
                            "AUDIOFILE_TYPE",
                            "BACKDROP_TYPE",
                            "BASEVOLUME_TYPE",
                            "BEZIERNODE_TYPE",
                            "BLOB_TYPE",
                            "CAMERA_TYPE",
                            "CAPSULE_TYPE",
                            "CEFLOAT_TYPE",
                            "CELLULAR_TYPE",
                            "CEMATRIX_TYPE",
                            "CHANEFFECT_TYPE",
                            "CHANMODIFY_TYPE",
                            "CHECKER_TYPE",
                            "CMCHANNELRELATION_TYPE",
                            "CMCLAMP_TYPE",
                            "CMCOLORBLEND_TYPE",
                            "CMCOLORCORRECT_TYPE",
                            "CMCOLORGAMMA_TYPE",
                            "CMCOLORHSV_TYPE",
                            "CMCOLORINVERT_TYPE",
                            "CMCOLORKELVIN_TYPE",
                            "CMCONSTANT_TYPE",
                            "CMCURVEPROBE_TYPE",
                            "CMCYCLER_TYPE",
                            "CMDIRECTIONCONSTRAINT_TYPE",
                            "CMDISTANCECONSTRAINT_TYPE",
                            "CMDYNAMICPARENT_TYPE",
                            "CMFLOATOFFSET_TYPE",
                            "CMFLOATWARP_TYPE",
                            "CMGEOMETRYCONSTRAINT_TYPE",
                            "CMIKDUAL2D_TYPE",
                            "CMINTERSECT_TYPE",
                            "CMLINEARBLEND_TYPE",
                            "CMLOGIC_TYPE",
                            "CMMATHBASIC_TYPE",
                            "CMMATHMULTI_TYPE",
                            "CMMATHTRIG_TYPE",
                            "CMMATHVECTOR_TYPE",
                            "CMMATH_TYPE",
                            "CMMATRIXBLEND_TYPE",
                            "CMMATRIXCOMPOSE_TYPE",
                            "CMMATRIXCONSTRUCT_TYPE",
                            "CMMATRIXFROMEULER_TYPE",
                            "CMMATRIXINVERT_TYPE",
                            "CMMATRIXOFFSET_TYPE",
                            "CMMATRIXTOEULER_TYPE",
                            "CMMATRIXTRANSPOSE_TYPE",
                            "CMMATRIXVECTORMULTIPLY_TYPE",
                            "CMMATRIXVECTOR_TYPE",
                            "CMMATRIXWARP_TYPE",
                            "CMMEASUREANGLE_TYPE",
                            "CMMEASUREDISTANCE_TYPE",
                            "CMNOISE_TYPE",
                            "CMOSCILLATOR_TYPE",
                            "CMPATHCONSTRAINT_TYPE",
                            "CMPID_TYPE",
                            "CMQUATERNIONCONJUGATE_TYPE",
                            "CMQUATERNIONFROMAXISANGLE_TYPE",
                            "CMQUATERNIONFROMEULER_TYPE",
                            "CMQUATERNIONFROMMATRIX_TYPE",
                            "CMQUATERNIONGETVALUE_TYPE",
                            "CMQUATERNIONMATH_TYPE",
                            "CMQUATERNIONNORMALIZE_TYPE",
                            "CMQUATERNIONSETVALUE_TYPE",
                            "CMQUATERNIONSLERP_TYPE",
                            "CMQUATERNIONTOAXISANGLE_TYPE",
                            "CMQUATERNIONTOEULER_TYPE",
                            "CMQUATERNIONTOMATRIX_TYPE",
                            "CMQUATERNIONVECTORMULTIPLY_TYPE",
                            "CMRANDOM_TYPE",
                            "CMREVOLVE_TYPE",
                            "CMSHADEREFFECTS_TYPE",
                            "CMSHADERLIGHTING_TYPE",
                            "CMSHADERRAYCAST_TYPE",
                            "CMSHADERRAYTYPE_TYPE",
                            "CMSHADERSWITCH_TYPE",
                            "CMSIMPLEKINEMATICS_TYPE",
                            "CMSMOOTH_TYPE",
                            "CMSOUND_TYPE",
                            "CMSPEED_TYPE",
                            "CMSTRINGCOMPOSE_TYPE",
                            "CMSTRINGFINDANDREPLACE_TYPE",
                            "CMSTRINGSWITCH_TYPE",
                            "CMSWITCH_TYPE",
                            "CMTIME_TYPE",
                            "CMTRANSFORMCONSTRAINT_TYPE",
                            "CMVECTORBYSCALAR_TYPE",
                            "CMVECTORMAGNITUDE_TYPE",
                            "CMVECTORORTHOGONALIZE_TYPE",
                            "CMVECTORREFLECTION_TYPE",
                            "CMVECTOR_TYPE",
                            "CMVELOCITY_TYPE",
                            "CMWAVEFORM_TYPE",
                            "COLLECTOREMITTER_TYPE",
                            "CONSHINGE_TYPE",
                            "CONSPIN_TYPE",
                            "CONSPOINT_TYPE",
                            "CONSSLIDEHINGE_TYPE",
                            "CONSSPRING_TYPE",
                            "CONSTANT_TYPE",
                            "CONS_TYPE",
                            "CSVCACHE_TYPE",
                            "CURVEEMITTER_TYPE",
                            "CYLINDERLIGHT_TYPE",
                            "DEFAULTSHADER_TYPE",
                            "DEFERREDMESH_TYPE",
                            "DEFORMFOLDER_TYPE",
                            "DEFORMGROUP_TYPE",
                            "DEFORMMDD2_TYPE",
                            "DEFORMMDD_TYPE",
                            "DEFORM_BEND_TYPE",
                            "DEFORM_BEZIER_TYPE",
                            "DEFORM_CRVCONST_TYPE",
                            "DEFORM_LAG_TYPE",
                            "DEFORM_LATTICE_TYPE",
                            "DEFORM_MAGNET_TYPE",
                            "DEFORM_SLACK_TYPE",
                            "DEFORM_SPLINE_TYPE",
                            "DEFORM_TYPE",
                            "DEFORM_VORTEX_TYPE",
                            "DEFORM_WRAP_TYPE",
                            "DOMELIGHT_TYPE",
                            "DOTS_TYPE",
                            "DYNAMICCOLLIDER_TYPE",
                            "DYNAMICCOLLISIONEMITTER_TYPE",
                            "DYNAMICFLUID_TYPE",
                            "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                            "DYNAMIC_REPLICATORFILTER_TYPE",
                            "ENVIRONMENT_TYPE",
                            "ENVMATERIAL_TYPE",
                            "EXPRESSION_TYPE",
                            "FALLOFF_BEZIER_TYPE",
                            "FALLOFF_CAPSULE_TYPE",
                            "FALLOFF_LINEAR_TYPE",
                            "FALLOFF_RADIAL_TYPE",
                            "FALLOFF_SPLINE_TYPE",
                            "FALLOFF_TYPE",
                            "FLOCKINGOP_TYPE",
                            "FORCE_CURVE_TYPE",
                            "FORCE_DRAG_TYPE",
                            "FORCE_LINEAR_TYPE",
                            "FORCE_NEWTON_TYPE",
                            "FORCE_RADIAL_TYPE",
                            "FORCE_ROOT_TYPE",
                            "FORCE_TURBULENCE_TYPE",
                            "FORCE_VORTEX_TYPE",
                            "FORCE_WIND_TYPE",
                            "FURMATERIAL_TYPE",
                            "GASKETTOY_TYPE",
                            "GEAR_ITEM_TYPE",
                            "GENINFLUENCE_TYPE",
                            "GPLANE_TYPE",
                            "GRADIENT_TYPE",
                            "GRASS_ITEM_TYPE",
                            "GRID_TYPE",
                            "GROUPLOCATOR_TYPE",
                            "GROUP_TYPE",
                            "IKFULLBODY_TYPE",
                            "IKSOLVER_TYPE",
                            "IMAGEFOLDER_TYPE",
                            "IMAGEGROUP_TYPE",
                            "IMAGELAYER_TYPE",
                            "IMAGEMAP_TYPE",
                            "ITEMCHANNELPROBE_TYPE",
                            "ITEMINFLUENCE_TYPE",
                            "ITEMMODIFY_TYPE",
                            "ITEM_ROCK_TYPE",
                            "LIGHTMATERIAL_TYPE",
                            "LIGHT_TYPE",
                            "LOCATOR_TYPE",
                            "LOCDEFORM_TYPE",
                            "MAPMIX_TYPE",
                            "MASK_TYPE",
                            "MATCAPSHADER_TYPE",
                            "MATERIAL_CELEDGES_TYPE",
                            "MATERIAL_CELSHADER_TYPE",
                            "MATERIAL_HAIRMATERIAL_TYPE",
                            "MATERIAL_HALFTONE_TYPE",
                            "MATERIAL_IRIDESCENCE_TYPE",
                            "MATERIAL_SKINMATERIAL_TYPE",
                            "MATERIAL_THINFILM_TYPE",
                            "MEDIACLIP_TYPE",
                            "MESHINST_TYPE",
                            "MESH_TYPE",
                            "MORPHDEFORM_TYPE",
                            "MORPHMIX_TYPE",
                            "NOISE_TYPE",
                            "OCCLUSION_TYPE",
                            "PARTICLEOP_TYPE",
                            "PARTICLESIM_TYPE",
                            "PARTICLETERMINATOR_TYPE",
                            "PCLOUD_TYPE",
                            "PHOTOMETRYLIGHT_TYPE",
                            "PMOD_AUDIO_TYPE",
                            "PMOD_BASIC_TYPE",
                            "PMOD_EXPRESSION_TYPE",
                            "PMOD_GENERATOR_TYPE",
                            "PMOD_LOOKAT_TYPE",
                            "PMOD_RANDOM_TYPE",
                            "PMOD_SIEVE_TYPE",
                            "PMOD_STEP_TYPE",
                            "POINTLIGHT_TYPE",
                            "POLYRENDER_TYPE",
                            "PORTAL_TYPE",
                            "PROBEFALLOFF_TYPE",
                            "PROCESS_TYPE",
                            "PROJECTSHADER_TYPE",
                            "PROXY_TYPE",
                            "RADIALEMITTER_TYPE",
                            "REALPARTICLE_TYPE",
                            "RENDERBOOL_TYPE",
                            "RENDEROUTPUT_TYPE",
                            "RENDER_TYPE",
                            "REPLICATOR_TYPE",
                            "RIPPLES_TYPE",
                            "ROTATION_TYPE",
                            "RPC_MESH_TYPE",
                            "SCALE_TYPE",
                            "SCENE_SVC",
                            "SCENE_TYPE",
                            "SCHMNODE_TYPE",
                            "SEL_SVC",
                            "SHADERFOLDER_TYPE",
                            "SHADER_TYPE",
                            "SHEAR_TYPE",
                            "SOFTLAG_TYPE",
                            "SOLVER_TYPE",
                            "SOURCEEMITTER_TYPE",
                            "SPOTLIGHT_TYPE",
                            "SPRITE_TYPE",
                            "SUNLIGHT_TYPE",
                            "SURFACESCATTER_TYPE",
                            "SURFEMITTER_TYPE",
                            "SURFGENLOC_TYPE",
                            "SURFGEN_TYPE",
                            "TENSIONTEXTURE_TYPE",
                            "TEXTURELAYER_TYPE",
                            "TRANSFORM_TYPE",
                            "TRANSLATION_TYPE",
                            "TRISURF_TYPE",
                            "TXTRLOCATOR_TYPE",
                            "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                            "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                            "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                            "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                            "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                            "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                            "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                            "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                            "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                            "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                            "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_RING_RJJ_TYPE",
                            "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                            "VAL_NOISE_AGATE_RJJ_TYPE",
                            "VAL_NOISE_BOZO_RJJ_TYPE",
                            "VAL_NOISE_CRUDDY_RJJ_TYPE",
                            "VAL_NOISE_DENTED_RJJ_TYPE",
                            "VAL_NOISE_ETCHED_RJJ_TYPE",
                            "VAL_NOISE_FBM_RJJ_TYPE",
                            "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                            "VAL_NOISE_GABOR_TYPE",
                            "VAL_NOISE_GRANITE_RJJ_TYPE",
                            "VAL_NOISE_HYBRID_RJJ_TYPE",
                            "VAL_NOISE_LUMP_RJJ_TYPE",
                            "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                            "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                            "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                            "VAL_NOISE_PEBBLES_RJJ_TYPE",
                            "VAL_NOISE_POISSON_TYPE",
                            "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                            "VAL_NOISE_RIDGED_RJJ_TYPE",
                            "VAL_NOISE_SCAR_RJJ_TYPE",
                            "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                            "VAL_NOISE_STRATA_RJJ_TYPE",
                            "VAL_NOISE_STUCCO_RJJ_TYPE",
                            "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                            "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                            "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                            "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                            "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                            "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                            "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                            "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                            "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                            "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                            "VAL_ORGANIC_DIRT_RJJ_TYPE",
                            "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                            "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                            "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                            "VAL_ORGANIC_FIRE_RJJ_TYPE",
                            "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                            "VAL_ORGANIC_MINKY_RJJ_TYPE",
                            "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                            "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                            "VAL_ORGANIC_VEINS_RJJ_TYPE",
                            "VAL_ORGANIC_WIRES_RJJ_TYPE",
                            "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                            "VAL_PANELS_PEEL_RJJ_TYPE",
                            "VAL_PANELS_PLATES_RJJ_TYPE",
                            "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                            "VAL_PANELS_RIVETS_RJJ_TYPE",
                            "VAL_PANELS_RUST_RJJ_TYPE",
                            "VAL_PANELS_SMEAR_RJJ_TYPE",
                            "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                            "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                            "VAL_RPCTEXTURE_TYPE",
                            "VAL_RTCURVATURE_TYPE",
                            "VAL_SKINS_CAMO_RJJ_TYPE",
                            "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                            "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                            "VAL_SKINS_DISEASE_RJJ_TYPE",
                            "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                            "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                            "VAL_SKINS_LEATHER_RJJ_TYPE",
                            "VAL_SKINS_MONSTER_RJJ_TYPE",
                            "VAL_SKINS_PASTELLA_RJJ_TYPE",
                            "VAL_SKINS_PEENED_RJJ_TYPE",
                            "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                            "VAL_SPACE_BLAST_RJJ_TYPE",
                            "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                            "VAL_SPACE_FLARE_RJJ_TYPE",
                            "VAL_SPACE_GASGIANT_RJJ_TYPE",
                            "VAL_SPACE_GLINT_RJJ_TYPE",
                            "VAL_SPACE_HURRICANE_RJJ_TYPE",
                            "VAL_SPACE_NURNIES_RJJ_TYPE",
                            "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                            "VAL_SPACE_PLANET_RJJ_TYPE",
                            "VAL_SPACE_RINGS_RJJ_TYPE",
                            "VAL_SPACE_STARFIELD_RJJ_TYPE",
                            "VAL_SPACE_SWIRL_RJJ_TYPE",
                            "VAL_SPACE_TERRA_RJJ_TYPE",
                            "VAL_SPACE_WINDOWS_RJJ_TYPE",
                            "VAL_TILES_BASKET_RJJ_TYPE",
                            "VAL_TILES_BATHTILE_RJJ_TYPE",
                            "VAL_TILES_BRICKS_RJJ_TYPE",
                            "VAL_TILES_CHECKS_RJJ_TYPE",
                            "VAL_TILES_CORNERLESS_RJJ_TYPE",
                            "VAL_TILES_CUBES_RJJ_TYPE",
                            "VAL_TILES_DASHLINE_RJJ_TYPE",
                            "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                            "VAL_TILES_FISHSCALES_RJJ_TYPE",
                            "VAL_TILES_HEXTILE_RJJ_TYPE",
                            "VAL_TILES_LATTICE1_RJJ_TYPE",
                            "VAL_TILES_LATTICE2_RJJ_TYPE",
                            "VAL_TILES_LATTICE3_RJJ_TYPE",
                            "VAL_TILES_MOSAIC_RJJ_TYPE",
                            "VAL_TILES_OCTTILE_RJJ_TYPE",
                            "VAL_TILES_PARQUET_RJJ_TYPE",
                            "VAL_TILES_PAVING_RJJ_TYPE",
                            "VAL_TILES_PLAID_RJJ_TYPE",
                            "VAL_TILES_PLANKS_RJJ_TYPE",
                            "VAL_TILES_RIBS_RJJ_TYPE",
                            "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                            "VAL_TILES_SHINGLES_RJJ_TYPE",
                            "VAL_TILES_SPOTS_RJJ_TYPE",
                            "VAL_TILES_STAMPED_RJJ_TYPE",
                            "VAL_TILES_TACOS_RJJ_TYPE",
                            "VAL_TILES_TARTAN_RJJ_TYPE",
                            "VAL_TILES_TILER_RJJ_TYPE",
                            "VAL_TILES_TRICHECKS_RJJ_TYPE",
                            "VAL_TILES_TRIHEXES_RJJ_TYPE",
                            "VAL_TILES_TRITILE_RJJ_TYPE",
                            "VAL_TILES_WALL_RJJ_TYPE",
                            "VAL_WATER_DRIPDROP_RJJ_TYPE",
                            "VAL_WATER_RAIN_RJJ_TYPE",
                            "VAL_WATER_RIPPLES_RJJ_TYPE",
                            "VAL_WATER_SURF_RJJ_TYPE",
                            "VAL_WATER_WAVES_RJJ_TYPE",
                            "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                            "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                            "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                            "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                            "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                            "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                            "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                            "VAL_WIREFRAME_TYPE",
                            "VARIATIONTEXTURE_TYPE",
                            "VIDEOBLANK_TYPE",
                            "VIDEOCLIP_TYPE",
                            "VIDEOSEQUENCE_TYPE",
                            "VIDEOSTILL_TYPE",
                            "VMAPTEXTURE_TYPE",
                            "VOLUME_TYPE",
                            "VOXELITEM_TYPE",
                            "WEAVE_TYPE",
                            "WEIGHTCONTAINER_TYPE",
                            "WIDGET_TYPE",
                            "WOOD_TYPE",
                            "XFRMCORE_TYPE",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "lxu",
                        "children": [
                            "attributes",
                            "command",
                            "decodeID4",
                            "lxID4",
                            "object",
                            "select",
                            "utils",
                            "vector"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n\n.. module:: modo.util\n    :synopsis: A collection of support tools, decorators, functions etc used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "util",
                        "children": [
                            "c",
                            "collections",
                            "ensureModoItem",
                            "floatEquals",
                            "functools",
                            "item",
                            "lx",
                            "makeQuickCommand",
                            "paths",
                            "testGlobalInterpreter",
                            "typeToFunc"
                        ]
                    }
                ]
            },
            {
                "type": "Module",
                "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                "name": "constants",
                "children": [
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ABCDEFORM_SAMPLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ACTIONCLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ACTIONPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ADVANCEDMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICCLOUD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICCURVES_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICFILE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ALEMBICMESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ANCHOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "AREALIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "AUDIOCLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "AUDIOFILE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BACKDROP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BASEVOLUME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BEZIERNODE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "BLOB_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CAMERA_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CAPSULE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CEFLOAT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CELLULAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CEMATRIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CHANEFFECT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CHANMODIFY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CHECKER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCHANNELRELATION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCLAMP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORBLEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORCORRECT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORGAMMA_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORHSV_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORINVERT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCOLORKELVIN_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCONSTANT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCURVEPROBE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMCYCLER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMDIRECTIONCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMDISTANCECONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMDYNAMICPARENT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMFLOATOFFSET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMFLOATWARP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMGEOMETRYCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMIKDUAL2D_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMINTERSECT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMLINEARBLEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMLOGIC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHBASIC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHMULTI_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHTRIG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATHVECTOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXBLEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXCOMPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXCONSTRUCT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXFROMEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXINVERT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXOFFSET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXTOEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXTRANSPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXVECTORMULTIPLY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXVECTOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMATRIXWARP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMEASUREANGLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMMEASUREDISTANCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMNOISE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMOSCILLATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMPATHCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMPID_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONCONJUGATE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONFROMAXISANGLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONFROMEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONFROMMATRIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONGETVALUE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONMATH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONNORMALIZE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONSETVALUE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONSLERP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONTOAXISANGLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONTOEULER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONTOMATRIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMQUATERNIONVECTORMULTIPLY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMRANDOM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMREVOLVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADEREFFECTS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERLIGHTING_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERRAYCAST_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERRAYTYPE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSHADERSWITCH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSIMPLEKINEMATICS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSMOOTH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSOUND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSPEED_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSTRINGCOMPOSE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSTRINGFINDANDREPLACE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSTRINGSWITCH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMSWITCH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMTIME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMTRANSFORMCONSTRAINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORBYSCALAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORMAGNITUDE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORORTHOGONALIZE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTORREFLECTION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVECTOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMVELOCITY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CMWAVEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "COLLECTOREMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSHINGE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSPIN_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSPOINT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSSLIDEHINGE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSSPRING_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONSTANT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CONS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CSVCACHE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CURVEEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "CYLINDERLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFAULTSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFERREDMESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMFOLDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMGROUP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMMDD2_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORMMDD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_BEND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_BEZIER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_CRVCONST_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_LAG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_LATTICE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_MAGNET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_SLACK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_SPLINE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_VORTEX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DEFORM_WRAP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DOMELIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DOTS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICCOLLIDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICCOLLISIONEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICFLUID_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "DYNAMIC_REPLICATORFILTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ENVIRONMENT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ENVMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "EXPRESSION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_BEZIER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_CAPSULE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_LINEAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_RADIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_SPLINE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FALLOFF_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FLOCKINGOP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_CURVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_DRAG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_LINEAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_NEWTON_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_RADIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_ROOT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_TURBULENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_VORTEX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FORCE_WIND_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "FURMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GASKETTOY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GEAR_ITEM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GENINFLUENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GPLANE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GRADIENT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    null,
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GRID_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GROUPLOCATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "GROUP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IKFULLBODY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IKSOLVER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGEFOLDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGEGROUP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGELAYER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "IMAGEMAP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEMCHANNELPROBE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEMINFLUENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEMMODIFY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ITEM_ROCK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LIGHTMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LOCATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "LOCDEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MAPMIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MASK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATCAPSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_CELEDGES_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_CELSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_HAIRMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_HALFTONE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_IRIDESCENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_SKINMATERIAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MATERIAL_THINFILM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MEDIACLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MESHINST_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MORPHDEFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "MORPHMIX_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "NOISE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "OCCLUSION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PARTICLEOP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PARTICLESIM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PARTICLETERMINATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PCLOUD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PHOTOMETRYLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_AUDIO_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_BASIC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_EXPRESSION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_GENERATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_LOOKAT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_RANDOM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_SIEVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PMOD_STEP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "POINTLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "POLYRENDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PORTAL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROBEFALLOFF_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROCESS_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROJECTSHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "PROXY_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RADIALEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "REALPARTICLE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RENDERBOOL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RENDEROUTPUT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RENDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "REPLICATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RIPPLES_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "ROTATION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "RPC_MESH_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SCALE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "Scene",
                        "docstring": null,
                        "name": "SCENE_SVC",
                        "children": [
                            "ChannelVectorSize",
                            "CreateScene",
                            "DestroyScene",
                            "GetMeshInstSourceItem",
                            "GetReplicatorEnumerator",
                            "ItemSubTypeByIndex",
                            "ItemSubTypeCount",
                            "ItemTypeByIndex",
                            "ItemTypeCommonChannels",
                            "ItemTypeCount",
                            "ItemTypeGetTag",
                            "ItemTypeLookup",
                            "ItemTypeName",
                            "ItemTypeSuper",
                            "ItemTypeTest",
                            "LoadImage",
                            "MeshInstanceByIndex",
                            "MeshInstanceCount",
                            "Root",
                            "ScriptQuery",
                            "SubSceneAdd",
                            "SubSceneLoad"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SCENE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SCHMNODE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "Selection",
                        "docstring": null,
                        "name": "SEL_SVC",
                        "children": [
                            "AbortBatch",
                            "Allocate",
                            "ByIndex",
                            "Clear",
                            "Count",
                            "CurrentSubTypes",
                            "CurrentType",
                            "Deselect",
                            "Drop",
                            "EndBatch",
                            "GetTime",
                            "LookupName",
                            "LookupType",
                            "Recent",
                            "Remove",
                            "ScriptQuery",
                            "Select",
                            "SetTime",
                            "StartBatch",
                            "State",
                            "Test",
                            "Toggle"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SHADERFOLDER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SHADER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SHEAR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SOFTLAG_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SOLVER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SOURCEEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SPOTLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SPRITE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SUNLIGHT_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    null,
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SURFEMITTER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SURFGENLOC_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "SURFGEN_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TENSIONTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TEXTURELAYER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TRANSFORM_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TRANSLATION_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TRISURF_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "TXTRLOCATOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_RING_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_AGATE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_BOZO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_CRUDDY_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_DENTED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_ETCHED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_FBM_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_GABOR_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_GRANITE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_HYBRID_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_LUMP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_PEBBLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_POISSON_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_RIDGED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_SCAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_STRATA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_STUCCO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_DIRT_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_FIRE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_MINKY_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_VEINS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_WIRES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_PEEL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_PLATES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_RIVETS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_RUST_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PANELS_SMEAR_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_RPCTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_RTCURVATURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_CAMO_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_DISEASE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_LEATHER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_MONSTER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_PASTELLA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_PEENED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_BLAST_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_FLARE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_GASGIANT_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_GLINT_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_HURRICANE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_NURNIES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_PLANET_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_RINGS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_STARFIELD_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_SWIRL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_TERRA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_SPACE_WINDOWS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_BASKET_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_BATHTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_BRICKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_CHECKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_CORNERLESS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_CUBES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_DASHLINE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_FISHSCALES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_HEXTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_LATTICE1_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_LATTICE2_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_LATTICE3_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_MOSAIC_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_OCTTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PARQUET_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PAVING_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PLAID_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_PLANKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_RIBS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_SHINGLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_SPOTS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_STAMPED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TACOS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TARTAN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TILER_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TRICHECKS_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TRIHEXES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_TRITILE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_TILES_WALL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_DRIPDROP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_RAIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_RIPPLES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_SURF_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_WAVES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VAL_WIREFRAME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VARIATIONTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOBLANK_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOCLIP_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOSEQUENCE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VIDEOSTILL_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VMAPTEXTURE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "VOLUME_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    null,
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WEAVE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WEIGHTCONTAINER_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WIDGET_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "WOOD_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "long",
                        "docstring": "long(x[, base]) -> integer\n\nConvert a string or number to a long integer, if possible.  A floating\npoint argument will be truncated towards zero (this does not include a\nstring representation of a floating point number!)  When converting a\nstring, use the optional base.  It is an error to supply a base when\nconverting a non-string.",
                        "name": "XFRMCORE_TYPE",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "_module",
                        "children": [
                            "SCENE_SVC",
                            "SEL_SVC",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "Module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "_pmodule",
                        "children": [
                            "ABCDEFORM_SAMPLE_TYPE",
                            "ACTIONCLIP_TYPE",
                            "ACTIONPOSE_TYPE",
                            "ADVANCEDMATERIAL_TYPE",
                            "ALEMBICCLOUD_TYPE",
                            "ALEMBICCURVES_TYPE",
                            "ALEMBICFILE_TYPE",
                            "ALEMBICMESH_TYPE",
                            "ANCHOR_TYPE",
                            "AREALIGHT_TYPE",
                            "AUDIOCLIP_TYPE",
                            "AUDIOFILE_TYPE",
                            "BACKDROP_TYPE",
                            "BASEVOLUME_TYPE",
                            "BEZIERNODE_TYPE",
                            "BLOB_TYPE",
                            "CAMERA_TYPE",
                            "CAPSULE_TYPE",
                            "CEFLOAT_TYPE",
                            "CELLULAR_TYPE",
                            "CEMATRIX_TYPE",
                            "CHANEFFECT_TYPE",
                            "CHANMODIFY_TYPE",
                            "CHECKER_TYPE",
                            "CMCHANNELRELATION_TYPE",
                            "CMCLAMP_TYPE",
                            "CMCOLORBLEND_TYPE",
                            "CMCOLORCORRECT_TYPE",
                            "CMCOLORGAMMA_TYPE",
                            "CMCOLORHSV_TYPE",
                            "CMCOLORINVERT_TYPE",
                            "CMCOLORKELVIN_TYPE",
                            "CMCONSTANT_TYPE",
                            "CMCURVEPROBE_TYPE",
                            "CMCYCLER_TYPE",
                            "CMDIRECTIONCONSTRAINT_TYPE",
                            "CMDISTANCECONSTRAINT_TYPE",
                            "CMDYNAMICPARENT_TYPE",
                            "CMFLOATOFFSET_TYPE",
                            "CMFLOATWARP_TYPE",
                            "CMGEOMETRYCONSTRAINT_TYPE",
                            "CMIKDUAL2D_TYPE",
                            "CMINTERSECT_TYPE",
                            "CMLINEARBLEND_TYPE",
                            "CMLOGIC_TYPE",
                            "CMMATHBASIC_TYPE",
                            "CMMATHMULTI_TYPE",
                            "CMMATHTRIG_TYPE",
                            "CMMATHVECTOR_TYPE",
                            "CMMATH_TYPE",
                            "CMMATRIXBLEND_TYPE",
                            "CMMATRIXCOMPOSE_TYPE",
                            "CMMATRIXCONSTRUCT_TYPE",
                            "CMMATRIXFROMEULER_TYPE",
                            "CMMATRIXINVERT_TYPE",
                            "CMMATRIXOFFSET_TYPE",
                            "CMMATRIXTOEULER_TYPE",
                            "CMMATRIXTRANSPOSE_TYPE",
                            "CMMATRIXVECTORMULTIPLY_TYPE",
                            "CMMATRIXVECTOR_TYPE",
                            "CMMATRIXWARP_TYPE",
                            "CMMEASUREANGLE_TYPE",
                            "CMMEASUREDISTANCE_TYPE",
                            "CMNOISE_TYPE",
                            "CMOSCILLATOR_TYPE",
                            "CMPATHCONSTRAINT_TYPE",
                            "CMPID_TYPE",
                            "CMQUATERNIONCONJUGATE_TYPE",
                            "CMQUATERNIONFROMAXISANGLE_TYPE",
                            "CMQUATERNIONFROMEULER_TYPE",
                            "CMQUATERNIONFROMMATRIX_TYPE",
                            "CMQUATERNIONGETVALUE_TYPE",
                            "CMQUATERNIONMATH_TYPE",
                            "CMQUATERNIONNORMALIZE_TYPE",
                            "CMQUATERNIONSETVALUE_TYPE",
                            "CMQUATERNIONSLERP_TYPE",
                            "CMQUATERNIONTOAXISANGLE_TYPE",
                            "CMQUATERNIONTOEULER_TYPE",
                            "CMQUATERNIONTOMATRIX_TYPE",
                            "CMQUATERNIONVECTORMULTIPLY_TYPE",
                            "CMRANDOM_TYPE",
                            "CMREVOLVE_TYPE",
                            "CMSHADEREFFECTS_TYPE",
                            "CMSHADERLIGHTING_TYPE",
                            "CMSHADERRAYCAST_TYPE",
                            "CMSHADERRAYTYPE_TYPE",
                            "CMSHADERSWITCH_TYPE",
                            "CMSIMPLEKINEMATICS_TYPE",
                            "CMSMOOTH_TYPE",
                            "CMSOUND_TYPE",
                            "CMSPEED_TYPE",
                            "CMSTRINGCOMPOSE_TYPE",
                            "CMSTRINGFINDANDREPLACE_TYPE",
                            "CMSTRINGSWITCH_TYPE",
                            "CMSWITCH_TYPE",
                            "CMTIME_TYPE",
                            "CMTRANSFORMCONSTRAINT_TYPE",
                            "CMVECTORBYSCALAR_TYPE",
                            "CMVECTORMAGNITUDE_TYPE",
                            "CMVECTORORTHOGONALIZE_TYPE",
                            "CMVECTORREFLECTION_TYPE",
                            "CMVECTOR_TYPE",
                            "CMVELOCITY_TYPE",
                            "CMWAVEFORM_TYPE",
                            "COLLECTOREMITTER_TYPE",
                            "CONSHINGE_TYPE",
                            "CONSPIN_TYPE",
                            "CONSPOINT_TYPE",
                            "CONSSLIDEHINGE_TYPE",
                            "CONSSPRING_TYPE",
                            "CONSTANT_TYPE",
                            "CONS_TYPE",
                            "CSVCACHE_TYPE",
                            "CURVEEMITTER_TYPE",
                            "CYLINDERLIGHT_TYPE",
                            "DEFAULTSHADER_TYPE",
                            "DEFERREDMESH_TYPE",
                            "DEFORMFOLDER_TYPE",
                            "DEFORMGROUP_TYPE",
                            "DEFORMMDD2_TYPE",
                            "DEFORMMDD_TYPE",
                            "DEFORM_BEND_TYPE",
                            "DEFORM_BEZIER_TYPE",
                            "DEFORM_CRVCONST_TYPE",
                            "DEFORM_LAG_TYPE",
                            "DEFORM_LATTICE_TYPE",
                            "DEFORM_MAGNET_TYPE",
                            "DEFORM_SLACK_TYPE",
                            "DEFORM_SPLINE_TYPE",
                            "DEFORM_TYPE",
                            "DEFORM_VORTEX_TYPE",
                            "DEFORM_WRAP_TYPE",
                            "DOMELIGHT_TYPE",
                            "DOTS_TYPE",
                            "DYNAMICCOLLIDER_TYPE",
                            "DYNAMICCOLLISIONEMITTER_TYPE",
                            "DYNAMICFLUID_TYPE",
                            "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                            "DYNAMIC_REPLICATORFILTER_TYPE",
                            "ENVIRONMENT_TYPE",
                            "ENVMATERIAL_TYPE",
                            "EXPRESSION_TYPE",
                            "FALLOFF_BEZIER_TYPE",
                            "FALLOFF_CAPSULE_TYPE",
                            "FALLOFF_LINEAR_TYPE",
                            "FALLOFF_RADIAL_TYPE",
                            "FALLOFF_SPLINE_TYPE",
                            "FALLOFF_TYPE",
                            "FLOCKINGOP_TYPE",
                            "FORCE_CURVE_TYPE",
                            "FORCE_DRAG_TYPE",
                            "FORCE_LINEAR_TYPE",
                            "FORCE_NEWTON_TYPE",
                            "FORCE_RADIAL_TYPE",
                            "FORCE_ROOT_TYPE",
                            "FORCE_TURBULENCE_TYPE",
                            "FORCE_VORTEX_TYPE",
                            "FORCE_WIND_TYPE",
                            "FURMATERIAL_TYPE",
                            "GASKETTOY_TYPE",
                            "GEAR_ITEM_TYPE",
                            "GENINFLUENCE_TYPE",
                            "GPLANE_TYPE",
                            "GRADIENT_TYPE",
                            "GRASS_ITEM_TYPE",
                            "GRID_TYPE",
                            "GROUPLOCATOR_TYPE",
                            "GROUP_TYPE",
                            "IKFULLBODY_TYPE",
                            "IKSOLVER_TYPE",
                            "IMAGEFOLDER_TYPE",
                            "IMAGEGROUP_TYPE",
                            "IMAGELAYER_TYPE",
                            "IMAGEMAP_TYPE",
                            "ITEMCHANNELPROBE_TYPE",
                            "ITEMINFLUENCE_TYPE",
                            "ITEMMODIFY_TYPE",
                            "ITEM_ROCK_TYPE",
                            "LIGHTMATERIAL_TYPE",
                            "LIGHT_TYPE",
                            "LOCATOR_TYPE",
                            "LOCDEFORM_TYPE",
                            "MAPMIX_TYPE",
                            "MASK_TYPE",
                            "MATCAPSHADER_TYPE",
                            "MATERIAL_CELEDGES_TYPE",
                            "MATERIAL_CELSHADER_TYPE",
                            "MATERIAL_HAIRMATERIAL_TYPE",
                            "MATERIAL_HALFTONE_TYPE",
                            "MATERIAL_IRIDESCENCE_TYPE",
                            "MATERIAL_SKINMATERIAL_TYPE",
                            "MATERIAL_THINFILM_TYPE",
                            "MEDIACLIP_TYPE",
                            "MESHINST_TYPE",
                            "MESH_TYPE",
                            "MORPHDEFORM_TYPE",
                            "MORPHMIX_TYPE",
                            "NOISE_TYPE",
                            "OCCLUSION_TYPE",
                            "PARTICLEOP_TYPE",
                            "PARTICLESIM_TYPE",
                            "PARTICLETERMINATOR_TYPE",
                            "PCLOUD_TYPE",
                            "PHOTOMETRYLIGHT_TYPE",
                            "PMOD_AUDIO_TYPE",
                            "PMOD_BASIC_TYPE",
                            "PMOD_EXPRESSION_TYPE",
                            "PMOD_GENERATOR_TYPE",
                            "PMOD_LOOKAT_TYPE",
                            "PMOD_RANDOM_TYPE",
                            "PMOD_SIEVE_TYPE",
                            "PMOD_STEP_TYPE",
                            "POINTLIGHT_TYPE",
                            "POLYRENDER_TYPE",
                            "PORTAL_TYPE",
                            "PROBEFALLOFF_TYPE",
                            "PROCESS_TYPE",
                            "PROJECTSHADER_TYPE",
                            "PROXY_TYPE",
                            "RADIALEMITTER_TYPE",
                            "REALPARTICLE_TYPE",
                            "RENDERBOOL_TYPE",
                            "RENDEROUTPUT_TYPE",
                            "RENDER_TYPE",
                            "REPLICATOR_TYPE",
                            "RIPPLES_TYPE",
                            "ROTATION_TYPE",
                            "RPC_MESH_TYPE",
                            "SCALE_TYPE",
                            "SCENE_SVC",
                            "SCENE_TYPE",
                            "SCHMNODE_TYPE",
                            "SEL_SVC",
                            "SHADERFOLDER_TYPE",
                            "SHADER_TYPE",
                            "SHEAR_TYPE",
                            "SOFTLAG_TYPE",
                            "SOLVER_TYPE",
                            "SOURCEEMITTER_TYPE",
                            "SPOTLIGHT_TYPE",
                            "SPRITE_TYPE",
                            "SUNLIGHT_TYPE",
                            "SURFACESCATTER_TYPE",
                            "SURFEMITTER_TYPE",
                            "SURFGENLOC_TYPE",
                            "SURFGEN_TYPE",
                            "TENSIONTEXTURE_TYPE",
                            "TEXTURELAYER_TYPE",
                            "TRANSFORM_TYPE",
                            "TRANSLATION_TYPE",
                            "TRISURF_TYPE",
                            "TXTRLOCATOR_TYPE",
                            "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                            "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                            "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                            "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                            "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                            "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                            "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                            "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                            "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                            "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                            "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_RING_RJJ_TYPE",
                            "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                            "VAL_NOISE_AGATE_RJJ_TYPE",
                            "VAL_NOISE_BOZO_RJJ_TYPE",
                            "VAL_NOISE_CRUDDY_RJJ_TYPE",
                            "VAL_NOISE_DENTED_RJJ_TYPE",
                            "VAL_NOISE_ETCHED_RJJ_TYPE",
                            "VAL_NOISE_FBM_RJJ_TYPE",
                            "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                            "VAL_NOISE_GABOR_TYPE",
                            "VAL_NOISE_GRANITE_RJJ_TYPE",
                            "VAL_NOISE_HYBRID_RJJ_TYPE",
                            "VAL_NOISE_LUMP_RJJ_TYPE",
                            "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                            "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                            "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                            "VAL_NOISE_PEBBLES_RJJ_TYPE",
                            "VAL_NOISE_POISSON_TYPE",
                            "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                            "VAL_NOISE_RIDGED_RJJ_TYPE",
                            "VAL_NOISE_SCAR_RJJ_TYPE",
                            "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                            "VAL_NOISE_STRATA_RJJ_TYPE",
                            "VAL_NOISE_STUCCO_RJJ_TYPE",
                            "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                            "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                            "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                            "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                            "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                            "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                            "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                            "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                            "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                            "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                            "VAL_ORGANIC_DIRT_RJJ_TYPE",
                            "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                            "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                            "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                            "VAL_ORGANIC_FIRE_RJJ_TYPE",
                            "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                            "VAL_ORGANIC_MINKY_RJJ_TYPE",
                            "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                            "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                            "VAL_ORGANIC_VEINS_RJJ_TYPE",
                            "VAL_ORGANIC_WIRES_RJJ_TYPE",
                            "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                            "VAL_PANELS_PEEL_RJJ_TYPE",
                            "VAL_PANELS_PLATES_RJJ_TYPE",
                            "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                            "VAL_PANELS_RIVETS_RJJ_TYPE",
                            "VAL_PANELS_RUST_RJJ_TYPE",
                            "VAL_PANELS_SMEAR_RJJ_TYPE",
                            "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                            "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                            "VAL_RPCTEXTURE_TYPE",
                            "VAL_RTCURVATURE_TYPE",
                            "VAL_SKINS_CAMO_RJJ_TYPE",
                            "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                            "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                            "VAL_SKINS_DISEASE_RJJ_TYPE",
                            "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                            "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                            "VAL_SKINS_LEATHER_RJJ_TYPE",
                            "VAL_SKINS_MONSTER_RJJ_TYPE",
                            "VAL_SKINS_PASTELLA_RJJ_TYPE",
                            "VAL_SKINS_PEENED_RJJ_TYPE",
                            "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                            "VAL_SPACE_BLAST_RJJ_TYPE",
                            "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                            "VAL_SPACE_FLARE_RJJ_TYPE",
                            "VAL_SPACE_GASGIANT_RJJ_TYPE",
                            "VAL_SPACE_GLINT_RJJ_TYPE",
                            "VAL_SPACE_HURRICANE_RJJ_TYPE",
                            "VAL_SPACE_NURNIES_RJJ_TYPE",
                            "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                            "VAL_SPACE_PLANET_RJJ_TYPE",
                            "VAL_SPACE_RINGS_RJJ_TYPE",
                            "VAL_SPACE_STARFIELD_RJJ_TYPE",
                            "VAL_SPACE_SWIRL_RJJ_TYPE",
                            "VAL_SPACE_TERRA_RJJ_TYPE",
                            "VAL_SPACE_WINDOWS_RJJ_TYPE",
                            "VAL_TILES_BASKET_RJJ_TYPE",
                            "VAL_TILES_BATHTILE_RJJ_TYPE",
                            "VAL_TILES_BRICKS_RJJ_TYPE",
                            "VAL_TILES_CHECKS_RJJ_TYPE",
                            "VAL_TILES_CORNERLESS_RJJ_TYPE",
                            "VAL_TILES_CUBES_RJJ_TYPE",
                            "VAL_TILES_DASHLINE_RJJ_TYPE",
                            "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                            "VAL_TILES_FISHSCALES_RJJ_TYPE",
                            "VAL_TILES_HEXTILE_RJJ_TYPE",
                            "VAL_TILES_LATTICE1_RJJ_TYPE",
                            "VAL_TILES_LATTICE2_RJJ_TYPE",
                            "VAL_TILES_LATTICE3_RJJ_TYPE",
                            "VAL_TILES_MOSAIC_RJJ_TYPE",
                            "VAL_TILES_OCTTILE_RJJ_TYPE",
                            "VAL_TILES_PARQUET_RJJ_TYPE",
                            "VAL_TILES_PAVING_RJJ_TYPE",
                            "VAL_TILES_PLAID_RJJ_TYPE",
                            "VAL_TILES_PLANKS_RJJ_TYPE",
                            "VAL_TILES_RIBS_RJJ_TYPE",
                            "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                            "VAL_TILES_SHINGLES_RJJ_TYPE",
                            "VAL_TILES_SPOTS_RJJ_TYPE",
                            "VAL_TILES_STAMPED_RJJ_TYPE",
                            "VAL_TILES_TACOS_RJJ_TYPE",
                            "VAL_TILES_TARTAN_RJJ_TYPE",
                            "VAL_TILES_TILER_RJJ_TYPE",
                            "VAL_TILES_TRICHECKS_RJJ_TYPE",
                            "VAL_TILES_TRIHEXES_RJJ_TYPE",
                            "VAL_TILES_TRITILE_RJJ_TYPE",
                            "VAL_TILES_WALL_RJJ_TYPE",
                            "VAL_WATER_DRIPDROP_RJJ_TYPE",
                            "VAL_WATER_RAIN_RJJ_TYPE",
                            "VAL_WATER_RIPPLES_RJJ_TYPE",
                            "VAL_WATER_SURF_RJJ_TYPE",
                            "VAL_WATER_WAVES_RJJ_TYPE",
                            "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                            "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                            "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                            "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                            "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                            "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                            "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                            "VAL_WIREFRAME_TYPE",
                            "VARIATIONTEXTURE_TYPE",
                            "VIDEOBLANK_TYPE",
                            "VIDEOCLIP_TYPE",
                            "VIDEOSEQUENCE_TYPE",
                            "VIDEOSTILL_TYPE",
                            "VMAPTEXTURE_TYPE",
                            "VOLUME_TYPE",
                            "VOXELITEM_TYPE",
                            "WEAVE_TYPE",
                            "WEIGHTCONTAINER_TYPE",
                            "WIDGET_TYPE",
                            "WOOD_TYPE",
                            "XFRMCORE_TYPE",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "integer type = ItemTypeLookup(string name)",
                        "name": "item_type",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "\n    Use this descriptor as a decorator in the same way that you would use\n    'property', but only apply it to module-level functions, and watch as your\n    module gains properties!\n    ",
                        "name": "mproperty",
                        "children": [
                            "deleter",
                            "doc",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    }
                ]
            },
            {
                "type": "function",
                "docstring": null,
                "name": "current",
                "children": [
                    {
                        "type": "NoneType",
                        "docstring": null,
                        "name": "func_closure"
                    },
                    {
                        "type": "code",
                        "docstring": "code(argcount, nlocals, stacksize, flags, codestring, constants, names,\n      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])\n\nCreate a code object.  Not for the faint of heart.",
                        "name": "func_code",
                        "children": [
                            "co_argcount",
                            "co_cellvars",
                            "co_code",
                            "co_consts",
                            "co_filename",
                            "co_firstlineno",
                            "co_flags",
                            "co_freevars",
                            "co_lnotab",
                            "co_name",
                            "co_names",
                            "co_nlocals",
                            "co_stacksize",
                            "co_varnames"
                        ]
                    },
                    {
                        "type": "NoneType",
                        "docstring": null,
                        "name": "func_defaults"
                    },
                    {
                        "type": "dict",
                        "docstring": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
                        "name": "func_dict",
                        "children": [
                            "clear",
                            "copy",
                            "fromkeys",
                            "get",
                            "has_key",
                            "items",
                            "iteritems",
                            "iterkeys",
                            "itervalues",
                            "keys",
                            "pop",
                            "popitem",
                            "setdefault",
                            "update",
                            "values",
                            "viewitems",
                            "viewkeys",
                            "viewvalues"
                        ]
                    },
                    {
                        "type": "NoneType",
                        "docstring": null,
                        "name": "func_doc"
                    },
                    {
                        "type": "dict",
                        "docstring": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
                        "name": "func_globals",
                        "children": [
                            "clear",
                            "copy",
                            "fromkeys",
                            "get",
                            "has_key",
                            "items",
                            "iteritems",
                            "iterkeys",
                            "itervalues",
                            "keys",
                            "pop",
                            "popitem",
                            "setdefault",
                            "update",
                            "values",
                            "viewitems",
                            "viewkeys",
                            "viewvalues"
                        ]
                    },
                    {
                        "type": "str",
                        "docstring": "str(object) -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.",
                        "name": "func_name",
                        "children": [
                            "_formatter_field_name_split",
                            "_formatter_parser",
                            "capitalize",
                            "center",
                            "count",
                            "decode",
                            "encode",
                            "endswith",
                            "expandtabs",
                            "find",
                            "format",
                            "index",
                            "isalnum",
                            "isalpha",
                            "isdigit",
                            "islower",
                            "isspace",
                            "istitle",
                            "isupper",
                            "join",
                            "ljust",
                            "lower",
                            "lstrip",
                            "partition",
                            "replace",
                            "rfind",
                            "rindex",
                            "rjust",
                            "rpartition",
                            "rsplit",
                            "rstrip",
                            "split",
                            "splitlines",
                            "startswith",
                            "strip",
                            "swapcase",
                            "title",
                            "translate",
                            "upper",
                            "zfill"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": "\n\n.. module:: modo.dialogs\n   :synopsis: Functions to display the various modo dialog types.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n",
                "name": "dialogs",
                "children": [
                    {
                        "type": "function",
                        "docstring": "A simple alert dialog. Type can be any one of 'info', 'warning' or 'error' depending on the value passed for\n    'dtype', defaults to 'info'\n\n    :param title: Dialog title.\n    :type title: string\n    :param dtype: Dialog type. One of 'info', 'warning', 'error'. Defaults to 'info'\n    :type dtype: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "alert",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "cmd",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "Command",
                        "docstring": null,
                        "name": "cmdSvc",
                        "children": [
                            "AliasCreate",
                            "AliasDelete",
                            "ArgsAsString",
                            "ArgsAsStringLen",
                            "BlockBegin",
                            "BlockEnd",
                            "CommandByIndex",
                            "CommandCount",
                            "CreateQueryObject",
                            "CurrentExecDepth",
                            "ExecEntryAsArgString",
                            "ExecEntryName",
                            "ExecEntryType",
                            "ExecEntryUserName",
                            "ExecFlagsAsPrefixString",
                            "ExecuteArgString",
                            "ExecuteArgString2",
                            "ExecuteAttribObject",
                            "ExecuteAttribObject2",
                            "ExecuteBooleanArgString",
                            "ExecuteBooleanArgString2",
                            "ExecuteImplicitScript",
                            "ExecuteImplicitScript2",
                            "ExecuteSpecial",
                            "ExecuteToggleArgString",
                            "ExecuteToggleArgString2",
                            "GetNameSep",
                            "GetToggleArgState",
                            "IsAliased",
                            "IsBooleanArgString",
                            "IsContainer",
                            "IsGlobalInteractionOK",
                            "IsImplicitScript",
                            "IsToggleArgString",
                            "Lookup",
                            "MasterStatus",
                            "ParseArgString",
                            "ParseAttribObject",
                            "PostModeBegin",
                            "PostModeEnd",
                            "PostModeRestart",
                            "PostModeState",
                            "ProcessStringFlags",
                            "Proto",
                            "ProtoFromCommand",
                            "Query",
                            "QueryArgString",
                            "RefireBegin",
                            "RefireBlock",
                            "RefireCmd",
                            "RefireEnd",
                            "RefireState",
                            "SandboxAddObject",
                            "SandboxBegin",
                            "SandboxEnd",
                            "SandboxFlags",
                            "SandboxObjectByCommand",
                            "SandboxObjectByIndex",
                            "SandboxObjectCount",
                            "SandboxObjectLookup",
                            "SandboxState",
                            "ScriptQuery",
                            "SetIsGlobalInteractionOK",
                            "SetNameSep",
                            "SetToggleArgState",
                            "Spawn",
                            "SpawnFromCommand",
                            "SpawnFromString",
                            "SpawnImplicitScript",
                            "SpawnUnaliased",
                            "Usage"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Displays a file open or file save dialog for one or more custom file types.\n\n    :returns: A single file path for \"fileSave' and 'fileOpen' dialogs, a list of file paths for 'fileOpenMulti'\n        dialogs or 'None' if dialog is cancelled by the user.\n    :rtype: string or None\n    :param dtype: Dialog type, string, one of 'fileOpen', 'fileOpenMulti' or 'fileSave'.\n    :type dtype: string.\n    :param title: Dialog title.\n    :type title: string.\n    :param names: List or tuple of file format type names. This is an internal name for use by  the script, and can be\n        read out after the dialog is dismissed by  querying  dialog.fileSaveFormat.\n    :type names: list or tuple of strings.\n    :param unames: List of user names that will be displayed in the dialog for each of the types specified in ftype.\n    :type unames: list or tuple of strings.\n    :param patterns: Optional collection of semicolon-delimited string lists of file extensions that the particular\n        file format supports. Only used for fileOpen dialogs. Each extension must include a leading asterisk and period\n        for the filtering to work properly, such as '*.jpg;*.jpeg'.\n    :type patterns: list or tuple of strings.\n    :param ext: Optional collection of save extensions, one for each of the types specified in ftype. each ext is a\n        single file extension that will automatically be appended to the end of the filename selected in a save dialog.\n        The period should not be entered, just the extension such as lwo, tga  or txt.\n    :type ext: list or tuple of strings.\n    :param path: Optional default path to open the dialog at.\n    :type path: string.\n\n    File open examples::\n\n        # Single file format\n        inpath = modo.dialogs.customFile('fileOpen', 'Open File', ('text',), ('Text File',), ('*.txt',))\n\n        # Multiple file formats\n        inpath = modo.dialogs.customFile('fileOpen', 'Open File', ('text', 'html',),\n                                   ('Text File', 'HTML FIle'), ('*.txt', '*.html',))\n\n        # open multiple files\n        inpaths = modo.dialogs.customFile('fileOpenMulti', 'Open File', ('text',), ('Text File',), ('*.txt',))\n\n    File save examples::\n\n        # Single file format\n        outpath = modo.dialogs.customFile('fileSave', 'Save File', ('text',), ('Text File',), ext=('txt',))\n\n        #Multiple file formats\n        outpath = modo.dialogs.customFile('fileSave', 'Save File', ('text', 'html',),\n                                    ('Text File', 'HTML FIle'), ext=('txt', 'html',))\n\n    ",
                        "name": "customFile",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "StdDialog",
                        "docstring": null,
                        "name": "dialogSvc",
                        "children": [
                            "AsyncMonitorAllocate",
                            "AsyncMonitorLookup",
                            "AsyncMonitorRelease",
                            "AsyncMonitorSubAllocate",
                            "AsyncMonitorSystemByIndex",
                            "AsyncMonitorSystemCount",
                            "AsyncMonitorSystemLookup",
                            "FileDialog",
                            "MessageAllocate",
                            "MessageOpen",
                            "MonitorAllocate",
                            "MonitorRelease",
                            "ScriptQuery"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": " Display a directory dialog.\n\n    :returns: file path or 'None' if dialog is cancelled by the user.\n    :rtype: string or None\n    :param title: Dialog title string.\n    :type title: string\n    :param path: Optional default path to open the dialog at.\n    :type path: string\n\n    ",
                        "name": "dirBrowse",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": " Display a dialog to choose a file or files for opening.\n\n    :returns: Single file path if 'multi' is False, list of files paths if 'multi' is true or 'None' if the dialog is\n        cancelled by the user.\n    :rtype: string or None\n    :param ftype: File format type to filter on or None to show all files.\n    :type ftype: string\n    :param title: Dialog title.\n    :type title: str\n    :param multi: Enable multi-select of files in the dialog.\n    :type multi: Boolean\n    :param path: Optional path to open the dialog at.\n    :type path: str\n\n    Open dialogs use a file type to filter the load dialog. A file type is the class of data to be loaded or saved,\n    such as an image or an object and should be one of the known file types, such as text, script, config,\n    macro, image, and so on. Also, the name of any specific loader plug-in can also be used, such as $LWO. If no\n    file type is set, all files will be shown.\n\n    ",
                        "name": "fileOpen",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": " Display a dialog to choose a filename to save to.\n\n    :returns: file path or 'None' if dialog is cancelled by the user.\n    :rtype: string or None\n    :param ftype: File type to save as.\n    :type ftype: string\n    :param fformat: Default file format to save as\n    :type fformat: string\n    :param fspec: How the file format is specified, either by 'extension' for file extension or 'format' for file format\n        name. Defaults to 'extension'.\n    :type fspec: string\n    :param title: Dialog title.\n    :type title: string\n    :param path: Optional default path to open the dialog at.\n    :type path: string\n\n    A save dialog is identical to an open dialog, but adds a save format to select a specific default file format\n    within the file type to save as. This format will be selected by default when the dialog opens The file\n    format can be set either by its default extension, which is the default behavior, or by the file format's\n    internal name.\n\n    ",
                        "name": "fileSave",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "bool",
                        "docstring": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
                        "name": "globalInterpreter",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "lxifc",
                        "children": [
                            "ActionListener",
                            "AnimListener",
                            "AppActiveListener",
                            "AsyncMonitorInfo",
                            "Attributes",
                            "AttributesUI",
                            "Audio",
                            "AudioWrite",
                            "Buffer",
                            "ChannelDest",
                            "ChannelModItem",
                            "ChannelUI",
                            "CmdSysListener",
                            "Color",
                            "ColorDialog",
                            "ColorMapping",
                            "ColorMappingModule",
                            "ColorModel",
                            "ColorPreDest",
                            "Command",
                            "CommandEvent",
                            "CompShader",
                            "Curve",
                            "CurveGroup",
                            "CustomMaterial",
                            "CustomView",
                            "DTBGroupSortOverride",
                            "Deformation",
                            "Deformer",
                            "DirCacheEntry",
                            "DirCacheFileMetrics",
                            "DirEntryThumbAsync",
                            "Drop",
                            "EvalModifier",
                            "Factory",
                            "Falloff",
                            "FileDialogClient",
                            "Force",
                            "FrameBuffer",
                            "GradientFilter",
                            "GroupDest",
                            "GroupMemberChanDest",
                            "GroupMemberItemDest",
                            "Image",
                            "ImageBlockCodec",
                            "ImageFilter",
                            "ImageFilterMetrics",
                            "ImageLevelSample",
                            "ImageMonitor",
                            "ImageProcessingListener",
                            "ImageSegment",
                            "ImageWrite",
                            "Instanceable",
                            "ItemInfluence",
                            "LayeredImage",
                            "LayeredImageWrite",
                            "LineExecution",
                            "LineInterpreter",
                            "ListenerPort",
                            "Loader",
                            "LoaderInfo",
                            "LocatorDest",
                            "LogInfoBlock",
                            "LogListener",
                            "MeshDest",
                            "MeshFilter",
                            "MeshFilterBBox",
                            "MeshInfluence",
                            "MeshLayerPreDest",
                            "MeshListener",
                            "Message",
                            "Modifier",
                            "Module",
                            "Monitor",
                            "Movie",
                            "NavigationListener",
                            "NeedContext",
                            "Notifier",
                            "Package",
                            "PackageInstance",
                            "PacketEffect",
                            "ParticleCoOperator",
                            "ParticleFilter",
                            "ParticleItem",
                            "PersistenceClient",
                            "PointCacheItem",
                            "PresetMetrics",
                            "PresetType",
                            "PreviewNotifier",
                            "Profile1DPreDest",
                            "Profile2DPreDest",
                            "ProjDirOverride",
                            "Raymarch",
                            "RenderCacheListener",
                            "RenderJob",
                            "RenderProgressListener",
                            "Saver",
                            "SceneItemListener",
                            "SceneItemPreDest",
                            "SchemaDest",
                            "SchematicConnection",
                            "Script",
                            "ScriptLineEvent",
                            "ScriptQuery",
                            "SelectionListener",
                            "SelectionType",
                            "ServiceExtension",
                            "SessionListener",
                            "ShaderPreDest",
                            "SharedWork",
                            "SimulationModifier",
                            "StackFilter",
                            "StreamIO",
                            "StringConversion",
                            "StringConversionNice",
                            "StringTag",
                            "Subdivision",
                            "Surface",
                            "SurfaceBin",
                            "SurfaceItem",
                            "TableauInstance",
                            "TableauLight",
                            "TableauListener",
                            "TableauProxy",
                            "TableauShader",
                            "TableauSource",
                            "TableauSurface",
                            "TableauVolume",
                            "TagDescription",
                            "TextScriptInterpreter",
                            "TextureEffect",
                            "ThreadJob",
                            "ThreadRangeWorker",
                            "ThreadSlotClient",
                            "TileImage",
                            "Tool",
                            "ToolModel",
                            "Tree",
                            "TreeListener",
                            "TreeView",
                            "TriangleSoup",
                            "UIValueHints",
                            "Undo",
                            "UserValueListener",
                            "Value",
                            "ValueArray",
                            "ValueMath",
                            "ValueTexture",
                            "VectorPacket",
                            "VectorType",
                            "VideoClipItem",
                            "View3D",
                            "ViewItem3D",
                            "VirtualDevice",
                            "Visitor",
                            "Voxel",
                            "Waterfall",
                            "WeightMapDeformerItem",
                            "WorkList",
                            "lx"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "A two button OK/Cancel message dialog.\n\n    :returns: 'ok' or 'cancel'\n    :rtype: string\n    :param title: Dialog title.\n    :type title: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "okCancel",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "A Save OK dialog.\n\n    :returns: 'save', or 'cancel'\n    :rtype: string\n    :param title: Dialog title.\n    :type title: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "saveOK",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "A three button Yes/Yes to all/Cancel dialog.\n\n    :returns: 'yes', 'yesall' or 'cancel'\n    :rtype: string\n    :param title: Dialog title.\n    :type title: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "yesAllCancel",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "A two button Yes/No message dialog.\n\n    :returns: 'yes' or 'no'\n    :rtype: string\n    :param title: Dialog title.\n    :type title: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "yesNo",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "A four option Yes/Yes to all/No/No to all dialog.\n\n    :returns: 'yes', 'yestoall', 'no', 'notoall' or 'cancel'\n    :rtype: string\n    :param title: Dialog title.\n    :type title: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "yesNoAll",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "A three button Yes/No/Cancel message dialog.\n\n    :returns: 'yes', or 'cancel'\n    :rtype: string\n    :param title: Dialog title.\n    :type title: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "yesNoCancel",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "A three option Yes/No/No to all dialog.\n\n    :returns: 'yes', 'noall' or 'cancel'\n    :rtype: string\n    :param title: Dialog title.\n    :type title: string\n    :param message: Dialog message.\n    :type message: string\n\n    ",
                        "name": "yesnoToAll",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    }
                ]
            },
            {
                "type": "function",
                "docstring": "Test whether FILENAME matches PATTERN.\n\n    Patterns are Unix shell style:\n\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\n    ",
                "name": "fnmatch",
                "children": [
                    {
                        "type": "NoneType",
                        "docstring": null,
                        "name": "func_closure"
                    },
                    {
                        "type": "code",
                        "docstring": "code(argcount, nlocals, stacksize, flags, codestring, constants, names,\n      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])\n\nCreate a code object.  Not for the faint of heart.",
                        "name": "func_code",
                        "children": [
                            "co_argcount",
                            "co_cellvars",
                            "co_code",
                            "co_consts",
                            "co_filename",
                            "co_firstlineno",
                            "co_flags",
                            "co_freevars",
                            "co_lnotab",
                            "co_name",
                            "co_names",
                            "co_nlocals",
                            "co_stacksize",
                            "co_varnames"
                        ]
                    },
                    {
                        "type": "NoneType",
                        "docstring": null,
                        "name": "func_defaults"
                    },
                    {
                        "type": "dict",
                        "docstring": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
                        "name": "func_dict",
                        "children": [
                            "clear",
                            "copy",
                            "fromkeys",
                            "get",
                            "has_key",
                            "items",
                            "iteritems",
                            "iterkeys",
                            "itervalues",
                            "keys",
                            "pop",
                            "popitem",
                            "setdefault",
                            "update",
                            "values",
                            "viewitems",
                            "viewkeys",
                            "viewvalues"
                        ]
                    },
                    {
                        "type": "str",
                        "docstring": "str(object) -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.",
                        "name": "func_doc",
                        "children": [
                            "_formatter_field_name_split",
                            "_formatter_parser",
                            "capitalize",
                            "center",
                            "count",
                            "decode",
                            "encode",
                            "endswith",
                            "expandtabs",
                            "find",
                            "format",
                            "index",
                            "isalnum",
                            "isalpha",
                            "isdigit",
                            "islower",
                            "isspace",
                            "istitle",
                            "isupper",
                            "join",
                            "ljust",
                            "lower",
                            "lstrip",
                            "partition",
                            "replace",
                            "rfind",
                            "rindex",
                            "rjust",
                            "rpartition",
                            "rsplit",
                            "rstrip",
                            "split",
                            "splitlines",
                            "startswith",
                            "strip",
                            "swapcase",
                            "title",
                            "translate",
                            "upper",
                            "zfill"
                        ]
                    },
                    {
                        "type": "dict",
                        "docstring": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
                        "name": "func_globals",
                        "children": [
                            "clear",
                            "copy",
                            "fromkeys",
                            "get",
                            "has_key",
                            "items",
                            "iteritems",
                            "iterkeys",
                            "itervalues",
                            "keys",
                            "pop",
                            "popitem",
                            "setdefault",
                            "update",
                            "values",
                            "viewitems",
                            "viewkeys",
                            "viewvalues"
                        ]
                    },
                    {
                        "type": "str",
                        "docstring": "str(object) -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.",
                        "name": "func_name",
                        "children": [
                            "_formatter_field_name_split",
                            "_formatter_parser",
                            "capitalize",
                            "center",
                            "count",
                            "decode",
                            "encode",
                            "endswith",
                            "expandtabs",
                            "find",
                            "format",
                            "index",
                            "isalnum",
                            "isalpha",
                            "isdigit",
                            "islower",
                            "isspace",
                            "istitle",
                            "isupper",
                            "join",
                            "ljust",
                            "lower",
                            "lstrip",
                            "partition",
                            "replace",
                            "rfind",
                            "rindex",
                            "rjust",
                            "rpartition",
                            "rsplit",
                            "rstrip",
                            "split",
                            "splitlines",
                            "startswith",
                            "strip",
                            "swapcase",
                            "title",
                            "translate",
                            "upper",
                            "zfill"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": "\n\n.. module:: modo.item\n   :synopsis: Item classes.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n",
                "name": "item",
                "children": [
                    {
                        "type": "type",
                        "docstring": "Action Clip and Render pass item.\n\n    :param item: either an item of type 'actionclip' or an item name/ID to lookup.\n    :type item: an instance of modo.item.Item\n\n    ",
                        "name": "ActionClip",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "active",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "enabled",
                            "getTags",
                            "getValue",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "passGroup",
                            "readTag",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "setValue",
                            "superType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Wrapper class for actor groups.\n\n    ",
                        "name": "Actor",
                        "children": [
                            "_Actor__addClip",
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "actions",
                            "addAction",
                            "addChannel",
                            "addItems",
                            "addPose",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "currentAction",
                            "deformers",
                            "deselect",
                            "getItemAt",
                            "getItemIndex",
                            "getTags",
                            "groupChannelCount",
                            "groupChannels",
                            "groupGetChannelAt",
                            "groupRemoveChannelAt",
                            "hasChannel",
                            "hasItem",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemCount",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "items",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pose",
                            "poses",
                            "readTag",
                            "removeChannel",
                            "removeItemAt",
                            "removeItems",
                            "scene",
                            "select",
                            "selected",
                            "setItemIndex",
                            "setParent",
                            "setTag",
                            "superType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Area light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Area Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Area Light item.\n\n    :param light: Optional area light item object (type lx.symbol.sITYPE_AREALIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid area light item selected.\n    :raises TypeError: if the item passed as an argument isn't either an area light item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "AreaLight",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Camera item class.\n\n    Takes an optional 'camera' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'camera' or an item name or ID to look up. If no camera item is supplied as an argument an attempt will be made to\n    wrap the most recently selected camera.\n\n    :param camera: Optional camera item object (type lx.symbol.sITYPE_CAMERA) or string (item name or ID) to look up.\n    :type camera: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid camera item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'camera'\n        or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the camera argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "Camera",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Channel",
                        "children": [
                            "addLink",
                            "connectInput",
                            "deleteLink",
                            "disconnectInput",
                            "envelope",
                            "evalType",
                            "forward",
                            "fwdCount",
                            "fwdLinked",
                            "get",
                            "graph",
                            "index",
                            "isAnimated",
                            "item",
                            "name",
                            "revCount",
                            "revLinked",
                            "reverse",
                            "set",
                            "setLink",
                            "storageType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "ChannelRead",
                        "children": [
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Wrapper to allow setting and reading all three channels on a vector 'channel' at once\n\n    :param basestring channelName: The channel name. eg 'diffCol'\n    :param modo.item.Item item: The item the channel belongs to.\n\n    :raises: LookUpError if no respective channel of the given name was found\n    ",
                        "name": "ChannelTriple",
                        "children": [
                            "get",
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "ChannelWrite",
                        "children": [
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Cylinder light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Cylinder Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Cylinder Light item.\n\n    :param light: Optional Cylinder light item object (type lx.symbol.sITYPE_CYLINDERLIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid cylinder light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a cylinder light or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "CylinderLight",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Deformer",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "meshes",
                            "name",
                            "numMeshes",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "readTag",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "svc",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "DeformerGroup",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectInput",
                            "connectedGroups",
                            "createJointLocator",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "mesh",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "readTag",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Directional light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Directional Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Directional Light item.\n\n    :param light: Optional Directional light item object (type lx.symbol.sITYPE_SUNLIGHT)  or string (item\n        name or ID) to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid directional light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Directional light item or an item name or ID\n        string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "DirectionalLight",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Dome light item class\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Dome Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Dome Light item.\n\n    :param light: Optional Dome light item object (type lx.symbol.sITYPE_DOMELIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Dome light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Dome light item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "DomeLight",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Envelope",
                        "children": [
                            "behavior",
                            "clear",
                            "interpolation",
                            "isInt",
                            "keyframes",
                            "postBehaviour",
                            "preBehaviour",
                            "value"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "GeneralInfluenceDeformer",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectInput",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "mapName",
                            "meshes",
                            "name",
                            "numMeshes",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "readTag",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "svc",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "A group item.\n\n    Takes an optional 'groupItem' argument which can be either an item object (lx.object.Item or lxu.object.Item) of\n    type 'Group' or an item name or ID to look up. If no groupItem is supplied as an argument an attempt will be\n    made to wrap the most recently selected Area Light item.\n\n    'gtype' can be any one of the built in group types by passing one of the built in type strings ('assembly', 'actor',\n    'render', 'keyset', 'chanset', 'preset', 'shader'), an empty string for a general group or any other string to\n    create a custom group type.\n\n    :param groupItem: an optional group item (type lx.symbol.sITYPE_GROUP) or an item name/ID to look up.\n    :type groupItem: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :param gtype: the group type.\n    :type gtype: basestring\n    :raises TypeError: if an item is supplied as the groupItem argument but is not of type lx.symbol.sITYPE_GROUP.\n    :raises ValueError: if no groupItem argument is supplied and no valid group item is selected in the scene.\n    :raises LookupError: if a name or ID is supplied as the groupItem argument but no item with that name/ID can\n        be found.\n\n    Note that the children() method derived from the Item object will only list child groups.\n    To iterate the contained items, use the method items.\n\n    ",
                        "name": "Group",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "addChannel",
                            "addItems",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getItemAt",
                            "getItemIndex",
                            "getTags",
                            "groupChannelCount",
                            "groupChannels",
                            "groupGetChannelAt",
                            "groupRemoveChannelAt",
                            "hasChannel",
                            "hasItem",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemCount",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "items",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "readTag",
                            "removeChannel",
                            "removeItemAt",
                            "removeItems",
                            "scene",
                            "select",
                            "selected",
                            "setItemIndex",
                            "setParent",
                            "setTag",
                            "superType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Group locator item class.\n\n    Takes an optional 'grploc' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Group locator' or an item name or ID to look up. If no grploc item is supplied as an argument an attempt will be\n    made to wrap the most recently selected group locator item.\n\n    :param grploc: Optional group locator item object (type lx.symbol.sITYPE_GROUPLOCATOR) or string (item name or ID)\n        to look up.\n    :type grploc: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid group locator item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'group\n        locator' or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the grploc argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "GroupLocator",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Base item class\n\n    Takes an optional lx.object.Item object as an argument. If none is provided (the default) then the most\n    recently selected item is used.\n\n    :param item: Optional item object to wrap.\n    :type item: an instance of lx.object.Item or lxu.object.item\n    :raises ValueError: if no item is passed as an argument and no valid items are currently selected.\n    :raises LookupError: if a string (item name or ID) is passed as the item argument and no item with that name or ID\n        cane be found in the scene.\n    :raises TypeError: if the object passed as the 'item' argument isn't an instance of lx.object.Item.\n\n    ",
                        "name": "Item",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "readTag",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Utility container class for quick access to ItemGraph compatible graphs\n\n    :param item:                            Item to look up graph for\n    :param ls.symbol.sGRAPH_* graphType:    Graph to look up. Common ones are 'parent', 'deformers', 'groups', 'chanMods'\n    :param bool reverse:                    Indices traverse the graph forwards if false or reverse if true\n    ",
                        "name": "ItemGraph",
                        "children": [
                            "_ItemGraph__toType",
                            "connectInput",
                            "connectedItems",
                            "deleteLink",
                            "disconnectInput",
                            "forward",
                            "item",
                            "reverse",
                            "setLink",
                            "setReverse",
                            "type"
                        ]
                    },
                    {
                        "type": "ABCMeta",
                        "docstring": null,
                        "name": "Iterable",
                        "children": [
                            "_abc_cache",
                            "_abc_negative_cache",
                            "_abc_negative_cache_version",
                            "_abc_registry"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Joint",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "Keyframes",
                        "children": [
                            "_indexFromTime",
                            "add",
                            "delete",
                            "first",
                            "getSlopeType",
                            "last",
                            "next",
                            "numKeys",
                            "prev",
                            "setIndex",
                            "setSlopeType",
                            "time",
                            "value"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Base Light item class.\n\n    Each light item encapsulates both an lx.object.Item object (via inheritance from the Item class) of a specific modo\n    light type and a corresponding lx.object.Item of type 'lightMaterial' as a :class:`LightMaterial` object via the\n    light's material property.\n\n    example::\n\n        # to set the diffuse color on the currently selected spotlight\n        spotlight = modo.SpotLight()\n        spotlight.material.ch_diffCol.set((0.7, 0.1, 0.5))\n\n    .. note::\n\n        Although \"Light\" isn't technically a base class since, like all other classes in modo.item, it inherits from\n        \"Item\", it does encapsulate modo's 'Light\" supertype and can be treated as a kind of 'pseudo' base class for\n        all modo's light types. As such it should not be instantiated directly, create one of the specific light types\n        instead.\n\n    |\n\n    :param light: Optional light item object to wrap. Must be a specific type of light, not the light supertype.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid light item selected.\n    :raises TypeError: if the item passed as an argument isn't an instance of a specific subclass of Light.\n\n    ",
                        "name": "Light",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Wraps a light material texture layer item.\n\n        :param material: the light material item to be wrapped.\n        :type material: lx.object.Item of type lx.symbol.sITYPE_LIGHTMATERIAL\n\n        ",
                        "name": "LightMaterial",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "light",
                            "lightCol",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "readTag",
                            "scatteringCol",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "shadCol",
                            "superType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Locator item class.\n\n    Takes an optional 'locator' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'locator' or an item name or ID to look up. If no locator item is supplied as an argument an attempt will be made to\n    wrap the most recently selected locator item.\n\n    :param locator: Optional locator item object (type lx.symbol.sITYPE_LOCATOR) or string (item name or ID) to look up.\n    :type locator: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid locator item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'locator'\n        or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the locator argument but no item with that name/ID can\n        be found.\n\n    Hint: Items of other locator derived types should be casted as LocatorSuperType, casting to this class will fail.\n    ",
                        "name": "Locator",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "The LocatorSuperType reflects all items that can be seen and transformed in the 3d view.\n    Locators have transform items that hold the respective transform channels, such as position and rotation.\n\n    ",
                        "name": "LocatorSuperType",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Matrix class ",
                        "name": "Matrix4",
                        "children": [
                            "_MatrixToEuler",
                            "_getIdentity",
                            "_matrix_calcRotation",
                            "_matrix_vectorMultiply",
                            "asEuler",
                            "asRotateMatrix",
                            "copy",
                            "determinant",
                            "fromEuler",
                            "invert",
                            "inverted",
                            "position",
                            "scale",
                            "set",
                            "setIdentity",
                            "transpose",
                            "transposed"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Mesh item class.\n\n    Takes an optional 'mesh' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'mesh' or an item name or ID to look up. If no mesh item is supplied as an argument an attempt will be made to\n    wrap the most recently selected mesh layer.\n\n    :param mesh: Optional mesh item object (type lx.symbol.sITYPE_MESH) or string (item name or ID) to look up.\n    :type mesh: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid mesh item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'mesh'\n        or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the mesh argument but no item with that name/ID can\n        be found.\n\n    The mesh geometry can be accessed by the :class:`geometry<modo.meshgeometry.MeshGeometry>` attribute.\n\n    .. py:attribute:: geometry\n\n        :rtype: :class:`MeshGeometry<modo.meshgeometry.MeshGeometry>`\n\n\n    ",
                        "name": "Mesh",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "geometry",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": " A class wrapped around lx.object.Mesh that provides access to geometry of a given Mesh Item\n\n    :param item: Input item\n    :type item: type lx.object.Item\n    :param mode: Mode in which to access the mesh. Possible values: \"write\", \"read\", \"deformed\"\n    :type mode: string\n    :return: Instance of MeshGeometry\n\n    :raises LookupError: If item was passed as string and could not be found in the scene\n    :raises TypeError: If the passed item is not of type lx.object.Item\n    :raises TypeError: If the passed item is not compatible with the mesh type\n\n\n    example::\n\n        scene = modo.scene.current()\n\n        # Get the selected mesh\n        for mesh in scene.selectedByType(\"mesh\")[:1]:\n\n            # Print the number of vertices\n            print len(mesh.geometry.vertices)\n\n            # Print point position by index\n            print mesh.geometry.vertices[4]\n\n            # Set point position by index\n            mesh.geometry.vertices[4] = (1,2,3)\n\n            # Iterate all vertices and move them by 0.1 in x\n            for point in mesh.geometry.vertices:\n                point += (0.1, 0, 0)\n\n            # Update to see mesh changes\n            mesh.geometry.setMeshEdits()\n\n    .. py:attribute:: vertices\n\n        :rtype: :class:`MeshVertices<MeshVertices>`\n\n    .. py:attribute:: edges\n\n        :rtype: :class:`MeshEdges<MeshEdges>`\n\n    .. py:attribute:: polygons\n\n        :rtype: :class:`MeshPolygons<MeshPolygons>`\n\n    .. py:attribute:: vmaps\n\n        :rtype: :class:`MeshMaps<MeshMaps>`\n\n    ",
                        "name": "MeshGeometry",
                        "children": [
                            "_SEL_SVC",
                            "_UNDO_SVC",
                            "_item",
                            "accessMode",
                            "boundingBox",
                            "getMeshCenter",
                            "internalMesh",
                            "numEdges",
                            "numPolygons",
                            "numVertices",
                            "setAccessMode",
                            "setMeshEdits"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Photometric (ies) light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Photometric Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Photometric Light item.\n\n    :param light: Optional Photometric light item object (type lx.symbol.sITYPE_PHOTOMETRYLIGHT)  or string (item\n        name or ID) to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Photometric light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Photometric light item or an item name or ID\n        string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "PhotometricLight",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Point light item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Point Light' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Point Light item.\n\n    :param light: Optional Point light item object (type lx.symbol.sITYPE_POINTLIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Point light item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Point light item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "PointLight",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Portal item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Portal' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Portal item.\n\n    :param light: Optional Portal item object (type 'portal')  or string (item name or ID) to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Portal item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Portal item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "Portal",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Render pass group\n\n    :param groupItem: either a group item or an item name/ID to look up.\n    :type groupItem: lx.object.item or modo.item.Item\n    :raises TypeError: if the item is not a 'Group\" item.\n    :raises LookupError: if a name or ID is supplied as the groupItem argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "RenderPassGroup",
                        "children": [
                            "_Item__descendants",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "addChannel",
                            "addItems",
                            "addPass",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getItemAt",
                            "getItemIndex",
                            "getTags",
                            "groupChannelCount",
                            "groupChannels",
                            "groupGetChannelAt",
                            "groupRemoveChannelAt",
                            "hasChannel",
                            "hasItem",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemCount",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "items",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "passes",
                            "readTag",
                            "removeChannel",
                            "removeItemAt",
                            "removeItems",
                            "scene",
                            "select",
                            "selected",
                            "setItemIndex",
                            "setParent",
                            "setTag",
                            "superType",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Spotlight item class.\n\n    Takes an optional 'light' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Spotlight' or an item name or ID to look up. If no light item is supplied as an argument an attempt will be\n    made to wrap the most recently selected Spotlight item.\n\n    :param light: Optional Spotlight item object (type lx.symbol.sITYPE_SPOTLIGHT)  or string (item name or ID)\n        to look up.\n    :type light: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid Spotlight item selected.\n    :raises TypeError: if the item passed as an argument isn't either a Spotlight item or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the light argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "SpotLight",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "material",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Texture locator item class.\n\n    Takes an optional 'texloc' argument which can be either an item object (lx.object.Item or lxu.object.Item) of type\n    'Texture locator' or an item name or ID to look up. If no texloc item is supplied as an argument an attempt will be\n    made to wrap the most recently selected group locator item.\n\n    :param texloc: Optional texture locator item object (type lx.symbol.sITYPE_TEXTURELOC) or string (item name or ID)\n        to look up.\n    :type texloc: an instance of lx.object.Item, lxu.object.item or modo.item.Item\n    :raises ValueError: if no valid texture locator item selected.\n    :raises TypeError: if the item passed as an argument isn't either an instance of lx.object.Item of type 'texture\n        locator' or an item name or ID string.\n    :raises LookupError: if a name or ID is supplied as the texloc argument but no item with that name/ID can\n        be found.\n\n    ",
                        "name": "TextureLocator",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Contains a group of animatable transform channels of a locator object.\n\n    It has convenience functions for access of the locator's position, rotation and scale.\n\n    examples::\n\n        # We retrieve two meshes from the current scene by name, assuming they exist\n        cube = modo.Mesh('Cube')\n        sphere = modo.Mesh('Sphere')\n\n        # Set rotation values\n        cube.rotation.set(10, 20, 30, degrees=True)\n\n        # Link the position.x channel of the sphere to to the position.x channel of the cube\n        cube.position.y.setLink(0, sphere.position.x, 0)\n\n        # Set position values to zero\n        cube.position.clear()\n\n        # Insert keyframe for rotation on frame 21\n        frame = lx.service.Value().FrameToTime(21)\n        cube.rotation.insertKey(time=frame)\n\n    ",
                        "name": "TransformItem",
                        "children": [
                            "_Item__descendants",
                            "_TransformItem__rotationType",
                            "_TransformItem__scaleType",
                            "_TransformItem__toDegrees",
                            "_TransformItem__transformType",
                            "_TransformItem__translationType",
                            "_TransformItem__types",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "clear",
                            "connectedGroups",
                            "deformers",
                            "deselect",
                            "get",
                            "getTags",
                            "hasTag",
                            "id",
                            "index",
                            "insertKey",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "readTag",
                            "removeKey",
                            "scene",
                            "select",
                            "selected",
                            "set",
                            "setParent",
                            "setTag",
                            "superType",
                            "type",
                            "x",
                            "y",
                            "z"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Container class for the stacked transform items of a Locator object.\n\n    Transform items contain channels for either position, rotation or scale.\n    The order of how they are processed can be changed and new transform items can be inserted or existing ones deleted.\n\n    example::\n\n        scene = modo.scene.current()\n\n        # Grab first selected object\n        for item in scene.selected[:1]:\n\n            # Print the amount of transform items\n            print len(item.transforms)\n\n            # Add a new position transform item\n            position = item.transforms.insert('position', values=(1,0,0), name='New_Position')\n\n            # Add a new scale transform item\n            scale = item.transforms.insert('scale', values=(2,2,2), name='Scaled')\n\n            # Swap the indices of the first two transform items\n            item.transforms.reposition(0,1)\n\n            # Delete\n            item.transforms.delete(scale)\n\n            # Clear values of all transforms\n            for i in item.transforms:\n                i.clear()\n\n    ",
                        "name": "TransformItems",
                        "children": [
                            "_Item__descendants",
                            "_LocatorSuperType__getTransformitem",
                            "_getChannelValuesAsDict",
                            "_item",
                            "_setChannelValuesFromDict",
                            "baseName",
                            "channel",
                            "channelNames",
                            "channels",
                            "childAtIndex",
                            "childCount",
                            "children",
                            "childrenByType",
                            "connectedGroups",
                            "deformers",
                            "delete",
                            "deselect",
                            "getTags",
                            "hasTag",
                            "id",
                            "idNames",
                            "index",
                            "insert",
                            "internalItem",
                            "isAnInstance",
                            "isLocatorSuperType",
                            "itemGraph",
                            "itemGraphNames",
                            "itemGraphs",
                            "iterChannels",
                            "name",
                            "names",
                            "packageNames",
                            "parent",
                            "parentIndex",
                            "parents",
                            "pivot",
                            "position",
                            "readTag",
                            "reposition",
                            "rotation",
                            "scale",
                            "scene",
                            "select",
                            "selected",
                            "setParent",
                            "setTag",
                            "superType",
                            "transforms",
                            "type"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Vector3 class\n    ",
                        "name": "Vector3",
                        "children": [
                            "angle",
                            "copy",
                            "cross",
                            "distanceBetweenPoints",
                            "dot",
                            "equals",
                            "length",
                            "mulByMatrixAsPoint",
                            "normal",
                            "normalize",
                            "rotate",
                            "rotateByAxisAngle",
                            "rotateByQuat",
                            "setLength",
                            "x",
                            "y",
                            "z"
                        ]
                    },
                    {
                        "type": "Module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "c",
                        "children": [
                            "ABCDEFORM_SAMPLE_TYPE",
                            "ACTIONCLIP_TYPE",
                            "ACTIONPOSE_TYPE",
                            "ADVANCEDMATERIAL_TYPE",
                            "ALEMBICCLOUD_TYPE",
                            "ALEMBICCURVES_TYPE",
                            "ALEMBICFILE_TYPE",
                            "ALEMBICMESH_TYPE",
                            "ANCHOR_TYPE",
                            "AREALIGHT_TYPE",
                            "AUDIOCLIP_TYPE",
                            "AUDIOFILE_TYPE",
                            "BACKDROP_TYPE",
                            "BASEVOLUME_TYPE",
                            "BEZIERNODE_TYPE",
                            "BLOB_TYPE",
                            "CAMERA_TYPE",
                            "CAPSULE_TYPE",
                            "CEFLOAT_TYPE",
                            "CELLULAR_TYPE",
                            "CEMATRIX_TYPE",
                            "CHANEFFECT_TYPE",
                            "CHANMODIFY_TYPE",
                            "CHECKER_TYPE",
                            "CMCHANNELRELATION_TYPE",
                            "CMCLAMP_TYPE",
                            "CMCOLORBLEND_TYPE",
                            "CMCOLORCORRECT_TYPE",
                            "CMCOLORGAMMA_TYPE",
                            "CMCOLORHSV_TYPE",
                            "CMCOLORINVERT_TYPE",
                            "CMCOLORKELVIN_TYPE",
                            "CMCONSTANT_TYPE",
                            "CMCURVEPROBE_TYPE",
                            "CMCYCLER_TYPE",
                            "CMDIRECTIONCONSTRAINT_TYPE",
                            "CMDISTANCECONSTRAINT_TYPE",
                            "CMDYNAMICPARENT_TYPE",
                            "CMFLOATOFFSET_TYPE",
                            "CMFLOATWARP_TYPE",
                            "CMGEOMETRYCONSTRAINT_TYPE",
                            "CMIKDUAL2D_TYPE",
                            "CMINTERSECT_TYPE",
                            "CMLINEARBLEND_TYPE",
                            "CMLOGIC_TYPE",
                            "CMMATHBASIC_TYPE",
                            "CMMATHMULTI_TYPE",
                            "CMMATHTRIG_TYPE",
                            "CMMATHVECTOR_TYPE",
                            "CMMATH_TYPE",
                            "CMMATRIXBLEND_TYPE",
                            "CMMATRIXCOMPOSE_TYPE",
                            "CMMATRIXCONSTRUCT_TYPE",
                            "CMMATRIXFROMEULER_TYPE",
                            "CMMATRIXINVERT_TYPE",
                            "CMMATRIXOFFSET_TYPE",
                            "CMMATRIXTOEULER_TYPE",
                            "CMMATRIXTRANSPOSE_TYPE",
                            "CMMATRIXVECTORMULTIPLY_TYPE",
                            "CMMATRIXVECTOR_TYPE",
                            "CMMATRIXWARP_TYPE",
                            "CMMEASUREANGLE_TYPE",
                            "CMMEASUREDISTANCE_TYPE",
                            "CMNOISE_TYPE",
                            "CMOSCILLATOR_TYPE",
                            "CMPATHCONSTRAINT_TYPE",
                            "CMPID_TYPE",
                            "CMQUATERNIONCONJUGATE_TYPE",
                            "CMQUATERNIONFROMAXISANGLE_TYPE",
                            "CMQUATERNIONFROMEULER_TYPE",
                            "CMQUATERNIONFROMMATRIX_TYPE",
                            "CMQUATERNIONGETVALUE_TYPE",
                            "CMQUATERNIONMATH_TYPE",
                            "CMQUATERNIONNORMALIZE_TYPE",
                            "CMQUATERNIONSETVALUE_TYPE",
                            "CMQUATERNIONSLERP_TYPE",
                            "CMQUATERNIONTOAXISANGLE_TYPE",
                            "CMQUATERNIONTOEULER_TYPE",
                            "CMQUATERNIONTOMATRIX_TYPE",
                            "CMQUATERNIONVECTORMULTIPLY_TYPE",
                            "CMRANDOM_TYPE",
                            "CMREVOLVE_TYPE",
                            "CMSHADEREFFECTS_TYPE",
                            "CMSHADERLIGHTING_TYPE",
                            "CMSHADERRAYCAST_TYPE",
                            "CMSHADERRAYTYPE_TYPE",
                            "CMSHADERSWITCH_TYPE",
                            "CMSIMPLEKINEMATICS_TYPE",
                            "CMSMOOTH_TYPE",
                            "CMSOUND_TYPE",
                            "CMSPEED_TYPE",
                            "CMSTRINGCOMPOSE_TYPE",
                            "CMSTRINGFINDANDREPLACE_TYPE",
                            "CMSTRINGSWITCH_TYPE",
                            "CMSWITCH_TYPE",
                            "CMTIME_TYPE",
                            "CMTRANSFORMCONSTRAINT_TYPE",
                            "CMVECTORBYSCALAR_TYPE",
                            "CMVECTORMAGNITUDE_TYPE",
                            "CMVECTORORTHOGONALIZE_TYPE",
                            "CMVECTORREFLECTION_TYPE",
                            "CMVECTOR_TYPE",
                            "CMVELOCITY_TYPE",
                            "CMWAVEFORM_TYPE",
                            "COLLECTOREMITTER_TYPE",
                            "CONSHINGE_TYPE",
                            "CONSPIN_TYPE",
                            "CONSPOINT_TYPE",
                            "CONSSLIDEHINGE_TYPE",
                            "CONSSPRING_TYPE",
                            "CONSTANT_TYPE",
                            "CONS_TYPE",
                            "CSVCACHE_TYPE",
                            "CURVEEMITTER_TYPE",
                            "CYLINDERLIGHT_TYPE",
                            "DEFAULTSHADER_TYPE",
                            "DEFERREDMESH_TYPE",
                            "DEFORMFOLDER_TYPE",
                            "DEFORMGROUP_TYPE",
                            "DEFORMMDD2_TYPE",
                            "DEFORMMDD_TYPE",
                            "DEFORM_BEND_TYPE",
                            "DEFORM_BEZIER_TYPE",
                            "DEFORM_CRVCONST_TYPE",
                            "DEFORM_LAG_TYPE",
                            "DEFORM_LATTICE_TYPE",
                            "DEFORM_MAGNET_TYPE",
                            "DEFORM_SLACK_TYPE",
                            "DEFORM_SPLINE_TYPE",
                            "DEFORM_TYPE",
                            "DEFORM_VORTEX_TYPE",
                            "DEFORM_WRAP_TYPE",
                            "DOMELIGHT_TYPE",
                            "DOTS_TYPE",
                            "DYNAMICCOLLIDER_TYPE",
                            "DYNAMICCOLLISIONEMITTER_TYPE",
                            "DYNAMICFLUID_TYPE",
                            "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                            "DYNAMIC_REPLICATORFILTER_TYPE",
                            "ENVIRONMENT_TYPE",
                            "ENVMATERIAL_TYPE",
                            "EXPRESSION_TYPE",
                            "FALLOFF_BEZIER_TYPE",
                            "FALLOFF_CAPSULE_TYPE",
                            "FALLOFF_LINEAR_TYPE",
                            "FALLOFF_RADIAL_TYPE",
                            "FALLOFF_SPLINE_TYPE",
                            "FALLOFF_TYPE",
                            "FLOCKINGOP_TYPE",
                            "FORCE_CURVE_TYPE",
                            "FORCE_DRAG_TYPE",
                            "FORCE_LINEAR_TYPE",
                            "FORCE_NEWTON_TYPE",
                            "FORCE_RADIAL_TYPE",
                            "FORCE_ROOT_TYPE",
                            "FORCE_TURBULENCE_TYPE",
                            "FORCE_VORTEX_TYPE",
                            "FORCE_WIND_TYPE",
                            "FURMATERIAL_TYPE",
                            "GASKETTOY_TYPE",
                            "GEAR_ITEM_TYPE",
                            "GENINFLUENCE_TYPE",
                            "GPLANE_TYPE",
                            "GRADIENT_TYPE",
                            "GRASS_ITEM_TYPE",
                            "GRID_TYPE",
                            "GROUPLOCATOR_TYPE",
                            "GROUP_TYPE",
                            "IKFULLBODY_TYPE",
                            "IKSOLVER_TYPE",
                            "IMAGEFOLDER_TYPE",
                            "IMAGEGROUP_TYPE",
                            "IMAGELAYER_TYPE",
                            "IMAGEMAP_TYPE",
                            "ITEMCHANNELPROBE_TYPE",
                            "ITEMINFLUENCE_TYPE",
                            "ITEMMODIFY_TYPE",
                            "ITEM_ROCK_TYPE",
                            "LIGHTMATERIAL_TYPE",
                            "LIGHT_TYPE",
                            "LOCATOR_TYPE",
                            "LOCDEFORM_TYPE",
                            "MAPMIX_TYPE",
                            "MASK_TYPE",
                            "MATCAPSHADER_TYPE",
                            "MATERIAL_CELEDGES_TYPE",
                            "MATERIAL_CELSHADER_TYPE",
                            "MATERIAL_HAIRMATERIAL_TYPE",
                            "MATERIAL_HALFTONE_TYPE",
                            "MATERIAL_IRIDESCENCE_TYPE",
                            "MATERIAL_SKINMATERIAL_TYPE",
                            "MATERIAL_THINFILM_TYPE",
                            "MEDIACLIP_TYPE",
                            "MESHINST_TYPE",
                            "MESH_TYPE",
                            "MORPHDEFORM_TYPE",
                            "MORPHMIX_TYPE",
                            "NOISE_TYPE",
                            "OCCLUSION_TYPE",
                            "PARTICLEOP_TYPE",
                            "PARTICLESIM_TYPE",
                            "PARTICLETERMINATOR_TYPE",
                            "PCLOUD_TYPE",
                            "PHOTOMETRYLIGHT_TYPE",
                            "PMOD_AUDIO_TYPE",
                            "PMOD_BASIC_TYPE",
                            "PMOD_EXPRESSION_TYPE",
                            "PMOD_GENERATOR_TYPE",
                            "PMOD_LOOKAT_TYPE",
                            "PMOD_RANDOM_TYPE",
                            "PMOD_SIEVE_TYPE",
                            "PMOD_STEP_TYPE",
                            "POINTLIGHT_TYPE",
                            "POLYRENDER_TYPE",
                            "PORTAL_TYPE",
                            "PROBEFALLOFF_TYPE",
                            "PROCESS_TYPE",
                            "PROJECTSHADER_TYPE",
                            "PROXY_TYPE",
                            "RADIALEMITTER_TYPE",
                            "REALPARTICLE_TYPE",
                            "RENDERBOOL_TYPE",
                            "RENDEROUTPUT_TYPE",
                            "RENDER_TYPE",
                            "REPLICATOR_TYPE",
                            "RIPPLES_TYPE",
                            "ROTATION_TYPE",
                            "RPC_MESH_TYPE",
                            "SCALE_TYPE",
                            "SCENE_SVC",
                            "SCENE_TYPE",
                            "SCHMNODE_TYPE",
                            "SEL_SVC",
                            "SHADERFOLDER_TYPE",
                            "SHADER_TYPE",
                            "SHEAR_TYPE",
                            "SOFTLAG_TYPE",
                            "SOLVER_TYPE",
                            "SOURCEEMITTER_TYPE",
                            "SPOTLIGHT_TYPE",
                            "SPRITE_TYPE",
                            "SUNLIGHT_TYPE",
                            "SURFACESCATTER_TYPE",
                            "SURFEMITTER_TYPE",
                            "SURFGENLOC_TYPE",
                            "SURFGEN_TYPE",
                            "TENSIONTEXTURE_TYPE",
                            "TEXTURELAYER_TYPE",
                            "TRANSFORM_TYPE",
                            "TRANSLATION_TYPE",
                            "TRISURF_TYPE",
                            "TXTRLOCATOR_TYPE",
                            "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                            "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                            "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                            "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                            "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                            "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                            "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                            "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                            "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                            "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                            "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_RING_RJJ_TYPE",
                            "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                            "VAL_NOISE_AGATE_RJJ_TYPE",
                            "VAL_NOISE_BOZO_RJJ_TYPE",
                            "VAL_NOISE_CRUDDY_RJJ_TYPE",
                            "VAL_NOISE_DENTED_RJJ_TYPE",
                            "VAL_NOISE_ETCHED_RJJ_TYPE",
                            "VAL_NOISE_FBM_RJJ_TYPE",
                            "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                            "VAL_NOISE_GABOR_TYPE",
                            "VAL_NOISE_GRANITE_RJJ_TYPE",
                            "VAL_NOISE_HYBRID_RJJ_TYPE",
                            "VAL_NOISE_LUMP_RJJ_TYPE",
                            "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                            "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                            "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                            "VAL_NOISE_PEBBLES_RJJ_TYPE",
                            "VAL_NOISE_POISSON_TYPE",
                            "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                            "VAL_NOISE_RIDGED_RJJ_TYPE",
                            "VAL_NOISE_SCAR_RJJ_TYPE",
                            "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                            "VAL_NOISE_STRATA_RJJ_TYPE",
                            "VAL_NOISE_STUCCO_RJJ_TYPE",
                            "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                            "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                            "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                            "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                            "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                            "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                            "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                            "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                            "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                            "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                            "VAL_ORGANIC_DIRT_RJJ_TYPE",
                            "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                            "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                            "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                            "VAL_ORGANIC_FIRE_RJJ_TYPE",
                            "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                            "VAL_ORGANIC_MINKY_RJJ_TYPE",
                            "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                            "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                            "VAL_ORGANIC_VEINS_RJJ_TYPE",
                            "VAL_ORGANIC_WIRES_RJJ_TYPE",
                            "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                            "VAL_PANELS_PEEL_RJJ_TYPE",
                            "VAL_PANELS_PLATES_RJJ_TYPE",
                            "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                            "VAL_PANELS_RIVETS_RJJ_TYPE",
                            "VAL_PANELS_RUST_RJJ_TYPE",
                            "VAL_PANELS_SMEAR_RJJ_TYPE",
                            "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                            "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                            "VAL_RPCTEXTURE_TYPE",
                            "VAL_RTCURVATURE_TYPE",
                            "VAL_SKINS_CAMO_RJJ_TYPE",
                            "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                            "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                            "VAL_SKINS_DISEASE_RJJ_TYPE",
                            "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                            "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                            "VAL_SKINS_LEATHER_RJJ_TYPE",
                            "VAL_SKINS_MONSTER_RJJ_TYPE",
                            "VAL_SKINS_PASTELLA_RJJ_TYPE",
                            "VAL_SKINS_PEENED_RJJ_TYPE",
                            "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                            "VAL_SPACE_BLAST_RJJ_TYPE",
                            "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                            "VAL_SPACE_FLARE_RJJ_TYPE",
                            "VAL_SPACE_GASGIANT_RJJ_TYPE",
                            "VAL_SPACE_GLINT_RJJ_TYPE",
                            "VAL_SPACE_HURRICANE_RJJ_TYPE",
                            "VAL_SPACE_NURNIES_RJJ_TYPE",
                            "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                            "VAL_SPACE_PLANET_RJJ_TYPE",
                            "VAL_SPACE_RINGS_RJJ_TYPE",
                            "VAL_SPACE_STARFIELD_RJJ_TYPE",
                            "VAL_SPACE_SWIRL_RJJ_TYPE",
                            "VAL_SPACE_TERRA_RJJ_TYPE",
                            "VAL_SPACE_WINDOWS_RJJ_TYPE",
                            "VAL_TILES_BASKET_RJJ_TYPE",
                            "VAL_TILES_BATHTILE_RJJ_TYPE",
                            "VAL_TILES_BRICKS_RJJ_TYPE",
                            "VAL_TILES_CHECKS_RJJ_TYPE",
                            "VAL_TILES_CORNERLESS_RJJ_TYPE",
                            "VAL_TILES_CUBES_RJJ_TYPE",
                            "VAL_TILES_DASHLINE_RJJ_TYPE",
                            "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                            "VAL_TILES_FISHSCALES_RJJ_TYPE",
                            "VAL_TILES_HEXTILE_RJJ_TYPE",
                            "VAL_TILES_LATTICE1_RJJ_TYPE",
                            "VAL_TILES_LATTICE2_RJJ_TYPE",
                            "VAL_TILES_LATTICE3_RJJ_TYPE",
                            "VAL_TILES_MOSAIC_RJJ_TYPE",
                            "VAL_TILES_OCTTILE_RJJ_TYPE",
                            "VAL_TILES_PARQUET_RJJ_TYPE",
                            "VAL_TILES_PAVING_RJJ_TYPE",
                            "VAL_TILES_PLAID_RJJ_TYPE",
                            "VAL_TILES_PLANKS_RJJ_TYPE",
                            "VAL_TILES_RIBS_RJJ_TYPE",
                            "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                            "VAL_TILES_SHINGLES_RJJ_TYPE",
                            "VAL_TILES_SPOTS_RJJ_TYPE",
                            "VAL_TILES_STAMPED_RJJ_TYPE",
                            "VAL_TILES_TACOS_RJJ_TYPE",
                            "VAL_TILES_TARTAN_RJJ_TYPE",
                            "VAL_TILES_TILER_RJJ_TYPE",
                            "VAL_TILES_TRICHECKS_RJJ_TYPE",
                            "VAL_TILES_TRIHEXES_RJJ_TYPE",
                            "VAL_TILES_TRITILE_RJJ_TYPE",
                            "VAL_TILES_WALL_RJJ_TYPE",
                            "VAL_WATER_DRIPDROP_RJJ_TYPE",
                            "VAL_WATER_RAIN_RJJ_TYPE",
                            "VAL_WATER_RIPPLES_RJJ_TYPE",
                            "VAL_WATER_SURF_RJJ_TYPE",
                            "VAL_WATER_WAVES_RJJ_TYPE",
                            "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                            "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                            "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                            "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                            "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                            "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                            "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                            "VAL_WIREFRAME_TYPE",
                            "VARIATIONTEXTURE_TYPE",
                            "VIDEOBLANK_TYPE",
                            "VIDEOCLIP_TYPE",
                            "VIDEOSEQUENCE_TYPE",
                            "VIDEOSTILL_TYPE",
                            "VMAPTEXTURE_TYPE",
                            "VOLUME_TYPE",
                            "VOXELITEM_TYPE",
                            "WEAVE_TYPE",
                            "WEIGHTCONTAINER_TYPE",
                            "WIDGET_TYPE",
                            "WOOD_TYPE",
                            "XFRMCORE_TYPE",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Test whether FILENAME matches PATTERN.\n\n    Patterns are Unix shell style:\n\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\n    ",
                        "name": "fnmatch",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "lxu",
                        "children": [
                            "attributes",
                            "command",
                            "decodeID4",
                            "lxID4",
                            "object",
                            "select",
                            "utils",
                            "vector"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n\n.. module:: modo.scene\n   :synopsis: Scene class and scene level utility functions.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n",
                        "name": "scene",
                        "children": [
                            "ChannelRead",
                            "ChannelWrite",
                            "Scene",
                            "c",
                            "current",
                            "fnmatch",
                            "item",
                            "lx",
                            "lxu",
                            "sceneList",
                            "util"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n\n.. module:: modo.util\n    :synopsis: A collection of support tools, decorators, functions etc used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "util",
                        "children": [
                            "c",
                            "collections",
                            "ensureModoItem",
                            "floatEquals",
                            "functools",
                            "item",
                            "lx",
                            "makeQuickCommand",
                            "paths",
                            "testGlobalInterpreter",
                            "typeToFunc"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": "Module for modo extensions.",
                "name": "lx",
                "children": [
                    {
                        "type": "type",
                        "docstring": "Monitor objects",
                        "name": "Monitor",
                        "children": [
                            "init",
                            "step"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Script query objects",
                        "name": "Service",
                        "children": [
                            "name",
                            "query",
                            "query1",
                            "queryN",
                            "select"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Get the argument string for the script.",
                        "name": "arg",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Get the parsed argument tuple for the script.",
                        "name": "args",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Amen.",
                        "name": "bless",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Execute a command with a variable argument list.",
                        "name": "command",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Evaluate a command string.",
                        "name": "eval",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Evaluate a command string, returning a single value.",
                        "name": "eval1",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Evaluate a command string, returning a tuple.",
                        "name": "evalN",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Extract the Python object referenced from a COM object wrapper.",
                        "name": "extract",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Converts a PyLong object to a PySide QWidget",
                        "name": "getQWidget",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "ifc"
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Get the result code from the last service or object method called.",
                        "name": "lastResult",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Raise 'not implemented' exception.",
                        "name": "notimpl",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "object",
                        "children": [
                            "ActionClip",
                            "ActionListener",
                            "AddChannel",
                            "AddDropAction",
                            "AdjustTool",
                            "AnimListener",
                            "AppActiveListener",
                            "AsyncMonitorInfo",
                            "AsyncMonitorSystem",
                            "AttrSequence",
                            "Attributes",
                            "AttributesUI",
                            "Audio",
                            "AudioDevice",
                            "AudioHandle",
                            "AudioLoaderTarget",
                            "AudioWrite",
                            "AutoSaveListener",
                            "BagGenerator",
                            "BasePathAddDest",
                            "BlockRead",
                            "BlockStore",
                            "BlockWrite",
                            "Buffer",
                            "CenterPacketTranslation",
                            "ChannelDest",
                            "ChannelGraph",
                            "ChannelModifier",
                            "ChannelPacketTranslation",
                            "ChannelRead",
                            "ChannelUI",
                            "ChannelWrite",
                            "CmdSysListener",
                            "Color",
                            "ColorDialog",
                            "ColorMapping",
                            "ColorMappingModule",
                            "ColorModel",
                            "ColorPreDest",
                            "Command",
                            "CommandDBHelp",
                            "CommandEvent",
                            "CompShader",
                            "Curve",
                            "CurveGroup",
                            "CustomMaterial",
                            "CustomPane",
                            "CustomView",
                            "DTBDropPreview",
                            "DTBGroupSortOverride",
                            "Deformation",
                            "Deformer",
                            "DirCacheEntry",
                            "DirCacheFileMetrics",
                            "DirCacheGridPosDest",
                            "DirCacheManualOrderDest",
                            "DirEntryThumbAsync",
                            "Drop",
                            "DropPreviewDefault",
                            "Edge",
                            "EdgePacketTranslation",
                            "ElementAxisPacket",
                            "ElementCenterPacket",
                            "Envelope",
                            "EvalModifier",
                            "Evaluation",
                            "EvaluationStack",
                            "EventGuide",
                            "EventTranslatePacket",
                            "Factory",
                            "Falloff",
                            "FalloffPacket",
                            "FileReference",
                            "FileSysDest",
                            "Force",
                            "FormDeleteEntryDest",
                            "FormEntryDest",
                            "FormEntryDropPreview",
                            "FrameBuffer",
                            "GeoCacheSegment",
                            "GeoCacheSurface",
                            "GradientFilter",
                            "GroupDeformer",
                            "GroupDest",
                            "GroupEnumerator",
                            "GroupItem",
                            "GroupMemberChanDest",
                            "GroupMemberItemDest",
                            "HandleDraw",
                            "Image",
                            "ImageFilter",
                            "ImageFilterMetrics",
                            "ImageLevelSample",
                            "ImageLoaderTarget",
                            "ImageMonitor",
                            "ImageProcessing",
                            "ImageProcessingListener",
                            "ImageProcessingRead",
                            "ImageSegment",
                            "ImageWrite",
                            "IndexImage",
                            "IndexImageWrite",
                            "Instanceable",
                            "IntRange",
                            "Item",
                            "ItemChannel",
                            "ItemCollection",
                            "ItemGraph",
                            "ItemInfluence",
                            "ItemPacketTranslation",
                            "Keyframe",
                            "LayerScan",
                            "LayeredImage",
                            "LayeredImageWrite",
                            "LightSample",
                            "Lighting",
                            "LineExecution",
                            "LineInterpreter",
                            "LinkPacketTranslation",
                            "ListenerPort",
                            "Loader",
                            "LoaderInfo",
                            "Locator",
                            "LocatorDest",
                            "Log",
                            "LogEntry",
                            "LogInfoBlock",
                            "LogListener",
                            "Matrix",
                            "Mesh",
                            "MeshDest",
                            "MeshFilter",
                            "MeshFilterBBox",
                            "MeshInfluence",
                            "MeshLayerPreDest",
                            "MeshMap",
                            "Message",
                            "Modifier",
                            "Module",
                            "Monitor",
                            "NavigationListener",
                            "NeedContext",
                            "NodePacketTranslation",
                            "Notifier",
                            "Package",
                            "PackageInstance",
                            "PacketEffect",
                            "PaintBrushPacket",
                            "PaintInkPacket",
                            "PaintNozzlePacket",
                            "ParticleCoOperator",
                            "ParticleEvalFrame",
                            "ParticleFilter",
                            "ParticleGeneratorPacket",
                            "ParticleItem",
                            "PathGeneratorPacket",
                            "PathStep",
                            "PersistenceClient",
                            "PersistentEntry",
                            "PivotPacketTranslation",
                            "Point",
                            "PointCacheItem",
                            "Polygon",
                            "PolygonPacketTranslation",
                            "PolygonSlice",
                            "PresetLoaderTarget",
                            "PresetMetrics",
                            "PresetPathPacketTranslation",
                            "PresetType",
                            "Preview",
                            "PreviewNotifier",
                            "Profile1DPreDest",
                            "Profile2DPreDest",
                            "ProjDirOverride",
                            "ProxyOptions",
                            "Quaternion",
                            "Raycast",
                            "RaycastPacket",
                            "Raymarch",
                            "RenderBucket",
                            "RenderCache",
                            "RenderJob",
                            "RenderProgressListener",
                            "RenderStats",
                            "ReplicatorEnumerator",
                            "Saver",
                            "Scene",
                            "SceneContents",
                            "SceneGraph",
                            "SceneItemListener",
                            "SceneItemPreDest",
                            "SceneLoaderTarget",
                            "ScenePacketTranslation",
                            "SchemaDest",
                            "SchematicConnection",
                            "Script",
                            "ScriptLineEvent",
                            "ScriptQuery",
                            "SelectionListener",
                            "SelectionType",
                            "SessionListener",
                            "Shader",
                            "ShaderPreDest",
                            "ShaderSlice",
                            "ShapeDraw",
                            "SharedWork",
                            "SimulationModifier",
                            "SolidDrill",
                            "StackFilter",
                            "StreamIO",
                            "StringConversion",
                            "StringConversionNice",
                            "StringTag",
                            "StrokeDraw",
                            "Subdivision",
                            "Surface",
                            "SurfaceBin",
                            "SurfaceItem",
                            "SymmetryPacket",
                            "Tableau",
                            "TableauElement",
                            "TableauInstance",
                            "TableauLight",
                            "TableauProxy",
                            "TableauShader",
                            "TableauSource",
                            "TableauSurface",
                            "TableauVertex",
                            "TableauVolume",
                            "TagDescription",
                            "TextEncoding",
                            "TextScriptInterpreter",
                            "Texture",
                            "TextureEffect",
                            "TexturePacket",
                            "ThreadGroup",
                            "ThreadJob",
                            "ThreadMutex",
                            "ThreadRangeWorker",
                            "ThreadSlot",
                            "ThreadSlotClient",
                            "TileImage",
                            "Tool",
                            "ToolModel",
                            "TransformScan",
                            "Tree",
                            "TreeListener",
                            "TreeView",
                            "TriangleGroup",
                            "TriangleSoup",
                            "TriangleSurface",
                            "UIHints",
                            "UIValueHints",
                            "Undo",
                            "Unknown",
                            "UserValue",
                            "UserValueListener",
                            "VMapPacketTranslation",
                            "Value",
                            "ValueArray",
                            "ValueMath",
                            "ValueReference",
                            "ValueTexture",
                            "ValueTextureCustom",
                            "VectorList",
                            "VectorStack",
                            "VectorType",
                            "VertexPacketTranslation",
                            "VideoClipItem",
                            "View",
                            "View3D",
                            "ViewItem3D",
                            "VirtualDevice",
                            "Visitor",
                            "Voxel",
                            "Waterfall",
                            "WeightMapDeformerItem",
                            "WorkList",
                            "storage"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Get the current state of an option",
                        "name": "option",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Output to log.",
                        "name": "out",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Output the exception state to the log.",
                        "name": "outEx",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Query a command with a ToggleValue style argument.",
                        "name": "queryToggle",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "result",
                        "children": [
                            "ABORT",
                            "ALREADYEXISTS",
                            "CKPTOVERFLOW",
                            "CMD_ALL_ARGUMENTS_HIDDEN",
                            "CMD_ALREADY_EXISTS",
                            "CMD_ALREADY_REFIRING",
                            "CMD_ARGUMENT_ALREADY_SET",
                            "CMD_ARGUMENT_NOT_QUERYABLE",
                            "CMD_BAD_DEFINITION",
                            "CMD_BAD_DIALOG_FORMAT",
                            "CMD_DATATYPE_UNAVAILABLE",
                            "CMD_DIFFERENT_TYPES",
                            "CMD_DISABLED",
                            "CMD_ERROR_ARG_MISSING_VALUE",
                            "CMD_ERROR_SETTING_DATATYPE",
                            "CMD_EXPECTED_OPENING_BRACE",
                            "CMD_HAS_NO_ARGUMENTS",
                            "CMD_ILLEGAL_REFIRE_BEGIN",
                            "CMD_ILLEGAL_REFIRE_END",
                            "CMD_INVALID_ON_PROTO",
                            "CMD_MISSING_ARGS",
                            "CMD_NOT_ALIASED",
                            "CMD_NOT_AVAILABLE",
                            "CMD_NO_QUERY_MARKED",
                            "CMD_QUERY_MISMATCHED_DATATYPES",
                            "CMD_REQUIRES_USER_INTERACTION",
                            "CMD_SANDBOXED",
                            "CMD_SANDBOX_GLOBAL",
                            "CMD_SANDBOX_NOT_COMPATIBLE",
                            "CMD_SANDBOX_ONLY",
                            "CMD_TOO_MANY_ARGUMENTS",
                            "CMD_TOO_MANY_QUERIES_MARKED",
                            "CMD_UNBALANCED_BRACES",
                            "CMD_UNDOS_LOCKED_OUT",
                            "CMD_UNKNOWN_ARGUMENT",
                            "CMD_UNKNOWN_COMMAND",
                            "CMD_VARIABLE_DATATYPES_PENDING",
                            "CMD_VARIABLE_DATATYPES_SET",
                            "CRASH",
                            "DEFORM_AUTO_COLOR",
                            "DEFORM_DIFFERENT",
                            "DEFORM_IDENTICAL",
                            "DEFORM_NEWOFFSET",
                            "DEFORM_NEWWEIGHT",
                            "DISABLED",
                            "EVAL_DIFFERENT",
                            "EVAL_IDENTICAL",
                            "FAILED",
                            "FALSE",
                            "FILEDIALOG_BADCLASS",
                            "FILEDIALOG_BADFORMAT",
                            "FILE_REMAP",
                            "GEO_SIZE_LIMIT",
                            "INFINITE_BOUND",
                            "INFO",
                            "INVALIDARG",
                            "IO_ERROR",
                            "IO_NEEDGL",
                            "IO_PARTIALSTRING",
                            "IO_SHORTREAD",
                            "IO_TRUNCATED",
                            "LOG_DEBUG",
                            "MSGDIALOG_AS_OKCANCEL",
                            "MSGDIALOG_AS_SAVEOK",
                            "MSGDIALOG_AS_YESNO",
                            "MSGDIALOG_AS_YESNOALL",
                            "MSGDIALOG_AS_YESNOCANCEL",
                            "MSGDIALOG_AS_YESNOTOALL",
                            "MSGDIALOG_AS_YESTOALLCANCEL",
                            "MSGDIALOG_CANCEL",
                            "MSGDIALOG_EMPTY",
                            "MSGDIALOG_INVALID",
                            "MSGDIALOG_NO",
                            "MSGDIALOG_NOTOALL",
                            "MSGDIALOG_OK",
                            "MSGDIALOG_YES",
                            "MSGDIALOG_YESTOALL",
                            "NOACCESS",
                            "NOINTERFACE",
                            "NOTAVAILABLE",
                            "NOTFOUND",
                            "NOTIMPL",
                            "NOTREADY",
                            "OK",
                            "OK_INEXACT_MATCH",
                            "OK_NO_CHOICES",
                            "OUTOFBOUNDS",
                            "OUTOFMEMORY",
                            "PARTICLE_KILL",
                            "PRESET_ALREADY_APPLIED",
                            "QUERY_ERROR",
                            "QUERY_MISMATCHED_SELECTION",
                            "QUERY_MISMATCHED_TYPE",
                            "QUERY_NEED_SELECTION",
                            "QUERY_NOT_APPLICABLE_TO_SELECTED",
                            "QUERY_SELECT_FAILED",
                            "QUERY_SERVICE_UNAVAILABLE",
                            "QUERY_UNKNOWN_ATTRIBUTE",
                            "QUERY_UNKNOWN_SERVICE",
                            "RECOVERING",
                            "REF_BADID",
                            "REF_BADPTR",
                            "REF_DUPLICATE",
                            "RENDER_ABORTING",
                            "RENDER_IDLE",
                            "RENDER_IN_PROGRESS",
                            "RENDER_NOT_RENDERING",
                            "RENDER_NO_JOB",
                            "RENDER_NO_PROGRESS_IMAGE",
                            "RENDER_RENDERING",
                            "RENDER_USE_OUTPUT_ITEMS",
                            "RENDER_WITHOUT_SAVING",
                            "SCRIPT_ALREADY_EXISTS",
                            "SCRIPT_ERROR",
                            "SCRIPT_LINEISCOMMENT",
                            "SCRIPT_NOT_ENOUGH_ARGS",
                            "SCRIPT_OPAQUE",
                            "SCRIPT_READONLY",
                            "SCRIPT_RECOGNIZED_INVALID",
                            "SCRIPT_TOO_MANY_ARGS",
                            "SCRIPT_UNKNOWN",
                            "SCRIPT_WARNING",
                            "SC_ANAGLYPH_GRAYSCALE",
                            "SC_ANAGLYPH_RED_BLUE_LS",
                            "SC_ANAGLYPH_RED_CYAN",
                            "SC_ANAGLYPH_RED_CYAN_HALF",
                            "SC_ANAGLYPH_RED_CYAN_OPT",
                            "SC_DROPDOWN_COUNT",
                            "SC_LAST_ANAGLYPH_MODE",
                            "SC_LAST_SIDE_BY_SIDE_MODE",
                            "SC_NO_COMPOSITE",
                            "SC_SIDE_BY_SIDE",
                            "SC_SIDE_BY_SIDE_CROSSED",
                            "SC_SIDE_BY_SIDE_CROSSED_FULL",
                            "SC_SIDE_BY_SIDE_FULL_WIDTH",
                            "SC_UNDEFINED",
                            "SHORTBUFFER",
                            "SKIP",
                            "STARTUP",
                            "TBLXSURF_ADAPTIVE",
                            "TRUE",
                            "WARNING"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "service",
                        "children": [
                            "AudioAnim",
                            "ChannelUI",
                            "ColorMapping",
                            "Command",
                            "Deformer",
                            "DirCache",
                            "Drop",
                            "File",
                            "GUID",
                            "Host",
                            "IO",
                            "Image",
                            "ImageMonitor",
                            "ImageProcessing",
                            "Layer",
                            "Listener",
                            "Log",
                            "Mesh",
                            "Message",
                            "Nodal",
                            "NotifySys",
                            "Packet",
                            "Particle",
                            "Persistence",
                            "Platform",
                            "PresetBrowser",
                            "Preview",
                            "Render",
                            "RenderCache",
                            "Scene",
                            "ScriptSys",
                            "Selection",
                            "Shader",
                            "StdDialog",
                            "Tableau",
                            "TextEncoding",
                            "Thread",
                            "Undo",
                            "Value",
                            "VertexFeature",
                            "View3Dport"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Set options that affect how the lx methods act",
                        "name": "setOption",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "symbol",
                        "children": [
                            "aSTATE_INITIAL",
                            "aSTATE_PAUSED",
                            "aSTATE_PLAYING",
                            "aSTATE_STOPPED",
                            "a_ACTIONCLIP",
                            "a_ADDDROPACTION",
                            "a_ANIMLISTENER",
                            "a_APPACTIVELISTENER",
                            "a_ARRAY",
                            "a_ASYNCMONITORINFO",
                            "a_ASYNCMONITORSYSTEM",
                            "a_ATTRIBUTESUI",
                            "a_AUDIO",
                            "a_AUDIODEVICE",
                            "a_AUDIOHANDLE",
                            "a_AUDIOWRITE",
                            "a_AUTOSAVELISTENER",
                            "a_BASEPATHADDDEST",
                            "a_BRUSHTOOLPRESET",
                            "a_BUFFER",
                            "a_CHANNELDEST",
                            "a_CHANNELGRAPH",
                            "a_CHANNELMODIFIER",
                            "a_CHANNELMODITEM",
                            "a_CHANNELUI",
                            "a_CHANNELUI1",
                            "a_CHANNELUISERVICE",
                            "a_COLOR",
                            "a_COLORDIALOG",
                            "a_COLORMAPPING",
                            "a_COLORMAPPINGMODULE",
                            "a_COLORMAPPINGSERVICE",
                            "a_COLORMODEL",
                            "a_COLORPREDEST",
                            "a_COMMAND",
                            "a_COMMANDBLOCK",
                            "a_COMMANDDBHELP",
                            "a_COMMANDEVENT",
                            "a_COMMANDPOSTEND",
                            "a_COMMANDSERVICE",
                            "a_COMPSHADER",
                            "a_COMPSHADER1",
                            "a_CURVE",
                            "a_CURVE1",
                            "a_CUSTOMMATERIAL",
                            "a_CUSTOMMATERIAL1",
                            "a_CUSTOMMATERIAL2",
                            "a_CUSTOMPANE",
                            "a_CUSTOMVIEW",
                            "a_DEFORMERSERVICE",
                            "a_DIRCACHEENTRY",
                            "a_DIRCACHEFILEMETRICS",
                            "a_DIRCACHEGRIDPOSDEST",
                            "a_DIRCACHEMANUALORDERDEST",
                            "a_DIRCACHESERVICE",
                            "a_DIRENTRYTHUMBASYNC",
                            "a_DROP",
                            "a_DROPPREVIEWDEFAULT",
                            "a_DROPSERVICE",
                            "a_DTBDROPPREVIEW",
                            "a_DTBGROUPSORTOVERRIDE",
                            "a_EDGE",
                            "a_EVALMODIFIER",
                            "a_FILE1SERVICE",
                            "a_FILESERVICE",
                            "a_FILESYSDEST",
                            "a_FORMDELETEENTRYDEST",
                            "a_FORMENTRYDEST",
                            "a_FORMENTRYDROPPREVIEW",
                            "a_FRAMEBUFFER",
                            "a_GEOCACHESEGMENT",
                            "a_GEOCACHESURFACE",
                            "a_GROUPDEST",
                            "a_GROUPMEMBERCHANDEST",
                            "a_GROUPMEMBERITEMDEST",
                            "a_GUIDSERVICE",
                            "a_HOSTSERVICE",
                            "a_IMAGE",
                            "a_IMAGEBLOCKCODEC",
                            "a_IMAGELEVELSAMPLE",
                            "a_IMAGEMONITOR",
                            "a_IMAGEMONITORSERVICE",
                            "a_IMAGEPROCESSING",
                            "a_IMAGEPROCESSINGLISTENER",
                            "a_IMAGEPROCESSINGREAD",
                            "a_IMAGEPROCESSINGSERVICE",
                            "a_IMAGESEGMENT",
                            "a_IMAGEWRITE",
                            "a_IMAGE_FLOAT",
                            "a_INTRANGE",
                            "a_IOSERVICE",
                            "a_ITEM",
                            "a_ITEMCHANNEL",
                            "a_ITEMGRAPH",
                            "a_LAYEREDIMAGE",
                            "a_LAYERSCAN",
                            "a_LAYERSERVICE",
                            "a_LIGHTING",
                            "a_LINEINTERPRETER",
                            "a_LOADER",
                            "a_LOADER1",
                            "a_LOADERINFO",
                            "a_LOCATOR",
                            "a_LOCATORDEST",
                            "a_LOG",
                            "a_LOGENTRY",
                            "a_LOGINFOBLOCK",
                            "a_LOGSERVICE",
                            "a_MESH",
                            "a_MESH1",
                            "a_MESHDEST",
                            "a_MESHLAYERPREDEST",
                            "a_MESHMAP",
                            "a_MESHSERVICE",
                            "a_MESSAGE",
                            "a_MESSAGESERVICE",
                            "a_MODULE",
                            "a_MODULE1",
                            "a_MONITOR",
                            "a_MOVIE",
                            "a_NOTIFIER",
                            "a_PACKAGE",
                            "a_PACKAGE1",
                            "a_PACKAGEINSTANCE",
                            "a_PACKAGEINSTANCE1",
                            "a_PACKETEFFECT",
                            "a_PAINTBRUSHPACKET",
                            "a_PAINTINKPACKET",
                            "a_PAINTNOZZLEPACKET",
                            "a_PARTICLESERVICE",
                            "a_PERSISTENCECLIENT",
                            "a_PERSISTENCESERVICE",
                            "a_PHOTOMETRYPREDEST",
                            "a_PLATFORMSERVICE",
                            "a_POINT",
                            "a_POLYGON",
                            "a_POLYGON1",
                            "a_POLYGONSLICE",
                            "a_PRESET",
                            "a_PRESETBROWSERSERVICE",
                            "a_PRESETMETRICS",
                            "a_PRESETTYPE",
                            "a_PREVIEW",
                            "a_PREVIEWNOTIFIER",
                            "a_PREVIEWSERVICE",
                            "a_PROFILE1DPREDEST",
                            "a_PROFILE2DPREDEST",
                            "a_PROJDIROVERRIDE",
                            "a_PROXYOPTIONS",
                            "a_RAYCAST",
                            "a_RAYCAST1",
                            "a_RAYMARCH",
                            "a_RENDERBUCKET",
                            "a_RENDERCACHE",
                            "a_RENDERCACHESERVICE",
                            "a_RENDERJOB",
                            "a_RENDERSERVICE",
                            "a_RENDERSTATS",
                            "a_SAVER",
                            "a_SCENE",
                            "a_SCENE1",
                            "a_SCENE1SERVICE",
                            "a_SCENE2SERVICE",
                            "a_SCENECONTENTS",
                            "a_SCENEGRAPH",
                            "a_SCENEITEMPREDEST",
                            "a_SCENESERVICE",
                            "a_SCHEMADEST",
                            "a_SCHEMATICCONNECTION",
                            "a_SCRIPT",
                            "a_SCRIPTLINEEVENT",
                            "a_SCRIPTMANAGER",
                            "a_SCRIPTQUERY",
                            "a_SCRIPTSYSSERVICE",
                            "a_SELECTIONLISTENER",
                            "a_SELECTIONSERVICE",
                            "a_SELECTIONTYPE",
                            "a_SERVICEEXTENSION",
                            "a_SESSIONLISTENER",
                            "a_SHADER",
                            "a_SHADERPREDEST",
                            "a_SHADERSERVICE",
                            "a_SIDEEFFECT",
                            "a_SOLIDDRILL",
                            "a_STDDIALOGSERVICE",
                            "a_SUBDIVISION",
                            "a_SURFACE",
                            "a_SURFACEBIN",
                            "a_SURFACEITEM",
                            "a_TABLEAUELEMENT",
                            "a_TABLEAUFILTER",
                            "a_TABLEAUINSTANCE",
                            "a_TABLEAUINSTANCE1",
                            "a_TABLEAULIGHT",
                            "a_TABLEAUPROXY",
                            "a_TABLEAUSHADER",
                            "a_TABLEAUVOLUME",
                            "a_TEXTENCODING",
                            "a_TEXTENCODINGSERVICE",
                            "a_TEXTSCRIPTINTERPRETER",
                            "a_TEXTURE",
                            "a_TEXTUREEFFECT",
                            "a_TEXTUREEVAL",
                            "a_TEXTUREGL",
                            "a_TEXTURELAYER",
                            "a_TEXTUREMASK",
                            "a_TEXTUREVMAP",
                            "a_THREADGROUP",
                            "a_THREADJOB",
                            "a_THREADMUTEX",
                            "a_THREADRANGEWORKER",
                            "a_THREADSERVICE",
                            "a_TILEIMAGE",
                            "a_TOOL",
                            "a_TREE",
                            "a_TREEVIEW",
                            "a_UIHINTS",
                            "a_UIVALUEHINTS",
                            "a_USERVALUE",
                            "a_USERVALUELISTENER",
                            "a_VALUE",
                            "a_VALUEARRAY",
                            "a_VALUESERVICE",
                            "a_VALUETEXTURE",
                            "a_VALUETEXTURE1",
                            "a_VECTORPACKET",
                            "a_VECTORPACKET1",
                            "a_VERTEXFEATURESERVICE",
                            "a_VIEW3D",
                            "a_VIEW3DPORTSERVICE",
                            "a_VIEWITEM3D",
                            "a_VIEWITEM3D1",
                            "a_VIEWPORTDEST",
                            "a_VIRTUALDEVICE",
                            "a_VISITOR",
                            "a_VOXEL",
                            "a_WATERFALL",
                            "a_WORKLIST",
                            "dICVAL_SCENE_MAX_FPS",
                            "eDEFORM_AUTO_COLOR",
                            "eDEFORM_DIFFERENT",
                            "eDEFORM_IDENTICAL",
                            "eDEFORM_NEWOFFSET",
                            "eDEFORM_NEWWEIGHT",
                            "eEVAL_DIFFERENT",
                            "eEVAL_IDENTICAL",
                            "eFILEDIALOG_BADCLASS",
                            "eFILEDIALOG_BADFORMAT",
                            "eMSGDIALOG_AS_OKCANCEL",
                            "eMSGDIALOG_AS_SAVEOK",
                            "eMSGDIALOG_AS_YESNO",
                            "eMSGDIALOG_AS_YESNOALL",
                            "eMSGDIALOG_AS_YESNOCANCEL",
                            "eMSGDIALOG_AS_YESNOTOALL",
                            "eMSGDIALOG_AS_YESTOALLCANCEL",
                            "eMSGDIALOG_CANCEL",
                            "eMSGDIALOG_EMPTY",
                            "eMSGDIALOG_INVALID",
                            "eMSGDIALOG_NO",
                            "eMSGDIALOG_NOTOALL",
                            "eMSGDIALOG_OK",
                            "eMSGDIALOG_YES",
                            "eMSGDIALOG_YESTOALL",
                            "ePARTICLE_KILL",
                            "eSC_ANAGLYPH_GRAYSCALE",
                            "eSC_ANAGLYPH_RED_BLUE_LS",
                            "eSC_ANAGLYPH_RED_CYAN",
                            "eSC_ANAGLYPH_RED_CYAN_HALF",
                            "eSC_ANAGLYPH_RED_CYAN_OPT",
                            "eSC_DROPDOWN_COUNT",
                            "eSC_LAST_ANAGLYPH_MODE",
                            "eSC_LAST_SIDE_BY_SIDE_MODE",
                            "eSC_NO_COMPOSITE",
                            "eSC_SIDE_BY_SIDE",
                            "eSC_SIDE_BY_SIDE_CROSSED",
                            "eSC_SIDE_BY_SIDE_CROSSED_FULL",
                            "eSC_SIDE_BY_SIDE_FULL_WIDTH",
                            "eSC_UNDEFINED",
                            "eSYS_ADISP",
                            "eSYS_AFILE",
                            "eSYS_AWIN",
                            "eSYS_BOOT",
                            "eSYS_CMDS",
                            "eSYS_COMP",
                            "eSYS_DEFORM",
                            "eSYS_EVAL",
                            "eSYS_FONT",
                            "eSYS_FRAME",
                            "eSYS_IMAGE",
                            "eSYS_IMSG",
                            "eSYS_INPUTMAP",
                            "eSYS_IO",
                            "eSYS_ITEM",
                            "eSYS_LOG",
                            "eSYS_MESH",
                            "eSYS_MT",
                            "eSYS_NETWORK",
                            "eSYS_OPAL1",
                            "eSYS_OPAL2",
                            "eSYS_PLUG",
                            "eSYS_PRESET",
                            "eSYS_PREVIEW",
                            "eSYS_PSYS",
                            "eSYS_QUERY",
                            "eSYS_REND",
                            "eSYS_RENDER",
                            "eSYS_SCRIPT",
                            "eSYS_UIIMAGE",
                            "eSYS_UNDO",
                            "eSYS_VALUE",
                            "eTBLXSURF_ADAPTIVE",
                            "e_ABORT",
                            "e_ALREADYEXISTS",
                            "e_CKPTOVERFLOW",
                            "e_CMD_ALL_ARGUMENTS_HIDDEN",
                            "e_CMD_ALREADY_EXISTS",
                            "e_CMD_ALREADY_REFIRING",
                            "e_CMD_ARGUMENT_ALREADY_SET",
                            "e_CMD_ARGUMENT_NOT_QUERYABLE",
                            "e_CMD_BAD_DEFINITION",
                            "e_CMD_BAD_DIALOG_FORMAT",
                            "e_CMD_DATATYPE_UNAVAILABLE",
                            "e_CMD_DIFFERENT_TYPES",
                            "e_CMD_DISABLED",
                            "e_CMD_ERROR_ARG_MISSING_VALUE",
                            "e_CMD_ERROR_SETTING_DATATYPE",
                            "e_CMD_EXPECTED_OPENING_BRACE",
                            "e_CMD_HAS_NO_ARGUMENTS",
                            "e_CMD_ILLEGAL_REFIRE_BEGIN",
                            "e_CMD_ILLEGAL_REFIRE_END",
                            "e_CMD_INVALID_ON_PROTO",
                            "e_CMD_MISSING_ARGS",
                            "e_CMD_NOT_ALIASED",
                            "e_CMD_NOT_AVAILABLE",
                            "e_CMD_NO_QUERY_MARKED",
                            "e_CMD_QUERY_MISMATCHED_DATATYPES",
                            "e_CMD_REQUIRES_USER_INTERACTION",
                            "e_CMD_SANDBOXED",
                            "e_CMD_SANDBOX_GLOBAL",
                            "e_CMD_SANDBOX_NOT_COMPATIBLE",
                            "e_CMD_SANDBOX_ONLY",
                            "e_CMD_TOO_MANY_ARGUMENTS",
                            "e_CMD_TOO_MANY_QUERIES_MARKED",
                            "e_CMD_UNBALANCED_BRACES",
                            "e_CMD_UNDOS_LOCKED_OUT",
                            "e_CMD_UNKNOWN_ARGUMENT",
                            "e_CMD_UNKNOWN_COMMAND",
                            "e_CMD_VARIABLE_DATATYPES_PENDING",
                            "e_CMD_VARIABLE_DATATYPES_SET",
                            "e_CRASH",
                            "e_DISABLED",
                            "e_FAILED",
                            "e_FALSE",
                            "e_FILE_REMAP",
                            "e_GEO_SIZE_LIMIT",
                            "e_INFINITE_BOUND",
                            "e_INFO",
                            "e_INVALIDARG",
                            "e_IO_ERROR",
                            "e_IO_NEEDGL",
                            "e_IO_PARTIALSTRING",
                            "e_IO_SHORTREAD",
                            "e_IO_TRUNCATED",
                            "e_LOG_DEBUG",
                            "e_NOACCESS",
                            "e_NOINTERFACE",
                            "e_NOTAVAILABLE",
                            "e_NOTFOUND",
                            "e_NOTIMPL",
                            "e_NOTREADY",
                            "e_OK",
                            "e_OK_INEXACT_MATCH",
                            "e_OK_NO_CHOICES",
                            "e_OUTOFBOUNDS",
                            "e_OUTOFMEMORY",
                            "e_PRESET_ALREADY_APPLIED",
                            "e_QUERY_ERROR",
                            "e_QUERY_MISMATCHED_SELECTION",
                            "e_QUERY_MISMATCHED_TYPE",
                            "e_QUERY_NEED_SELECTION",
                            "e_QUERY_NOT_APPLICABLE_TO_SELECTED",
                            "e_QUERY_SELECT_FAILED",
                            "e_QUERY_SERVICE_UNAVAILABLE",
                            "e_QUERY_UNKNOWN_ATTRIBUTE",
                            "e_QUERY_UNKNOWN_SERVICE",
                            "e_RECOVERING",
                            "e_REF_BADID",
                            "e_REF_BADPTR",
                            "e_REF_DUPLICATE",
                            "e_RENDER_ABORTING",
                            "e_RENDER_IDLE",
                            "e_RENDER_IN_PROGRESS",
                            "e_RENDER_NOT_RENDERING",
                            "e_RENDER_NO_JOB",
                            "e_RENDER_NO_PROGRESS_IMAGE",
                            "e_RENDER_RENDERING",
                            "e_RENDER_USE_OUTPUT_ITEMS",
                            "e_RENDER_WITHOUT_SAVING",
                            "e_SCRIPT_ALREADY_EXISTS",
                            "e_SCRIPT_ERROR",
                            "e_SCRIPT_LINEISCOMMENT",
                            "e_SCRIPT_NOT_ENOUGH_ARGS",
                            "e_SCRIPT_OPAQUE",
                            "e_SCRIPT_READONLY",
                            "e_SCRIPT_RECOGNIZED_INVALID",
                            "e_SCRIPT_TOO_MANY_ARGS",
                            "e_SCRIPT_UNKNOWN",
                            "e_SCRIPT_WARNING",
                            "e_SHORTBUFFER",
                            "e_SKIP",
                            "e_STARTUP",
                            "e_TRUE",
                            "e_WARNING",
                            "fBLKS_FORCE",
                            "fBLKS_RAW",
                            "fBLKW_LEAF",
                            "fBLKW_PARAM",
                            "fCHMOD_INPUT",
                            "fCHMOD_MULTILINK",
                            "fCHMOD_OUTPUT",
                            "fCMDARG_CAN_QUERY_WHEN_DISABLED",
                            "fCMDARG_CHANGED",
                            "fCMDARG_DIALOG_ALWAYS_SETS",
                            "fCMDARG_DIALOG_DIVIDER_AFTER_ARG",
                            "fCMDARG_DYNAMICHINTS",
                            "fCMDARG_DYNAMIC_DEFAULTS",
                            "fCMDARG_HIDDEN",
                            "fCMDARG_INIT_ONLY",
                            "fCMDARG_OPTIONAL",
                            "fCMDARG_QUERY",
                            "fCMDARG_READONLY",
                            "fCMDARG_REQFORVARIABLE",
                            "fCMDARG_REQFORVAR_SET",
                            "fCMDARG_STATE_ONLY",
                            "fCMDARG_VALUE_SET",
                            "fCMDARG_VARIABLE",
                            "fCMDBLOCK_POSTMODE",
                            "fCMDBLOCK_PRESERVE_SELECTION",
                            "fCMDBLOCK_SANDBOXED",
                            "fCMDBLOCK_STEPUNDO",
                            "fCMDBLOCK_TOP_OF_CYCLE_SAFE",
                            "fCMDBLOCK_UI",
                            "fCMDBLOCK_UNDO_AFTER_EXEC",
                            "fCMDBLOCK_UNDO_UI",
                            "fCMDHINT_SUPPRESS_ERRORS",
                            "fCMDHINT_SUPPRESS_INFOS",
                            "fCMDHINT_SUPPRESS_WARNINGS",
                            "fCMDNOTIFY_CHANGE_ALL",
                            "fCMDNOTIFY_DATATYPE",
                            "fCMDNOTIFY_DISABLE",
                            "fCMDNOTIFY_LABEL",
                            "fCMDNOTIFY_VALUE",
                            "fCMDSANDBOX_ALLOW_UI",
                            "fCMD_ALERT_DEFAULT",
                            "fCMD_ALERT_MASK",
                            "fCMD_ALERT_NONE",
                            "fCMD_ALERT_SHOWERR",
                            "fCMD_ALERT_SHOWERR_FORCESUB",
                            "fCMD_ALERT_SHOWERR_FORCESUB_OFF",
                            "fCMD_ALERT_SYNTAXERR",
                            "fCMD_DEFER_INTERACTIVITY",
                            "fCMD_EXEC_ALWAYSGETARGS",
                            "fCMD_EXEC_DEFAULT",
                            "fCMD_EXEC_GETARGS",
                            "fCMD_EXEC_GETARGS_FORCESUB",
                            "fCMD_EXEC_GETARGS_FORCESUB_OFF",
                            "fCMD_EXEC_MASK",
                            "fCMD_EXEC_NONE",
                            "fCMD_EXEC_PARENT_FLAGS_PASSED_MARKER",
                            "fCMD_EXEC_TOGGLED",
                            "fCMD_EXTRA1",
                            "fCMD_EXTRA2",
                            "fCMD_INIT_ONLY",
                            "fCMD_INTERNAL",
                            "fCMD_MODEL",
                            "fCMD_MOUSEDOWNOK",
                            "fCMD_MUSTSETARG",
                            "fCMD_PARSED_FLAGS",
                            "fCMD_POSTCMD",
                            "fCMD_QUIET",
                            "fCMD_REPEAT",
                            "fCMD_SANDBOXED",
                            "fCMD_SELECT",
                            "fCMD_SELECTIONLESS",
                            "fCMD_STICKYLESS",
                            "fCMD_TYPES",
                            "fCMD_UI",
                            "fCMD_UNDO",
                            "fCMD_UNDOSPECIAL",
                            "fCMD_UNDO_AFTER_EXEC",
                            "fCMD_UNDO_INTERNAL",
                            "fCMD_UNDO_UI",
                            "fDCETYPE_DIR",
                            "fDCETYPE_DIR_AS_FILE",
                            "fDCETYPE_FILE",
                            "fDCETYPE_FILTERED",
                            "fDCETYPE_READONLY",
                            "fDCETYPE_REFERENCE",
                            "fDCETYPE_SYNTHETIC",
                            "fDEFORMATION_NONLINEAR",
                            "fDEFORMATION_RIGIDXFRM",
                            "fDEFORMER_IS_FALLOFF",
                            "fDEFORMER_NO_OFFSET",
                            "fDEFORMER_NO_WEIGHT",
                            "fDEFORMER_REQ_OFFSET",
                            "fDEFORMER_REQ_WEIGHT",
                            "fDEFORMER_USE_LINEAR",
                            "fECHAN_FORCE",
                            "fECHAN_LOCATOR",
                            "fECHAN_READ",
                            "fECHAN_SETUP",
                            "fECHAN_WRITE",
                            "fEXMSG_LOWLEVEL",
                            "fEXMSG_OVERRIDE",
                            "fFACET_DISPLACED",
                            "fFACET_NORMALIZED",
                            "fFACET_OBJECT_POSITION",
                            "fFILEDIALOG_DIRECTORY",
                            "fFILEDIALOG_LOAD",
                            "fFILEDIALOG_MULTIPLE",
                            "fFILEDIALOG_NOFORMATS",
                            "fFILEDIALOG_OVERWRITE",
                            "fFILEDIALOG_SAVE",
                            "fFORCE_ANGULAR",
                            "fFORCE_MASS",
                            "fFORCE_VELOCITY",
                            "fFORMDROPPOS_BOTTOM",
                            "fFORMDROPPOS_EXTENT_COMPONENT",
                            "fFORMDROPPOS_EXTENT_PANE",
                            "fFORMDROPPOS_LEFT",
                            "fFORMDROPPOS_NONE",
                            "fFORMDROPPOS_ON",
                            "fFORMDROPPOS_ON_ANY",
                            "fFORMDROPPOS_ON_HOT",
                            "fFORMDROPPOS_ON_LABEL",
                            "fFORMDROPPOS_RIGHT",
                            "fFORMDROPPOS_TOP",
                            "fFRAME_ALIVE",
                            "fFRAME_CHANGED",
                            "fGRPTYPE_BOTH",
                            "fGRPTYPE_CHANNEL",
                            "fGRPTYPE_ITEM",
                            "fIMAGEPROC_EVENT_CHANGED",
                            "fIMAGEPROC_EVENT_MAINTENANCE",
                            "fIMD_MASK",
                            "fIMV_MASK",
                            "fINITIALIZE_AGAIN",
                            "fINITIALIZE_BRUSH",
                            "fINITIALIZE_DIRECT",
                            "fINITIALIZE_EVENT",
                            "fIPEVENT_EVENT",
                            "fIPEVENT_FLAGS",
                            "fITEMINF_POSITION",
                            "fITEMINF_PROBEWEIGHTS",
                            "fITEMINF_ROTATION",
                            "fITEMINF_SCALE",
                            "fITEMLOAD_CURRENT",
                            "fITEMLOAD_IMPORT",
                            "fKEYBREAK_SLOPE",
                            "fKEYBREAK_VALUE",
                            "fKEYBREAK_WEIGHT",
                            "fLINT_NOCOOKING",
                            "fLINT_NOPROMPT",
                            "fLINT_NORESULT",
                            "fLINT_NOUNDOS",
                            "fLOAD_OPAQUE",
                            "fLOAD_OPTIONS",
                            "fNAV_HOT_POS",
                            "fNAV_HOT_ROT",
                            "fNAV_HOT_ZOOM",
                            "fNEWBORN_REPLACE",
                            "fOBS_MODIFY",
                            "fOBS_MUSTEXIST",
                            "fOBS_WRITE",
                            "fPAINTBRUSH_2D",
                            "fPAINTBRUSH_3D",
                            "fPAINTBRUSH_3D_RGBA",
                            "fPAINTSTEP_BUMP",
                            "fPAINT_NOROT",
                            "fPAINT_ROLLER",
                            "fPAINT_STAMP",
                            "fPFILT_ALIVERUN",
                            "fPFILT_DERIVSTAGE",
                            "fPFILT_POSTSTAGE",
                            "fPFILT_PRESTAGE",
                            "fPOPFLAGS_DISABLED",
                            "fPOPFLAGS_MIXED",
                            "fPOPFLAGS_SELECTED",
                            "fPOPFLAGS_UNSELECTED",
                            "fPRESETRECOGNIZE_CAN_APPLY",
                            "fPRESETRECOGNIZE_CAN_DO",
                            "fPREV_EVENT_CINE",
                            "fPREV_EVENT_IMAGE",
                            "fPREV_EVENT_ITEM",
                            "fPREV_EVENT_MESH",
                            "fPREV_EVENT_MESH_BIN",
                            "fPREV_EVENT_MESH_FEATURE",
                            "fPREV_UPDATE_BACKDROP",
                            "fPREV_UPDATE_CAMERA",
                            "fPREV_UPDATE_CLIP",
                            "fPREV_UPDATE_FORCE",
                            "fPREV_UPDATE_GEOMETRY",
                            "fPREV_UPDATE_IMAGE",
                            "fPREV_UPDATE_LIGHT",
                            "fPREV_UPDATE_SHADING",
                            "fRAY_EVAL_IRRADIANCE",
                            "fRAY_EVAL_MATERIAL",
                            "fRAY_EVAL_NOFOG",
                            "fRAY_EVAL_NORMAL",
                            "fRAY_EVAL_OPACITY",
                            "fRAY_EVAL_PERSPENV",
                            "fRAY_EVAL_SHADING",
                            "fRAY_SCOPE_BACKFACE",
                            "fRAY_SCOPE_BACKONLY",
                            "fRAY_SCOPE_ENVIRONMENT",
                            "fRAY_SCOPE_IMPLICITSURF",
                            "fRAY_SCOPE_OTHERSURF",
                            "fRAY_SCOPE_POLYGONS",
                            "fRAY_SCOPE_SAMESURF",
                            "fRAY_SCOPE_VOLUMETRICS",
                            "fRAY_TYPE_CAMERA",
                            "fRAY_TYPE_CAUSTIC",
                            "fRAY_TYPE_CLIPPING",
                            "fRAY_TYPE_INDIRECT",
                            "fRAY_TYPE_OCCLUSION",
                            "fRAY_TYPE_PREPASS",
                            "fRAY_TYPE_REFLECT",
                            "fRAY_TYPE_REFRACT",
                            "fRAY_TYPE_SHADOW",
                            "fRAY_TYPE_SHADOWMAP",
                            "fRAY_TYPE_SHADOWVOL",
                            "fRAY_TYPE_SHADOW_INFO",
                            "fRAY_TYPE_SUBSURFACE",
                            "fRAY_TYPE_TEXTURE",
                            "fREADSTRING_FORCE",
                            "fREADSTRING_PARTIAL",
                            "fREADSTRING_RAW",
                            "fRENDERCACHE_FORCE_FULL_UPDATE",
                            "fRENDERCACHE_FULL",
                            "fRENDERCACHE_GEOCACHE_DISPLACE",
                            "fRENDERCACHE_GEOCACHE_GENFUR",
                            "fRENDERCACHE_TRACK_CURRENT_SCENE",
                            "fRENDERCACHE_TURN_OFF_AUTO_UPDATES",
                            "fRENDEROPT_IC_ONLY",
                            "fRENDEROPT_NO_CLEANUP",
                            "fRENDEROPT_NO_IMAGE",
                            "fRENDEROPT_NO_WAITING",
                            "fSCENENAME_SHORT",
                            "fSCENENAME_STAR",
                            "fSCON_MULTIPLE",
                            "fSCON_ORDERED",
                            "fSCON_PERITEM",
                            "fSCON_REVERSE",
                            "fSCON_SINGLE",
                            "fSCON_USESERVER",
                            "fSCRIPTSRV_CREATE",
                            "fSCRIPTSRV_LINE_ACTION",
                            "fSCRIPTSRV_REMOVE",
                            "fSESSIONSTAGE_READY",
                            "fSESSIONSTAGE_SHUTDOWN",
                            "fSESSIONSTAGE_STARTUP",
                            "fSHADERFLAGS_NEED_UVS",
                            "fSHADERFLAGS_USE_CAMERA",
                            "fSHADERFLAGS_USE_CLIP",
                            "fSHADERFLAGS_USE_GROUP",
                            "fSHADERFLAGS_USE_LIGHT",
                            "fSHADERFLAGS_USE_LOCATOR",
                            "fSIM_CONTINUOUS",
                            "fSIM_NOCACHE",
                            "fSUBD_STATUS_POSITION",
                            "fSUBD_STATUS_TOPOLOGY",
                            "fSUBD_STATUS_VALID",
                            "fSURF_CLIPPING",
                            "fSURF_CLPMATTE",
                            "fSURF_CMPSHADE",
                            "fSURF_DOUBLE",
                            "fSURF_IMPSHADE",
                            "fSURF_PHYSICAL",
                            "fSURF_RADINTER",
                            "fSURF_REFLBLUR",
                            "fSURF_REFLSPEC",
                            "fSURF_RNDSAME",
                            "fSURF_RNDWIDTH",
                            "fSURF_SAMESURF",
                            "fSURF_SHADCAST",
                            "fSURF_SHADRECV",
                            "fSURF_TANSHADE",
                            "fSURF_TRANSP",
                            "fSURF_USEREFIDX",
                            "fSURF_VISCAM",
                            "fSURF_VISIND",
                            "fSURF_VISOCCL",
                            "fSURF_VISREFL",
                            "fSURF_VISREFR",
                            "fSURF_VISSUBS",
                            "fTBLX_FILT_PIXEL",
                            "fTBLX_FILT_RELATIVE",
                            "fTBLX_FILT_STRIP",
                            "fTBLX_PREVIEW_UPDATE_GEOMETRY",
                            "fTBLX_PREVIEW_UPDATE_NONE",
                            "fTBLX_PREVIEW_UPDATE_SHADING",
                            "fTBLX_VOL_CLIPPING",
                            "fTBLX_VOL_IMPSURF",
                            "fTBLX_VOL_LOCAL_SHADER",
                            "fTBLX_VOL_VOLUME",
                            "fTMOD_AUTOACTIVATE",
                            "fTMOD_AUTORESET",
                            "fTMOD_BRUSHRESET",
                            "fTMOD_DRAW_3D",
                            "fTMOD_DRAW_INACTIVE",
                            "fTMOD_DRAW_PIXEL",
                            "fTMOD_HANDLERESET",
                            "fTMOD_I0_ATTRHAUL",
                            "fTMOD_I0_INPUT",
                            "fTMOD_I0_NOSELECT",
                            "fTMOD_I1_ATTRHAUL",
                            "fTMOD_I1_INPUT",
                            "fTMOD_I1_NOSELECT",
                            "fTMOD_INITAGAIN",
                            "fTMOD_I_BRUSH",
                            "fTMOD_I_CURVE",
                            "fTMOD_I_GENERAL",
                            "fTMOD_MODELSPACE",
                            "fTMOD_NEEDSHAUL",
                            "fTMOD_NOCLONE",
                            "fTMOD_ROLLOVERS",
                            "fTMOD_SELECTTHROUGH",
                            "fTRACK_ACTIVE",
                            "fTRACK_BK_RAYCAST",
                            "fTRACK_EDGE",
                            "fTRACK_ENTER",
                            "fTRACK_EXIT",
                            "fTRACK_INACTIVE",
                            "fTRACK_LAZY",
                            "fTRACK_LOOP1",
                            "fTRACK_LOOP2",
                            "fTRACK_MOVE",
                            "fTRACK_POLY",
                            "fTRACK_RAYCAST",
                            "fTRACK_VERX",
                            "fUIHINTCHAN_INPUT_ONLY",
                            "fUIHINTCHAN_OUTPUT_ONLY",
                            "fUIHINTCHAN_SUGGESTED",
                            "fUSERIDLE_APP_MUST_BE_ACTIVE",
                            "fUSERIDLE_CMD_STACK_EMPTY",
                            "fUSERIDLE_EDIT_FIELDS_UNFOCUSED",
                            "fUSERIDLE_KEYS_UP",
                            "fUSERIDLE_MODIFIER_KEYS_UP",
                            "fUSERIDLE_MOUSE_BUTTONS_UP",
                            "fUSERIDLE_NO_DIALOGS_OPEN",
                            "fUSERIDLE_NO_POPS_OPEN",
                            "fUSERIDLE_NO_SUB_INPUT_LOOP",
                            "fVALHINT_FORM_COMMAND_LIST",
                            "fVALHINT_ITEMS",
                            "fVALHINT_ITEMS_NONE",
                            "fVALHINT_POPUPS",
                            "fVALHINT_POPUP_ALPHA_SORT",
                            "fVALHINT_POPUP_DIRECT",
                            "fVDRAW_AXARROW",
                            "fVDRAW_CUSTOM0",
                            "fVDRAW_CUSTOM1",
                            "fVDRAW_CUSTOM2",
                            "fVDRAW_CUSTOM3",
                            "fVDRAW_DASH",
                            "fVDRAW_FILL",
                            "fVDRAW_MASK",
                            "fVHANDLE_CON_LINEAR",
                            "fVHANDLE_CON_PLANAR",
                            "fVHANDLE_DRAW_BOX",
                            "fVHANDLE_DRAW_LINE",
                            "fVHANDLE_DRAW_PLUS",
                            "fVHANDLE_DRAW_POINT",
                            "fVHANDLE_DRAW_X",
                            "fVHANDLE_RESERVED",
                            "fVHANDLE_VAL_VECTOR",
                            "fVOLUME_RAY_COLOR",
                            "fVOLUME_RAY_OPACITY",
                            "fVT_GET",
                            "fVT_OPTIONAL",
                            "fVT_SET",
                            "fXFRMSCAN_ALTAXIS",
                            "fXFRMSCAN_ALTCENTER",
                            "fXFRMSCAN_WEIGHT",
                            "f_EVTRAN_CONSTRAIN_SNAP_LINE",
                            "f_EVTRAN_CONSTRAIN_SNAP_PLANE",
                            "f_EVTRAN_NOCONST",
                            "f_EVTRAN_NOQUANT",
                            "f_EVTRAN_NOSNAP",
                            "f_EVTRAN_SNAPS",
                            "f_EVTRAN_UNSNAPPED",
                            "f_GEOCONS_POINT",
                            "f_GEOCONS_VECTOR",
                            "f_GUIDE_LINE",
                            "f_GUIDE_PLANE",
                            "f_GUIDE_POINT",
                            "f_GUIDE_SNAP",
                            "f_GUIDE_SNAP_ALLAXES",
                            "f_GUIDE_SNAP_AXIS_X",
                            "f_GUIDE_SNAP_AXIS_Y",
                            "f_GUIDE_SNAP_AXIS_Z",
                            "f_GUIDE_SNAP_NONE",
                            "f_LAYERSCAN_ACTIVE",
                            "f_LAYERSCAN_ALL",
                            "f_LAYERSCAN_BACKGROUND",
                            "f_LAYERSCAN_EDIT",
                            "f_LAYERSCAN_EDIT_DVRTS",
                            "f_LAYERSCAN_EDIT_EDGES",
                            "f_LAYERSCAN_EDIT_POLVRT",
                            "f_LAYERSCAN_EDIT_POLYS",
                            "f_LAYERSCAN_EDIT_VERTS",
                            "f_LAYERSCAN_MARKALL",
                            "f_LAYERSCAN_MARKDVRTS",
                            "f_LAYERSCAN_MARKEDGES",
                            "f_LAYERSCAN_MARKPOLYS",
                            "f_LAYERSCAN_MARKVERTS",
                            "f_LAYERSCAN_PRIMARY",
                            "f_LAYERSCAN_WRITEMESH",
                            "f_LAYER_ACTIVE",
                            "f_LAYER_BACKGROUND",
                            "f_LAYER_FOREGROUND",
                            "f_LAYER_INACTIVE",
                            "f_LAYER_MAIN",
                            "f_LOADIMG_SEARCH_PATHS",
                            "f_LOADIMG_USER_REPLACE",
                            "f_MESHEDIT_GEOMETRY",
                            "f_MESHEDIT_MAP_CONTINUITY",
                            "f_MESHEDIT_MAP_MORPH",
                            "f_MESHEDIT_MAP_OTHER",
                            "f_MESHEDIT_MAP_UV",
                            "f_MESHEDIT_POINTS",
                            "f_MESHEDIT_POLYGONS",
                            "f_MESHEDIT_POL_TAGS",
                            "f_MESHEDIT_POL_TYPE",
                            "f_MESHEDIT_POSITION",
                            "f_PAINT_INK_3D",
                            "f_PAINT_INK_PERPIXEL",
                            "f_PAINT_INK_REPLACE",
                            "f_PAINT_INK_STAMP",
                            "f_PARTGEN_ABSSIZE",
                            "f_PARTGEN_CONNECT",
                            "f_PARTGEN_CURVE",
                            "f_PARTGEN_MIRROR",
                            "f_PATHKNOT_BROKEN",
                            "f_PROPT_ALLOW_NONSURF",
                            "f_RBF_DITHER",
                            "f_RBF_IS_FACTORY_NAME",
                            "f_RBF_NO_AA",
                            "f_SCENETARG_CINECHANGED",
                            "f_SCENETARG_GONATIVE",
                            "f_SCENETARG_NODEFAULTS",
                            "f_SCENETARG_SUBCINE",
                            "f_SELECTION_CURRENT",
                            "f_SELECTION_HISTORY",
                            "f_SELECTION_LAST",
                            "f_SELECTION_NONE",
                            "f_SELECTION_PRIMARY",
                            "f_SELECTION_SECONDARY",
                            "f_SELPACKET_UNDOABLE",
                            "f_SHOULDBE_ATTR",
                            "f_TFX_BW",
                            "f_TFX_INPUT",
                            "f_TFX_READ",
                            "f_TFX_WRITE",
                            "iACTIONCLIP_TYPE_ANIM",
                            "iACTIONCLIP_TYPE_POSE",
                            "iATTRUI_ANY",
                            "iAUDIO_CHAN_MONO",
                            "iAUDIO_CHAN_STEREO",
                            "iAUDIO_TYPE_F32",
                            "iAUDIO_TYPE_I16",
                            "iAUDIO_TYPE_U8",
                            "iBOOLEANSTYLE_BUTTON",
                            "iBOOLEANSTYLE_CHECKMARK",
                            "iBOOLEANSTYLE_DEFAULT",
                            "iCHANMODE_RGB",
                            "iCHANMODE_RGBA",
                            "iCHANMODE_SCALAR",
                            "iCHANMODE_UV",
                            "iCHANMODE_UVW",
                            "iCHANMODE_XY",
                            "iCHANMODE_XYZ",
                            "iCHANTYPE_EVAL",
                            "iCHANTYPE_FLOAT",
                            "iCHANTYPE_GRADIENT",
                            "iCHANTYPE_INTEGER",
                            "iCHANTYPE_NONE",
                            "iCHANTYPE_STORAGE",
                            "iCMDENTRYTYPE_BLOCK",
                            "iCMDENTRYTYPE_COMMAND",
                            "iCMDENTRYTYPE_INVALID",
                            "iCMDREFIRE_BLOCK",
                            "iCMDREFIRE_COMMAND",
                            "iCMDREFIRE_NONE",
                            "iCMDREFIRE_PENDING",
                            "iCMDSTATUS_EXECUTING_STARTUP_COMMANDS",
                            "iCMDSTATUS_INITIALIZING",
                            "iCMDSTATUS_NORMAL",
                            "iCMDSYSEVENT_TYPE_QUIET",
                            "iCMDSYSEVENT_TYPE_ROOT",
                            "iCMDSYSEVENT_TYPE_SUB",
                            "iCMD_EXEC_WITH_PARENTS_FLAGS",
                            "iCMD_SEP_BACKSLASH",
                            "iCMD_SEP_COLON",
                            "iCMD_SEP_DOT",
                            "iCMD_SEP_SLASH",
                            "iCM_ACT_ADD",
                            "iCM_ACT_ADDMAP",
                            "iCM_ACT_ALL",
                            "iCM_ACT_AXIS",
                            "iCM_ACT_BAKE",
                            "iCM_ACT_CANCEL",
                            "iCM_ACT_CANCELDROP",
                            "iCM_ACT_CHOOSECOLOR",
                            "iCM_ACT_CLEAR",
                            "iCM_ACT_CLOSE",
                            "iCM_ACT_CONTINUE",
                            "iCM_ACT_COPY",
                            "iCM_ACT_CREATEPRESET",
                            "iCM_ACT_CUT",
                            "iCM_ACT_DEFORM",
                            "iCM_ACT_DELETE",
                            "iCM_ACT_DONE",
                            "iCM_ACT_DUPLICATE",
                            "iCM_ACT_ERROR",
                            "iCM_ACT_EXPORT",
                            "iCM_ACT_FUTURE",
                            "iCM_ACT_HELP",
                            "iCM_ACT_HIDE",
                            "iCM_ACT_INFO",
                            "iCM_ACT_INSTANCE",
                            "iCM_ACT_LOAD",
                            "iCM_ACT_LOADIMAGE",
                            "iCM_ACT_LOADSEQ",
                            "iCM_ACT_MOVE",
                            "iCM_ACT_NAME",
                            "iCM_ACT_NEW",
                            "iCM_ACT_NEWIMAGE",
                            "iCM_ACT_NEWSEQ",
                            "iCM_ACT_NO",
                            "iCM_ACT_NOALL",
                            "iCM_ACT_NOSAVE",
                            "iCM_ACT_OK",
                            "iCM_ACT_PASTE",
                            "iCM_ACT_PERFORMDROP",
                            "iCM_ACT_PROJ",
                            "iCM_ACT_PROPS",
                            "iCM_ACT_QUIT",
                            "iCM_ACT_RELOAD",
                            "iCM_ACT_RENAME",
                            "iCM_ACT_REPLACE",
                            "iCM_ACT_SAVE",
                            "iCM_ACT_SAVEAS",
                            "iCM_ACT_SHOWM",
                            "iCM_ACT_TYPE",
                            "iCM_ACT_VOID",
                            "iCM_ACT_WARNING",
                            "iCM_ACT_YES",
                            "iCM_ACT_YESALL",
                            "iCM_SPC_ALL",
                            "iCM_SPC_ALLFILES",
                            "iCM_SPC_ALLFORMATS",
                            "iCM_SPC_DEFAULT",
                            "iCM_SPC_MIXED",
                            "iCM_SPC_NEW",
                            "iCM_SPC_NONE",
                            "iCM_SPC_PLUGINS",
                            "iCM_SPC_PRIVATE",
                            "iCM_SPC_UNKNOWN",
                            "iCM_SPC_UNNAMED",
                            "iCM_SPC_UNTITLE",
                            "iCM_SPC_VOID",
                            "iCOLLECT_DEL_DEEP",
                            "iCOLLECT_DEL_SHALLOW",
                            "iCOLLECT_IMPORT",
                            "iCOLLECT_INSTANCES",
                            "iCTAG_NULL",
                            "iDCEGRID_NONE",
                            "iDCEMARKUP_UPDATED_BOTH",
                            "iDCEMARKUP_UPDATED_SHARED",
                            "iDCEMARKUP_UPDATED_USER",
                            "iDCE_CACHEDTHUMBSIZE_128",
                            "iDCE_CACHEDTHUMBSIZE_256",
                            "iDCE_CACHEDTHUMBSIZE_32",
                            "iDCE_CACHEDTHUMBSIZE_512",
                            "iDCE_CACHEDTHUMBSIZE_64",
                            "iDCE_CAHCEDTHUMBSIZE_COUNT",
                            "iDCE_MANUALORDER_FIRST",
                            "iDCE_MANUALORDER_LAST",
                            "iDCE_THUMBSIZE_FULL",
                            "iDCE_THUMBSIZE_IDEAL_ONLY",
                            "iDCFM_DYNAMIC_THUMBNAILS",
                            "iDEFAULT_COLORSPACE_16BIT",
                            "iDEFAULT_COLORSPACE_8BIT",
                            "iDEFAULT_COLORSPACE_FLOAT",
                            "iDEFAULT_COLORSPACE_GREY",
                            "iDEFAULT_COLORSPACE_NONE",
                            "iENVSIDE_BOTH",
                            "iENVSIDE_IN",
                            "iENVSIDE_OUT",
                            "iENV_CONSTANT",
                            "iENV_CONSTANT_KEEP_SLOPE",
                            "iENV_LINEAR",
                            "iENV_NONE",
                            "iENV_OFFSETREPEAT",
                            "iENV_OFFSETREPEAT_KEEP_SLOPE",
                            "iENV_OSCILLATE",
                            "iENV_OSCILLATE_KEEP_SLOPE",
                            "iENV_REPEAT",
                            "iENV_RESET",
                            "iENVv_INTERP_CURVE",
                            "iENVv_INTERP_LINEAR",
                            "iENVv_INTERP_STEPPED",
                            "iFILECOMP_BASENAME",
                            "iFILECOMP_DIRECTORY",
                            "iFILECOMP_EXTENSION",
                            "iFILECOMP_ROOTNAME",
                            "iFILEMODE_READ",
                            "iFILEMODE_WRITE",
                            "iFILETYPE_DIRECTORY",
                            "iFILETYPE_NONE",
                            "iFILETYPE_NORMAL",
                            "iFILETYPE_UNKNOWN",
                            "iFILETYPE_UNRESOLVED",
                            "iFILT_GENERATE",
                            "iFILT_MODIFY",
                            "iFILT_SOURCE",
                            "iFLOATTYPE_INFINITY",
                            "iFLOATTYPE_NAN",
                            "iFLOATTYPE_NUMBER",
                            "iHITPART_INVIS",
                            "iICVAL_LIGHT_SHADTYPE_NONE",
                            "iICVAL_LIGHT_SHADTYPE_PORTAL",
                            "iICVAL_LIGHT_SHADTYPE_RAYTRACE",
                            "iICVAL_LIGHT_SHADTYPE_SHADOWMAP",
                            "iICVAL_SCENE_UPAXIS_X",
                            "iICVAL_SCENE_UPAXIS_Y",
                            "iICVAL_SCENE_UPAXIS_Z",
                            "iIMAGEPROC_EVENT_CHANGED_BLOOM_ENABLED",
                            "iIMAGEPROC_EVENT_CHANGED_BLOOM_RADIUS",
                            "iIMAGEPROC_EVENT_CHANGED_BLOOM_THRESHOLD",
                            "iIMAGEPROC_EVENT_CHANGED_COLORIZATION",
                            "iIMAGEPROC_EVENT_CHANGED_HUE_OFFSET",
                            "iIMAGEPROC_EVENT_CHANGED_INPUT_BLACK_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_INPUT_GRAY_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_INPUT_GRAY_RGB_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_INPUT_MAX_RGB_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_INPUT_MIN_RGB_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_INPUT_WHITE_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_OPERATORS",
                            "iIMAGEPROC_EVENT_CHANGED_OUTPUT_BLACK_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_OUTPUT_COLORSPACE",
                            "iIMAGEPROC_EVENT_CHANGED_OUTPUT_GAMMA",
                            "iIMAGEPROC_EVENT_CHANGED_OUTPUT_MAX_RGB_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_OUTPUT_MIN_RGB_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_OUTPUT_WHITE_LEVEL",
                            "iIMAGEPROC_EVENT_CHANGED_RESPECT_RENDER_VIEW_GAMMA_PREF",
                            "iIMAGEPROC_EVENT_CHANGED_SATURATION",
                            "iIMAGEPROC_EVENT_CHANGED_SAVE_PROCESSED",
                            "iIMAGEPROC_EVENT_CHANGED_SOURCE_IMAGE_GAMMA",
                            "iIMAGEPROC_EVENT_CHANGED_TARGET_COLOR",
                            "iIMAGEPROC_EVENT_CHANGED_TONE_MAPPING",
                            "iIMAGEPROC_EVENT_CHANGED_VIGNETTE_AMOUNT",
                            "iIMAGEPROC_EVENT_RESET",
                            "iIMC_ALPHA",
                            "iIMC_BLUE",
                            "iIMC_GREEN",
                            "iIMC_RED",
                            "iIMD_BYTE",
                            "iIMD_FLOAT",
                            "iIMP_GREY8",
                            "iIMP_GREYFP",
                            "iIMP_IGREY8",
                            "iIMP_IRGB24",
                            "iIMP_IRGBA32",
                            "iIMP_RGB24",
                            "iIMP_RGBA32",
                            "iIMP_RGBAFP",
                            "iIMP_RGBFP",
                            "iIMT_INDEX",
                            "iIMT_MASK",
                            "iIMV_GREY",
                            "iIMV_RGB",
                            "iIMV_RGBA",
                            "iIP_ALL_OPERATORS_DISABLED",
                            "iIP_ALL_OPERATORS_ENABLED",
                            "iIP_APPLY_DISPLAY_COLORSPACE",
                            "iIP_BLOOM",
                            "iIP_COLORIZATION",
                            "iIP_COMPONENT_STEREO",
                            "iIP_DITHER",
                            "iIP_HUE_OFFSET",
                            "iIP_INPUT_BLACK_LEVEL",
                            "iIP_INPUT_GRAY_LEVEL",
                            "iIP_INPUT_MAX_RGB_LEVEL",
                            "iIP_INPUT_MIN_RGB_LEVEL",
                            "iIP_INPUT_RGB_GRAY_LEVEL",
                            "iIP_INPUT_WHITE_LEVEL",
                            "iIP_NO_OPERATOR_OVERRIDE",
                            "iIP_OUTPUT_BLACK_LEVEL",
                            "iIP_OUTPUT_GAMMA",
                            "iIP_OUTPUT_MAX_RGB_LEVEL",
                            "iIP_OUTPUT_MIN_RGB_LEVEL",
                            "iIP_OUTPUT_WHITE_LEVEL",
                            "iIP_SATURATION",
                            "iIP_SOURCE_IMAGE_GAMMA",
                            "iIP_STEREO",
                            "iIP_TONE_MAPPING",
                            "iIP_USE_DISPLAY_GAMMA_PREF",
                            "iIP_VIGNETTE",
                            "iLINT_ALTERNATE",
                            "iLINT_CURRENT",
                            "iLOCATOR_LOCAL",
                            "iLOCATOR_WORLD",
                            "iLOGCLASS_BLOCK",
                            "iLOGCLASS_MESSAGE",
                            "iLOGCLASS_PAIRS",
                            "iLPAT_DASH",
                            "iLPAT_DASHLONG",
                            "iLPAT_DASHXLONG",
                            "iLPAT_DOTDASH",
                            "iLPAT_DOTS",
                            "iLPAT_DOTSLONG",
                            "iMARK_ANY",
                            "iMOTION_1D",
                            "iMOTION_ANGULAR",
                            "iMOTION_RADIAL",
                            "iNODAL_NOT_DRIVEN",
                            "iOBS_CLEAR",
                            "iOBS_POP",
                            "iOBS_PUSH",
                            "iORTHOv_BACK",
                            "iORTHOv_BOTTOM",
                            "iORTHOv_FRONT",
                            "iORTHOv_LEFT",
                            "iORTHOv_RIGHT",
                            "iORTHOv_TOP",
                            "iOSTYPE_LINUX",
                            "iOSTYPE_MACOSX",
                            "iOSTYPE_UNKNOWN",
                            "iOSTYPE_WIN32",
                            "iPAINTMODE_ADD",
                            "iPAINTMODE_MAX",
                            "iPAINTMODE_SET",
                            "iPBMETRICS_ALL",
                            "iPBMETRICS_BASIC_INFO",
                            "iPBMETRICS_EXTRA_ATTRIBUTES",
                            "iPBMETRICS_THUMBNAIL_IMAGE",
                            "iPBTHUMBSIZE_FULL",
                            "iPFILT_FRAME",
                            "iPFILT_NEW_PARTICLE",
                            "iPFILT_PARTICLE",
                            "iPFILT_RUN",
                            "iPRESETRECOGNIZE_ALL",
                            "iPREVIEW_DRAFT_QUALITY",
                            "iPREVIEW_EXTENDED_QUALITY",
                            "iPREVIEW_FINAL_QUALITY",
                            "iPROCESS_ACCURATE",
                            "iPROCESS_FAST",
                            "iPROCESS_MEDIUM",
                            "iPSUB_BOUND_CREASE",
                            "iPSUB_BOUND_CREASEEDGES",
                            "iPSUB_BOUND_SMOOTH",
                            "iPTYP_BEZIER",
                            "iPTYP_BEZR",
                            "iPTYP_CRVFIL",
                            "iPTYP_CURV",
                            "iPTYP_CURVE",
                            "iPTYP_FACE",
                            "iPTYP_LINE",
                            "iPTYP_PSUB",
                            "iPTYP_SPCH",
                            "iPTYP_SUBD",
                            "iPTYP_TEXT",
                            "iRBD_FLOAT",
                            "iRBD_FLOAT3",
                            "iRBD_OTHER",
                            "iRENDERCACHE_GEOVERT_DPDU",
                            "iRENDERCACHE_GEOVERT_DPDV",
                            "iRENDERCACHE_GEOVERT_FUR",
                            "iRENDERCACHE_GEOVERT_ONRM",
                            "iRENDERCACHE_GEOVERT_OPOS",
                            "iRENDERCACHE_GEOVERT_OVEL",
                            "iRENDERCACHE_GEOVERT_RAD",
                            "iRENDERCACHE_GEOVERT_UV",
                            "iRENDEREYE_BOTH",
                            "iRENDEREYE_LEFT",
                            "iRENDEREYE_MONO",
                            "iRENDEREYE_RIGHT",
                            "iRENDEROUTPUT_ALPHA",
                            "iRENDEROUTPUT_COLOR",
                            "iRENDEROUTPUT_DEPTH",
                            "iRENDEROUTPUT_DIFF",
                            "iRENDEROUTPUT_DIFFDIR",
                            "iRENDEROUTPUT_DIFFIND",
                            "iRENDEROUTPUT_DIFFUNS",
                            "iRENDEROUTPUT_DPDU",
                            "iRENDEROUTPUT_DPDV",
                            "iRENDEROUTPUT_DRIVER_A",
                            "iRENDEROUTPUT_DRIVER_B",
                            "iRENDEROUTPUT_DRIVER_C",
                            "iRENDEROUTPUT_DRIVER_D",
                            "iRENDEROUTPUT_GINC",
                            "iRENDEROUTPUT_GNORM",
                            "iRENDEROUTPUT_ICPOS",
                            "iRENDEROUTPUT_ICVAL",
                            "iRENDEROUTPUT_ILLUM",
                            "iRENDEROUTPUT_ILLUMDIR",
                            "iRENDEROUTPUT_ILLUMIND",
                            "iRENDEROUTPUT_ILLUMUNS",
                            "iRENDEROUTPUT_INVALID",
                            "iRENDEROUTPUT_LUMI",
                            "iRENDEROUTPUT_MDIFF",
                            "iRENDEROUTPUT_MDIFFAMT",
                            "iRENDEROUTPUT_MDIFFCOL",
                            "iRENDEROUTPUT_MDIFFENG",
                            "iRENDEROUTPUT_MDIFFROUGH",
                            "iRENDEROUTPUT_MOTION",
                            "iRENDEROUTPUT_MREFL",
                            "iRENDEROUTPUT_MSPEC",
                            "iRENDEROUTPUT_OCCLAMB",
                            "iRENDEROUTPUT_OCCLREF",
                            "iRENDEROUTPUT_OPOS",
                            "iRENDEROUTPUT_PARTICLE_AGE",
                            "iRENDEROUTPUT_PARTICLE_ID",
                            "iRENDEROUTPUT_PARTICLE_VEL",
                            "iRENDEROUTPUT_REFL",
                            "iRENDEROUTPUT_ROUGHNESS",
                            "iRENDEROUTPUT_SAMPLES",
                            "iRENDEROUTPUT_SEGMENT",
                            "iRENDEROUTPUT_SHADOW",
                            "iRENDEROUTPUT_SINC",
                            "iRENDEROUTPUT_SNORM",
                            "iRENDEROUTPUT_SPEC",
                            "iRENDEROUTPUT_SUBS",
                            "iRENDEROUTPUT_SUBS_AMOUNT",
                            "iRENDEROUTPUT_SUBS_COLOR",
                            "iRENDEROUTPUT_SURFACE",
                            "iRENDEROUTPUT_TRAN",
                            "iRENDEROUTPUT_TRAN_AMOUNT",
                            "iRENDEROUTPUT_TRAN_COLOR",
                            "iRENDEROUTPUT_UV",
                            "iRENDEROUTPUT_VOL_DEPTH",
                            "iRENDEROUTPUT_VOL_LUM",
                            "iRENDEROUTPUT_VOL_OPA",
                            "iRENDEROUTPUT_WPOS",
                            "iRENDERTYPE_ANIM",
                            "iRENDERTYPE_BAKE_SCENE",
                            "iRENDERTYPE_BAKE_TEXTURE",
                            "iRENDERTYPE_FRAME",
                            "iRENDERTYPE_TURNTABLE_CAMERA",
                            "iRENDERTYPE_TURNTABLE_GEOMETRY",
                            "iSELECTION_ROLLOVER",
                            "iSELECTION_SELECTED",
                            "iSELECTION_UNSELECTED",
                            "iSEL_ACTION",
                            "iSEL_CENTER",
                            "iSEL_CHANNEL",
                            "iSEL_CINEMA",
                            "iSEL_EDGE",
                            "iSEL_ENVELOPE",
                            "iSEL_ENVELOPE_KEY",
                            "iSEL_GRADIENT_KEY",
                            "iSEL_ITEM",
                            "iSEL_LINK",
                            "iSEL_MODIFIER",
                            "iSEL_PARTICLE",
                            "iSEL_PIVOT",
                            "iSEL_POLYGON",
                            "iSEL_PRST",
                            "iSEL_PTAG",
                            "iSEL_VERTEX",
                            "iSEL_VMAP",
                            "iSESSIONSTAGE_NOT_READY",
                            "iSESSIONSTAGE_SHUTTING_DOWN",
                            "iSESSIONSTAGE_STARTUP_COMMANDS",
                            "iSESSIONSTAGE_SYSTEM_READY",
                            "iSE_BOTH",
                            "iSE_LEFT",
                            "iSE_RIGHT",
                            "iSLOPE_AUTO",
                            "iSLOPE_AUTOFLAT",
                            "iSLOPE_DIRECT",
                            "iSLOPE_FLAT",
                            "iSLOPE_LINEAR_IN",
                            "iSLOPE_LINEAR_OUT",
                            "iSLOPE_STEPPED",
                            "iSTACK_COMPATIBLE",
                            "iSTACK_DIFFERENT",
                            "iSTACK_IDENTICAL",
                            "iSTROKE_ABSOLUTE",
                            "iSTROKE_ARCS",
                            "iSTROKE_BEZIERS",
                            "iSTROKE_BOXES",
                            "iSTROKE_CIRCLES",
                            "iSTROKE_FRONT_BOXES",
                            "iSTROKE_FRONT_LINE_LOOP",
                            "iSTROKE_LINES",
                            "iSTROKE_LINE_LOOP",
                            "iSTROKE_LINE_STRIP",
                            "iSTROKE_NONE",
                            "iSTROKE_POINTS",
                            "iSTROKE_QUADS",
                            "iSTROKE_RELATIVE",
                            "iSTROKE_REL_SCREEN",
                            "iSTROKE_SCREEN",
                            "iSTROKE_TEXT",
                            "iSTROKE_TRIANGLES",
                            "iSUBD_BACKEND_CPU",
                            "iSUBD_BACKEND_CUDA",
                            "iSUBD_BACKEND_OPENCL",
                            "iSUBD_BOUND_ALWAYSSHARP",
                            "iSUBD_BOUND_EDGEANDCORNER",
                            "iSUBD_BOUND_EDGEONLY",
                            "iSUBD_BOUND_NONE",
                            "iSUBD_SCHEME_BILINEAR",
                            "iSUBD_SCHEME_CATMARK",
                            "iSUBD_SCHEME_LOOP",
                            "iTANGENT_DPDU_CROSS",
                            "iTANGENT_DPDU_DPDV",
                            "iTBLX_BASEFEATURE",
                            "iTBLX_COLLISION",
                            "iTBLX_CONNECT_BEGIN",
                            "iTBLX_CONNECT_END",
                            "iTBLX_CONNECT_QUAD",
                            "iTBLX_DPDU",
                            "iTBLX_ENDPOINT_T0",
                            "iTBLX_ENDPOINT_T1",
                            "iTBLX_PARTICLES",
                            "iTBLX_SEG_LINE",
                            "iTBLX_SEG_POINT",
                            "iTBLX_SEG_TRIANGLE",
                            "iTBLX_TBASIS",
                            "iTBXELT_FILTER",
                            "iTBXELT_LIGHT",
                            "iTBXELT_PROXY",
                            "iTBXELT_SURFACE",
                            "iTBXELT_VOLUME",
                            "iTBX_CHANS_FRAME",
                            "iTBX_CHANS_T0",
                            "iTBX_CHANS_T1",
                            "iTBX_INST_ADD",
                            "iTBX_INST_REMOVE",
                            "iTBX_INST_XFRM",
                            "iTBX_LGT_ADD",
                            "iTBX_LGT_DATA",
                            "iTBX_LGT_REMOVE",
                            "iTBX_LGT_SHADER",
                            "iTBX_LGT_XFRM",
                            "iTBX_SURF_ADD",
                            "iTBX_SURF_GEO",
                            "iTBX_SURF_REMOVE",
                            "iTBX_SURF_SHADER",
                            "iTBX_SURF_XFRM",
                            "iTBX_VOL_ADD",
                            "iTBX_VOL_DATA",
                            "iTBX_VOL_REMOVE",
                            "iTBX_VOL_SHADER",
                            "iTBX_VOL_XFRM",
                            "iTEXT_CENTER",
                            "iTEXT_ENCODING_ANSI",
                            "iTEXT_ENCODING_BIG5",
                            "iTEXT_ENCODING_DEFAULT",
                            "iTEXT_ENCODING_EUCJP",
                            "iTEXT_ENCODING_EUCKR",
                            "iTEXT_ENCODING_GB2312",
                            "iTEXT_ENCODING_SHIFTJIS",
                            "iTEXT_ENCODING_UTF8",
                            "iTEXT_LEFT",
                            "iTEXT_RIGHT",
                            "iTIE_CURVE_ADD",
                            "iTIE_CURVE_ALT",
                            "iTIE_CURVE_DELETE",
                            "iTIE_CURVE_DELETE_ALL",
                            "iTIE_CURVE_EDIT",
                            "iTIE_CURVE_MOVE",
                            "iTIE_CURVE_MOVE_ALL",
                            "iTIE_CURVE_MOVE_CONS",
                            "iTIE_CURVE_MOVE_CONS_ALL",
                            "iTIE_CURVE_SCALE",
                            "iTIE_CURVE_SCALE_ALL",
                            "iTIE_GENERAL_CLICK_1",
                            "iTIE_GENERAL_CLICK_2",
                            "iTIE_GENERAL_PRI",
                            "iTIE_GENERAL_PRI_ALT",
                            "iTIE_GENERAL_PRI_CONS",
                            "iTIE_GENERAL_SEC",
                            "iTIE_GENERAL_SEC_ALT",
                            "iTIE_GENERAL_SEC_CONS",
                            "iTIE_GENERAL_TER",
                            "iTIE_GENERAL_TER_ALT",
                            "iTIE_GENERAL_TER_CONS",
                            "iTIE_INPUT_I0",
                            "iTIE_INPUT_I1",
                            "iTIE_TYPE_DOWN",
                            "iTIE_TYPE_MOVE",
                            "iTIE_TYPE_NONE",
                            "iTIE_TYPE_UP",
                            "iTILE_EDGE",
                            "iTILE_MIRROR",
                            "iTILE_REPEAT",
                            "iTILE_RESET",
                            "iTREEVIEW_BADGE_ACTION",
                            "iTREEVIEW_BADGE_DETAIL_ACTION",
                            "iTREEVIEW_BADGE_DETAIL_ICON_OFF",
                            "iTREEVIEW_BADGE_DETAIL_ICON_ON",
                            "iTREEVIEW_BADGE_DETAIL_TOOLTIP",
                            "iTREEVIEW_BADGE_INFO",
                            "iTREEVIEW_BADGE_RATING",
                            "iTREEVIEW_BADGE_TOGGLE_OFF",
                            "iTREEVIEW_BADGE_TOGGLE_ON",
                            "iTREEVIEW_SELECT_ADD",
                            "iTREEVIEW_SELECT_CLEAR",
                            "iTREEVIEW_SELECT_PRIMARY",
                            "iTREEVIEW_SELECT_REMOVE",
                            "iTREE_CHILD",
                            "iTREE_CLONE",
                            "iTREE_PARENT",
                            "iTREE_ROOT",
                            "iTVXFMf_INVERSE",
                            "iTVXFMf_MATRIX",
                            "iTVXFMf_OFFSET",
                            "iTVXFMf_USEFUL",
                            "iTYPE_ANY",
                            "iTYPE_NONE",
                            "iUNDO_ACTIVE",
                            "iUNDO_INVALID",
                            "iUNDO_SUSPEND",
                            "iUSERIDLE_ALWAYS",
                            "iUSERVALUELIFE_CONFIG",
                            "iUSERVALUELIFE_COUNT",
                            "iUSERVALUELIFE_MOMENTARY",
                            "iUSERVALUELIFE_TEMPORARY",
                            "iVHANDLE_BASE_PART",
                            "iVIEWf_ABSOLUTE",
                            "iVIEWv_CAMERA",
                            "iVIEWv_GRAPH",
                            "iVIEWv_MASTER",
                            "iVIEWv_ORTHOGONAL",
                            "iVIEWv_PERSPECTIVE",
                            "iVIEWv_PIXEL",
                            "iVIEWv_SCREEN",
                            "iWFALL_DONE",
                            "iWFALL_HASWORK",
                            "iWFALL_NEXT_STAGE",
                            "iWFALL_NEXT_WORK",
                            "iWLSPLIT_HALF",
                            "iWLSPLIT_NONE",
                            "iWLSPLIT_ONE",
                            "iXFRM_PIVOT",
                            "iXFRM_PIVOT_C",
                            "iXFRM_PIVOT_ROT",
                            "iXFRM_PIVOT_ROT_C",
                            "iXFRM_POSITION",
                            "iXFRM_ROTATION",
                            "iXFRM_SCALE",
                            "iXFRM_SHEAR",
                            "i_CIT_BACKDROP",
                            "i_CIT_CAMERA",
                            "i_CIT_CLIP",
                            "i_CIT_ENVIRON",
                            "i_CIT_GROUP",
                            "i_CIT_INSTANCE",
                            "i_CIT_LIGHT",
                            "i_CIT_LOCATOR",
                            "i_CIT_MESH",
                            "i_CIT_RENDER",
                            "i_CIT_TLAYER",
                            "i_CIT_T_LOC",
                            "i_DBLOG_ERROR",
                            "i_DBLOG_NORMAL",
                            "i_DBLOG_TRACE",
                            "i_DBLOG_VERBOSE",
                            "i_EVTRAN_CONSTRAIN_LINE",
                            "i_EVTRAN_CONSTRAIN_NONE",
                            "i_EVTRAN_CONSTRAIN_PLANE",
                            "i_FUR_BEND_DOWN",
                            "i_FUR_BEND_NORMAL",
                            "i_FUR_BILLBOARD_FEATHER",
                            "i_FUR_BILLBOARD_LEAF",
                            "i_FUR_BILLBOARD_OFF",
                            "i_FUR_BILLBOARD_TREE",
                            "i_FUR_GUIDE_CLUMP",
                            "i_FUR_GUIDE_DIRLEN",
                            "i_FUR_GUIDE_INTERPOLATE",
                            "i_FUR_GUIDE_NONE",
                            "i_FUR_GUIDE_NORMAL",
                            "i_FUR_GUIDE_SHAPE",
                            "i_GUIDE_CHOSEN",
                            "i_GUIDE_FLAGS_ALWAYS",
                            "i_GUIDE_FLAGS_NONE",
                            "i_GUIDE_OFF",
                            "i_GUIDE_SUGGEST",
                            "i_IBM_ADD",
                            "i_IBM_ADDNORM",
                            "i_IBM_COLORBURN",
                            "i_IBM_COLORDODGE",
                            "i_IBM_DARKEN",
                            "i_IBM_DIFF",
                            "i_IBM_ERASE",
                            "i_IBM_HARDLIGHT",
                            "i_IBM_LIGHTEN",
                            "i_IBM_MULTIPLY",
                            "i_IBM_NORMAL",
                            "i_IBM_OVERLAY",
                            "i_IBM_REPLACE",
                            "i_IBM_SCREEN",
                            "i_IBM_SCREEN2",
                            "i_IBM_SOFTLIGHT",
                            "i_IBM_SUB",
                            "i_IMAGE_GENERATOR",
                            "i_IMAGE_MULTI_SAMPLE",
                            "i_IMAGE_SINGLE_SAMPLE",
                            "i_IMAGE_SINGLE_SAMPLE_N",
                            "i_LAYER_ALL",
                            "i_LAYER_BACKGROUND",
                            "i_LAYER_FOREGROUND",
                            "i_LAYER_PRIMARY",
                            "i_PERSIST_ATOM",
                            "i_PERSIST_HASH",
                            "i_PERSIST_LIST",
                            "i_PIXELRAY_ABSOLUTE",
                            "i_PIXELRAY_RELATIVE",
                            "i_POLYTAG_FONT",
                            "i_POLYTAG_JUST",
                            "i_POLYTAG_MATERIAL",
                            "i_POLYTAG_PART",
                            "i_POLYTAG_PICK",
                            "i_POLYTAG_SMOOTHING_GROUP",
                            "i_POLYTAG_TEXT",
                            "i_POLY_MAXVERT",
                            "i_PTAG_FONT",
                            "i_PTAG_JUST",
                            "i_PTAG_MATR",
                            "i_PTAG_PART",
                            "i_PTAG_PICK",
                            "i_PTAG_TEXT",
                            "i_SDRILLv_CORE",
                            "i_SDRILLv_CSG_ADD",
                            "i_SDRILLv_CSG_INTERSECT",
                            "i_SDRILLv_CSG_SUBTRACT",
                            "i_SDRILLv_CSG_UNION",
                            "i_SDRILLv_NONE",
                            "i_SDRILLv_STENCIL",
                            "i_SDRILLv_TUNNEL",
                            "i_SIMD_MAXRUN",
                            "i_SURF_ALL",
                            "i_SURF_CURVE_TRIANGLE",
                            "i_SURF_FUR",
                            "i_SURF_TRIANGLE",
                            "i_TASK_ACEN",
                            "i_TASK_ACTR",
                            "i_TASK_AXIS",
                            "i_TASK_BRSH",
                            "i_TASK_CONS",
                            "i_TASK_CONT",
                            "i_TASK_EFFR",
                            "i_TASK_NOZL",
                            "i_TASK_PATH",
                            "i_TASK_PINK",
                            "i_TASK_POST",
                            "i_TASK_PTCL",
                            "i_TASK_SIDE",
                            "i_TASK_SNAP",
                            "i_TASK_STYL",
                            "i_TASK_WGHT",
                            "i_TEXTURE_PROJ_DIR_X",
                            "i_TEXTURE_PROJ_DIR_Y",
                            "i_TEXTURE_PROJ_DIR_Z",
                            "i_TEXTURE_PROJ_MODE_BOX",
                            "i_TEXTURE_PROJ_MODE_CUBIC",
                            "i_TEXTURE_PROJ_MODE_CYLINDRICAL",
                            "i_TEXTURE_PROJ_MODE_FRONT",
                            "i_TEXTURE_PROJ_MODE_IMPLICIT",
                            "i_TEXTURE_PROJ_MODE_LIGHTPROBE",
                            "i_TEXTURE_PROJ_MODE_NONE",
                            "i_TEXTURE_PROJ_MODE_PLANAR",
                            "i_TEXTURE_PROJ_MODE_SPHERICAL",
                            "i_TEXTURE_PROJ_MODE_UVMAP",
                            "i_TFX_COLOR",
                            "i_TFX_SCALAR",
                            "i_THANDf_AXES",
                            "i_THANDf_AXIS_X",
                            "i_THANDf_AXIS_Y",
                            "i_THANDf_AXIS_Z",
                            "i_THANDf_CONST",
                            "i_THANDf_DISABLE",
                            "i_THANDf_FLIP",
                            "i_THANDf_GHOST",
                            "i_THANDf_HIT",
                            "i_THANDf_HOT",
                            "i_THANDf_SMALL",
                            "i_THANDv_MASK",
                            "i_TYPE_FLOAT",
                            "i_TYPE_INTEGER",
                            "i_TYPE_OBJECT",
                            "i_TYPE_STRING",
                            "i_VIEWTYPE_2D",
                            "i_VIEWTYPE_3D",
                            "i_VIEWTYPE_UV",
                            "i_VMAP_EPCK",
                            "i_VMAP_MORPH",
                            "i_VMAP_NORMAL",
                            "i_VMAP_OBJECTPOS",
                            "i_VMAP_PICK",
                            "i_VMAP_RGB",
                            "i_VMAP_RGBA",
                            "i_VMAP_SPOT",
                            "i_VMAP_SUBDIV",
                            "i_VMAP_TBASIS",
                            "i_VMAP_TEXTUREUV",
                            "i_VMAP_VECTOR",
                            "i_VMAP_WEIGHT",
                            "i_VPHIT_EDGE",
                            "i_VPHIT_ITEM",
                            "i_VPHIT_POLY",
                            "i_VPHIT_VERT",
                            "i_VPOPT_BACK_ACTV",
                            "i_VPOPT_BACK_FLAT",
                            "i_VPOPT_BACK_WIRE",
                            "i_VPOPT_OFF",
                            "i_VPOPT_ON",
                            "i_VPOPT_SHADE_PRG1",
                            "i_VPOPT_SHADE_PRG2",
                            "i_VPOPT_SHADE_REFL",
                            "i_VPOPT_SHADE_SHAD",
                            "i_VPOPT_SHADE_SKCH",
                            "i_VPOPT_SHADE_TEXT",
                            "i_VPOPT_SHADE_VCLR",
                            "i_VPOPT_SHADE_WIRE",
                            "i_VPOPT_VCLR_RGB",
                            "i_VPOPT_VCLR_SEL",
                            "i_VPOPT_VCLR_WGT",
                            "i_VPOPT_WIRE_COLR",
                            "i_VPOPT_WIRE_NONE",
                            "i_VPOPT_WIRE_UNIF",
                            "i_VPSPACE_GRAPH",
                            "i_VPSPACE_MODEL",
                            "i_VPSPACE_MODEL2D",
                            "i_VPSPACE_PREVIEW",
                            "i_VPSPACE_SCHEMATIC",
                            "i_VPSPACE_TEXTURE",
                            "i_VPSPACE_WORLD",
                            "i_VPTO3D_SNAP",
                            "i_VPTO3D_WORK",
                            "i_VP_AXIS_PERSP",
                            "i_VP_AXIS_UV",
                            "i_VP_AXIS_X",
                            "i_VP_AXIS_Y",
                            "i_VP_AXIS_Z",
                            "i_VP_CAM_BACK",
                            "i_VP_CAM_BOTTOM",
                            "i_VP_CAM_FRONT",
                            "i_VP_CAM_LEFT",
                            "i_VP_CAM_PERSP",
                            "i_VP_CAM_RIGHT",
                            "i_VP_CAM_TOP",
                            "mCMDHINT_SUPPRESS_DIALOGS",
                            "mDCETYPE_FILEDIR",
                            "mDCETYPE_FLAGS",
                            "mDCETYPE_SPECIAL",
                            "mDCETYPE_SYNTH",
                            "mFORMDROPPOS_EDGE",
                            "mFORMDROPPOS_EXTENT",
                            "mFORMDROPPOS_ON",
                            "mIMAGEPROC_EVENT_RESERVED",
                            "mPFILT_TYPE",
                            "mPOPFLAGS_GROUP_MASK",
                            "mRAY_CAUSTIC",
                            "mRAY_INDIRECT",
                            "mRAY_OCCLUSION",
                            "mRAY_PREVIEW",
                            "mRAY_PRIMARY",
                            "mRAY_REFLECT",
                            "mRAY_REFRACT",
                            "mRAY_SHADOW",
                            "mRAY_SUBSURFACE",
                            "mVHANDLE_CONSTRAINT",
                            "mVHANDLE_DRAW_AXIS",
                            "mVHANDLE_DRAW_SHAPE",
                            "m_EVTRAN_CONSTRAIN_AXIS",
                            "m_EVTRAN_CONSTRAIN_SNAP",
                            "sCATEGORY_SAMPLE",
                            "sCATEGORY_TOOL",
                            "sCHANVEC_RGB",
                            "sCHANVEC_RGBA",
                            "sCHANVEC_SCALAR",
                            "sCHANVEC_UV",
                            "sCHANVEC_UVW",
                            "sCHANVEC_XY",
                            "sCHANVEC_XYZ",
                            "sCMD_CONTAINER_ARGS",
                            "sCMD_CONTAINER_NAME",
                            "sCMD_CONTAINER_TYPES",
                            "sCOLORMODEL_VALUEPRESET",
                            "sCUSTOMVIEW_EMBEDABILITY",
                            "sCUSTOMVIEW_OPTIONS_FORM",
                            "sCUSTOMVIEW_TYPE",
                            "sDEFAULT_COLORSPACE_16BIT",
                            "sDEFAULT_COLORSPACE_8BIT",
                            "sDEFAULT_COLORSPACE_FLOAT",
                            "sDEFAULT_COLORSPACE_GREY",
                            "sDROPSOURCE_CHANNELS",
                            "sDROPSOURCE_COLOR",
                            "sDROPSOURCE_COMMANDS",
                            "sDROPSOURCE_FILES",
                            "sDROPSOURCE_FORMCONTROLS",
                            "sDROPSOURCE_ITEMS",
                            "sDROP_ACTIONNAMES",
                            "sDROP_SOURCETYPE",
                            "sGRAPH_BACKDROPCLIP",
                            "sGRAPH_BAKE",
                            "sGRAPH_CHANGROUPS",
                            "sGRAPH_CHANLINKS",
                            "sGRAPH_CHANMODS",
                            "sGRAPH_CHANREFS",
                            "sGRAPH_DEFORMERS",
                            "sGRAPH_FORCEFALLOFF",
                            "sGRAPH_GROUPS",
                            "sGRAPH_ITEMGROUPS",
                            "sGRAPH_MESHINST",
                            "sGRAPH_PARENT",
                            "sGRAPH_PARTICLE",
                            "sGRAPH_PARTICLEOP",
                            "sGRAPH_PICKWALK_LR",
                            "sGRAPH_PICKWALK_UD",
                            "sGRAPH_POINTCACHE",
                            "sGRAPH_PSIM",
                            "sGRAPH_REFERENCE",
                            "sGRAPH_SELECT",
                            "sGRAPH_SHADELOC",
                            "sGRAPH_SOURCE",
                            "sGRAPH_TARGETS",
                            "sGRAPH_VOXEL",
                            "sGRAPH_WEIGHTLINKS",
                            "sGRAPH_XFRMCORE",
                            "sGRAPH_XFRMLOCAL",
                            "sIATTRNAME_APERATUREX",
                            "sIATTRNAME_APERATUREY",
                            "sIATTRNAME_APERTURE",
                            "sIATTRNAME_APPLY_DISPLAY_LUT",
                            "sIATTRNAME_CAM_TRANS",
                            "sIATTRNAME_CLIP_DIST",
                            "sIATTRNAME_COMMENT",
                            "sIATTRNAME_DPI",
                            "sIATTRNAME_EXPTIME",
                            "sIATTRNAME_FOCDIST",
                            "sIATTRNAME_FOC_LENGTH",
                            "sIATTRNAME_GAMMA",
                            "sIATTRNAME_ISO",
                            "sIATTRNAME_LUMA",
                            "sIATTRNAME_PIXASPECT",
                            "sIATTRNAME_REGX0",
                            "sIATTRNAME_REGX1",
                            "sIATTRNAME_REGY0",
                            "sIATTRNAME_REGY1",
                            "sIATTRNAME_WORLD_TO_CAM",
                            "sIATTRTYPE_APERATUREX",
                            "sIATTRTYPE_APERATUREY",
                            "sIATTRTYPE_APERTURE",
                            "sIATTRTYPE_APPLY_DISPLAY_LUT",
                            "sIATTRTYPE_CAM_TRANS",
                            "sIATTRTYPE_CLIP_DIST",
                            "sIATTRTYPE_COMMENT",
                            "sIATTRTYPE_DPI",
                            "sIATTRTYPE_EXPTIME",
                            "sIATTRTYPE_FOCDIST",
                            "sIATTRTYPE_FOC_LENGTH",
                            "sIATTRTYPE_GAMMA",
                            "sIATTRTYPE_ISO",
                            "sIATTRTYPE_LUMA",
                            "sIATTRTYPE_PIXASPECT",
                            "sIATTRTYPE_REGX0",
                            "sIATTRTYPE_REGX1",
                            "sIATTRTYPE_REGY0",
                            "sIATTRTYPE_REGY1",
                            "sIATTRTYPE_WORLD_TO_CAM",
                            "sICHAN_ADVANCEDMATERIAL_ANISO",
                            "sICHAN_ADVANCEDMATERIAL_BUMP",
                            "sICHAN_ADVANCEDMATERIAL_COATAMT",
                            "sICHAN_ADVANCEDMATERIAL_DBLSIDED",
                            "sICHAN_ADVANCEDMATERIAL_DIFFAMT",
                            "sICHAN_ADVANCEDMATERIAL_DIFFCOL",
                            "sICHAN_ADVANCEDMATERIAL_DISPERSE",
                            "sICHAN_ADVANCEDMATERIAL_DISPLACE",
                            "sICHAN_ADVANCEDMATERIAL_EXITCOL",
                            "sICHAN_ADVANCEDMATERIAL_LUMICOL",
                            "sICHAN_ADVANCEDMATERIAL_PHYSICAL",
                            "sICHAN_ADVANCEDMATERIAL_RADIANCE",
                            "sICHAN_ADVANCEDMATERIAL_REFINDEX",
                            "sICHAN_ADVANCEDMATERIAL_REFLAMT",
                            "sICHAN_ADVANCEDMATERIAL_REFLBLUR",
                            "sICHAN_ADVANCEDMATERIAL_REFLCOL",
                            "sICHAN_ADVANCEDMATERIAL_REFLFRES",
                            "sICHAN_ADVANCEDMATERIAL_REFLRAYS",
                            "sICHAN_ADVANCEDMATERIAL_REFLTYPE",
                            "sICHAN_ADVANCEDMATERIAL_RNDSAME",
                            "sICHAN_ADVANCEDMATERIAL_RNDWIDTH",
                            "sICHAN_ADVANCEDMATERIAL_ROUGH",
                            "sICHAN_ADVANCEDMATERIAL_SAMESURF",
                            "sICHAN_ADVANCEDMATERIAL_SMANGLE",
                            "sICHAN_ADVANCEDMATERIAL_SMOOTH",
                            "sICHAN_ADVANCEDMATERIAL_SPECAMT",
                            "sICHAN_ADVANCEDMATERIAL_SPECCOL",
                            "sICHAN_ADVANCEDMATERIAL_SPECFRES",
                            "sICHAN_ADVANCEDMATERIAL_SUBSAMT",
                            "sICHAN_ADVANCEDMATERIAL_SUBSCOL",
                            "sICHAN_ADVANCEDMATERIAL_SUBSDEPTH",
                            "sICHAN_ADVANCEDMATERIAL_SUBSDIST",
                            "sICHAN_ADVANCEDMATERIAL_SUBSPHASE",
                            "sICHAN_ADVANCEDMATERIAL_SUBSSMPS",
                            "sICHAN_ADVANCEDMATERIAL_TRANAMT",
                            "sICHAN_ADVANCEDMATERIAL_TRANCOL",
                            "sICHAN_ADVANCEDMATERIAL_TRANDIST",
                            "sICHAN_ADVANCEDMATERIAL_TRANRAYS",
                            "sICHAN_ADVANCEDMATERIAL_TRANROUGH",
                            "sICHAN_ADVANCEDMATERIAL_UVMAP",
                            "sICHAN_AREALIGHT_HEIGHT",
                            "sICHAN_AREALIGHT_SHAPE",
                            "sICHAN_AREALIGHT_WIDTH",
                            "sICHAN_BACKDROP_ASPECT",
                            "sICHAN_BACKDROP_BLEND",
                            "sICHAN_BACKDROP_BLUR",
                            "sICHAN_BACKDROP_BRIGHT",
                            "sICHAN_BACKDROP_CONTRAST",
                            "sICHAN_BACKDROP_FLIP",
                            "sICHAN_BACKDROP_GAMMA",
                            "sICHAN_BACKDROP_INVERT",
                            "sICHAN_BACKDROP_PIXSIZE",
                            "sICHAN_BACKDROP_PROJECTION",
                            "sICHAN_BACKDROP_RENDER",
                            "sICHAN_BACKDROP_TRANSP",
                            "sICHAN_BACKDROP_UNIFORM",
                            "sICHAN_BAKE_END_UDIM",
                            "sICHAN_BAKE_FILENAME",
                            "sICHAN_BAKE_HEIGHT",
                            "sICHAN_BAKE_MORPHNAME",
                            "sICHAN_BAKE_PATTERN",
                            "sICHAN_BAKE_START_UDIM",
                            "sICHAN_BAKE_USE_UDIM",
                            "sICHAN_BAKE_UVNAME",
                            "sICHAN_BAKE_WIDTH",
                            "sICHAN_CAMERA_APERTUREX",
                            "sICHAN_CAMERA_APERTUREY",
                            "sICHAN_CAMERA_BLURLEN",
                            "sICHAN_CAMERA_BLUROFF",
                            "sICHAN_CAMERA_CLIPDIST",
                            "sICHAN_CAMERA_CLIPPING",
                            "sICHAN_CAMERA_CONVDIST",
                            "sICHAN_CAMERA_DISTORT",
                            "sICHAN_CAMERA_DOF",
                            "sICHAN_CAMERA_FILMFIT",
                            "sICHAN_CAMERA_FOCALLEN",
                            "sICHAN_CAMERA_FOCUSDIST",
                            "sICHAN_CAMERA_FSTOP",
                            "sICHAN_CAMERA_IODIST",
                            "sICHAN_CAMERA_IRISBLADES",
                            "sICHAN_CAMERA_IRISROTATION",
                            "sICHAN_CAMERA_MOTIONBLUR",
                            "sICHAN_CAMERA_OFFSETX",
                            "sICHAN_CAMERA_OFFSETY",
                            "sICHAN_CAMERA_PROJTYPE",
                            "sICHAN_CAMERA_SQUEEZE",
                            "sICHAN_CAMERA_STEREO",
                            "sICHAN_CAMERA_STEREO_COMP",
                            "sICHAN_CAMERA_STEREO_EYE",
                            "sICHAN_CAMERA_TARGET",
                            "sICHAN_CAPSULE_ALPHA",
                            "sICHAN_CAPSULE_COLOR",
                            "sICHAN_CAPSULE_TYPE",
                            "sICHAN_CAPSULE_VALUE",
                            "sICHAN_CELLULAR_AMPRATIO",
                            "sICHAN_CELLULAR_CELLWIDTH",
                            "sICHAN_CELLULAR_FREQRATIO",
                            "sICHAN_CELLULAR_FREQS",
                            "sICHAN_CELLULAR_TRANSWIDTH",
                            "sICHAN_CELLULAR_TYPE",
                            "sICHAN_CELSHADER_CELBAND",
                            "sICHAN_CHECKER_TRANSWIDTH",
                            "sICHAN_CHECKER_TYPE",
                            "sICHAN_CONSTANT_COLOR",
                            "sICHAN_CONSTANT_VALUE",
                            "sICHAN_CYLINDERLIGHT_LENGTH",
                            "sICHAN_CYLINDERLIGHT_RADIUS",
                            "sICHAN_DEFAULTSHADER_ALHAVAL",
                            "sICHAN_DEFAULTSHADER_ALPHATYPE",
                            "sICHAN_DEFAULTSHADER_DIRMULT",
                            "sICHAN_DEFAULTSHADER_FOGCOLOR",
                            "sICHAN_DEFAULTSHADER_FOGDENSITY",
                            "sICHAN_DEFAULTSHADER_FOGENV",
                            "sICHAN_DEFAULTSHADER_FOGTYPE",
                            "sICHAN_DEFAULTSHADER_INDMULT",
                            "sICHAN_DEFAULTSHADER_INDSAT",
                            "sICHAN_DEFAULTSHADER_INDTYPE",
                            "sICHAN_DEFAULTSHADER_SHADCAST",
                            "sICHAN_DEFAULTSHADER_SHADERATE",
                            "sICHAN_DEFAULTSHADER_SHADRECV",
                            "sICHAN_DEFAULTSHADER_VISCAM",
                            "sICHAN_DEFAULTSHADER_VISIND",
                            "sICHAN_DEFAULTSHADER_VISREFL",
                            "sICHAN_DEFAULTSHADER_VISREFR",
                            "sICHAN_DEFORMFOLDER_ENABLE",
                            "sICHAN_DEFORMGROUP_DEFORMER",
                            "sICHAN_DEFORMGROUP_ENABLE",
                            "sICHAN_DEFORMGROUP_INTERPOLATION",
                            "sICHAN_DEFORMGROUP_LIMITENABLE",
                            "sICHAN_DEFORMGROUP_LIMITMAX",
                            "sICHAN_DEFORMGROUP_SHARPNESS",
                            "sICHAN_DEFORMGROUP_THRESHOLD",
                            "sICHAN_DEFORM_BLEND",
                            "sICHAN_DEFORM_ENABLE",
                            "sICHAN_DEFORM_INVERT",
                            "sICHAN_DEFORM_OPACITY",
                            "sICHAN_DOMELIGHT_RADIUS",
                            "sICHAN_DOTS_DOTWIDTH",
                            "sICHAN_DOTS_TRANSWIDTH",
                            "sICHAN_DOTS_TYPE",
                            "sICHAN_EDGETRANSSHADER_EDGETYPE",
                            "sICHAN_EDGETRANSSHADER_EDGEWID",
                            "sICHAN_ENVIRONMENT_RADIANCE",
                            "sICHAN_ENVIRONMENT_VISCAM",
                            "sICHAN_ENVIRONMENT_VISIND",
                            "sICHAN_ENVIRONMENT_VISREFL",
                            "sICHAN_ENVIRONMENT_VISREFR",
                            "sICHAN_ENVMATERIAL_DISC",
                            "sICHAN_ENVMATERIAL_GNDCOLOR",
                            "sICHAN_ENVMATERIAL_GNDEXP",
                            "sICHAN_ENVMATERIAL_NADCOLOR",
                            "sICHAN_ENVMATERIAL_NORMALIZE",
                            "sICHAN_ENVMATERIAL_SKYCOLOR",
                            "sICHAN_ENVMATERIAL_SKYEXP",
                            "sICHAN_ENVMATERIAL_TYPE",
                            "sICHAN_ENVMATERIAL_ZENCOLOR",
                            "sICHAN_ENVSHADER_EANGLE",
                            "sICHAN_ENVSHADER_EBLUR",
                            "sICHAN_ENVSHADER_EREFLECT",
                            "sICHAN_ENVSHADER_EREFRACT",
                            "sICHAN_FALLOFF_DEFORMENAB",
                            "sICHAN_FALLOFF_DEFORMER",
                            "sICHAN_FALLOFF_FALLENAB",
                            "sICHAN_FALLOFF_FALLOFF",
                            "sICHAN_FALLOFF_INVERT",
                            "sICHAN_FALLOFF_STRENGTH",
                            "sICHAN_FORCE_ENABLE",
                            "sICHAN_FORCE_FILTER",
                            "sICHAN_FORCE_FORCE",
                            "sICHAN_FORCE_INVERT",
                            "sICHAN_FORCE_STRENGTH",
                            "sICHAN_FORCE_TORQUE",
                            "sICHAN_FURMATERIAL_ADAPTIVE",
                            "sICHAN_FURMATERIAL_ANGLE",
                            "sICHAN_FURMATERIAL_AUTOFADE",
                            "sICHAN_FURMATERIAL_BUMPAMP",
                            "sICHAN_FURMATERIAL_CLUMPS",
                            "sICHAN_FURMATERIAL_CLUMPSIZE",
                            "sICHAN_FURMATERIAL_CURLS",
                            "sICHAN_FURMATERIAL_DENSITY",
                            "sICHAN_FURMATERIAL_DISPLAY",
                            "sICHAN_FURMATERIAL_DIST",
                            "sICHAN_FURMATERIAL_FLEX",
                            "sICHAN_FURMATERIAL_FURONLY",
                            "sICHAN_FURMATERIAL_GROWTHJITTER",
                            "sICHAN_FURMATERIAL_GUIDEBLEND",
                            "sICHAN_FURMATERIAL_GUIDELENGTH",
                            "sICHAN_FURMATERIAL_GUIDERANGE",
                            "sICHAN_FURMATERIAL_GUIDES",
                            "sICHAN_FURMATERIAL_LENGTH",
                            "sICHAN_FURMATERIAL_MAXSEGMENT",
                            "sICHAN_FURMATERIAL_NRMJITTER",
                            "sICHAN_FURMATERIAL_POSJITTER",
                            "sICHAN_FURMATERIAL_RATE",
                            "sICHAN_FURMATERIAL_ROOTBEND",
                            "sICHAN_FURMATERIAL_SCLJITTER",
                            "sICHAN_FURMATERIAL_SEED",
                            "sICHAN_FURMATERIAL_STRIPROT",
                            "sICHAN_FURMATERIAL_TANSHADE",
                            "sICHAN_FURMATERIAL_TAPER",
                            "sICHAN_FURMATERIAL_TYPE",
                            "sICHAN_FURMATERIAL_WIDTH",
                            "sICHAN_FURMATERIAL_YOFFSET",
                            "sICHAN_GENINFLUENCE_ENABLE",
                            "sICHAN_GENINFLUENCE_INFLUENCE",
                            "sICHAN_GENINFLUENCE_INTERPOLATION",
                            "sICHAN_GENINFLUENCE_NAME",
                            "sICHAN_GENINFLUENCE_TYPE",
                            "sICHAN_GLDRAW_ENABLE",
                            "sICHAN_GLDRAW_FILLOPTIONS",
                            "sICHAN_GLDRAW_SMOOTH",
                            "sICHAN_GLDRAW_STYLE",
                            "sICHAN_GLDRAW_TEXTURE",
                            "sICHAN_GLDRAW_WIRE",
                            "sICHAN_GLDRAW_WIRECOLOR",
                            "sICHAN_GLDRAW_WIREOPTIONS",
                            "sICHAN_GRADIENT_COLOR",
                            "sICHAN_GRADIENT_PARAM",
                            "sICHAN_GRADIENT_VALUE",
                            "sICHAN_GRID_LINEWIDTH",
                            "sICHAN_GRID_TRANSWIDTH",
                            "sICHAN_GRID_TYPE",
                            "sICHAN_IBLURFILTER_BLURTYPE",
                            "sICHAN_IBLURFILTER_CHANNELS",
                            "sICHAN_IBLURFILTER_HEIGHT",
                            "sICHAN_IBLURFILTER_WIDTH",
                            "sICHAN_IBRIGHTFILTER_CHANNELS",
                            "sICHAN_IBRIGHTFILTER_MINPOINT",
                            "sICHAN_IGAMMAFILTER_CHANNELS",
                            "sICHAN_IGAMMAFILTER_MAXPOINT",
                            "sICHAN_IGAMMAFILTER_MINPOINT",
                            "sICHAN_IK2DLIMB_BLEND",
                            "sICHAN_IK2DLIMB_GOAL",
                            "sICHAN_IK2DLIMB_PLANE",
                            "sICHAN_IK2DLIMB_SENSE",
                            "sICHAN_IMAGEFILTER_ENABLE",
                            "sICHAN_IMAGEFILTER_IMAGESTACK",
                            "sICHAN_IMAGEFILTER_OPACITY",
                            "sICHAN_IMAGEMAP_AA",
                            "sICHAN_IMAGEMAP_AAVAL",
                            "sICHAN_IMAGEMAP_ALPHA",
                            "sICHAN_IMAGEMAP_BLUEINV",
                            "sICHAN_IMAGEMAP_GAMMA",
                            "sICHAN_IMAGEMAP_GREENINV",
                            "sICHAN_IMAGEMAP_MAINSPOT",
                            "sICHAN_IMAGEMAP_MAX",
                            "sICHAN_IMAGEMAP_MIN",
                            "sICHAN_IMAGEMAP_PIXBLEND",
                            "sICHAN_IMAGEMAP_REDINV",
                            "sICHAN_ITEMINFLUENCE_ENABLE",
                            "sICHAN_ITEMINFLUENCE_INTERPOLATION",
                            "sICHAN_ITEMINFLUENCE_ITEMINF",
                            "sICHAN_ITEMINFLUENCE_POSENABLE",
                            "sICHAN_ITEMINFLUENCE_ROTENABLE",
                            "sICHAN_ITEMINFLUENCE_SAMPLEWEIGHT",
                            "sICHAN_ITEMINFLUENCE_SCLENABLE",
                            "sICHAN_LIGHTMATERIAL_ATTENUATE",
                            "sICHAN_LIGHTMATERIAL_CAUSTICS",
                            "sICHAN_LIGHTMATERIAL_DENSITY",
                            "sICHAN_LIGHTMATERIAL_DIFFUSE",
                            "sICHAN_LIGHTMATERIAL_LIGHTCOL",
                            "sICHAN_LIGHTMATERIAL_SCATCOL",
                            "sICHAN_LIGHTMATERIAL_SCATTER",
                            "sICHAN_LIGHTMATERIAL_SHADCOL",
                            "sICHAN_LIGHTMATERIAL_SHIFT",
                            "sICHAN_LIGHTMATERIAL_SPECULAR",
                            "sICHAN_LIGHT_RADIANCE",
                            "sICHAN_LIGHT_RANGE",
                            "sICHAN_LIGHT_SAMPLES",
                            "sICHAN_LIGHT_SHADRES",
                            "sICHAN_LIGHT_SHADTYPE",
                            "sICHAN_LIGHT_STACK",
                            "sICHAN_LIGHT_TARGET",
                            "sICHAN_LOCATOR_CENTER",
                            "sICHAN_LOCATOR_DEFORMATION",
                            "sICHAN_LOCATOR_DEFORMMODE",
                            "sICHAN_LOCATOR_DISSOLVE",
                            "sICHAN_LOCATOR_DRAWSHAPE",
                            "sICHAN_LOCATOR_GLSTATE",
                            "sICHAN_LOCATOR_GLSURF",
                            "sICHAN_LOCATOR_HVISIBLE",
                            "sICHAN_LOCATOR_LINK",
                            "sICHAN_LOCATOR_LOCK",
                            "sICHAN_LOCATOR_PIVOT",
                            "sICHAN_LOCATOR_RENDER",
                            "sICHAN_LOCATOR_SELECT",
                            "sICHAN_LOCATOR_SILHOUETTE",
                            "sICHAN_LOCATOR_SIZE",
                            "sICHAN_LOCATOR_VISIBLE",
                            "sICHAN_LOCDEFORM_BLEND",
                            "sICHAN_LOCDEFORM_ENABLE",
                            "sICHAN_LOCDEFORM_INVERT",
                            "sICHAN_LOCDEFORM_OPACITY",
                            "sICHAN_MAPMIX_VMAPNAME",
                            "sICHAN_MASK_PTAG",
                            "sICHAN_MASK_PTYP",
                            "sICHAN_MASK_STYP",
                            "sICHAN_MASK_SUBMASK",
                            "sICHAN_MDD2_DEFOBJ",
                            "sICHAN_MDD_ABSOLUTE",
                            "sICHAN_MDD_BLEND",
                            "sICHAN_MDD_CACHE_SIZE",
                            "sICHAN_MDD_ENABLE",
                            "sICHAN_MDD_END_BEHAVIOR",
                            "sICHAN_MDD_END_FRAME",
                            "sICHAN_MDD_END_TIME",
                            "sICHAN_MDD_FILE",
                            "sICHAN_MDD_INVERT",
                            "sICHAN_MDD_OPACITY",
                            "sICHAN_MDD_SCALE",
                            "sICHAN_MDD_SPEED",
                            "sICHAN_MDD_START_FRAME",
                            "sICHAN_MDD_START_TIME",
                            "sICHAN_MEDIACLIP_PLAYBACK",
                            "sICHAN_MESH_CURVE_GROUP",
                            "sICHAN_MESH_CURVE_RADIUS",
                            "sICHAN_MESH_END",
                            "sICHAN_MESH_MESH",
                            "sICHAN_MESH_POLYGONS",
                            "sICHAN_MESH_RADIUS_GRAD",
                            "sICHAN_MESH_RADIUS_UNIT",
                            "sICHAN_MESH_RENDER_CURVES",
                            "sICHAN_MESH_ROTATE_GRAD",
                            "sICHAN_MESH_SIDES",
                            "sICHAN_MESH_START",
                            "sICHAN_MORPHDEFORM_ENABLE",
                            "sICHAN_MORPHDEFORM_MAPNAME",
                            "sICHAN_MORPHDEFORM_MESHINF",
                            "sICHAN_MORPHDEFORM_STRENGTH",
                            "sICHAN_MORPHDEFORM_USELOCAL",
                            "sICHAN_MORPHMIX_BLEND",
                            "sICHAN_MORPHMIX_ENABLE",
                            "sICHAN_MORPHMIX_INVERT",
                            "sICHAN_MORPHMIX_OPACITY",
                            "sICHAN_MORPHMIX_VMAPNAME",
                            "sICHAN_NOISE_AMPRATIO",
                            "sICHAN_NOISE_FREQRATIO",
                            "sICHAN_NOISE_FREQS",
                            "sICHAN_NOISE_TYPE",
                            "sICHAN_PARTICLEOP_ENABLE",
                            "sICHAN_PARTICLEOP_FILTER",
                            "sICHAN_PARTICLEOP_KILL",
                            "sICHAN_PARTICLEOP_TRIGGER",
                            "sICHAN_PARTICLEOP_TYPE",
                            "sICHAN_PHOTOMETRYLIGHT_CONE",
                            "sICHAN_PHOTOMETRYLIGHT_EDGE",
                            "sICHAN_PHOTOMETRYLIGHT_FILENAME",
                            "sICHAN_PHOTOMETRYLIGHT_HEIGHT",
                            "sICHAN_PHOTOMETRYLIGHT_OUTSIDE",
                            "sICHAN_PHOTOMETRYLIGHT_VDISSOLVE",
                            "sICHAN_PHOTOMETRYLIGHT_VOLUMETRICS",
                            "sICHAN_PHOTOMETRYLIGHT_VRAD",
                            "sICHAN_PHOTOMETRYLIGHT_VSAMPLES",
                            "sICHAN_PHOTOMETRYLIGHT_WIDTH",
                            "sICHAN_PLOAD_DRAW",
                            "sICHAN_PLOAD_FILE",
                            "sICHAN_PLOAD_OFFSET",
                            "sICHAN_PLOAD_SCALE",
                            "sICHAN_PLOAD_TGROUP",
                            "sICHAN_POINTLIGHT_RADIUS",
                            "sICHAN_POINTLIGHT_VDISSOLVE",
                            "sICHAN_POINTLIGHT_VOLUMETRICS",
                            "sICHAN_POINTLIGHT_VRAD",
                            "sICHAN_POINTLIGHT_VSAMPLES",
                            "sICHAN_POLYRENDER_AA",
                            "sICHAN_POLYRENDER_AAFILTER",
                            "sICHAN_POLYRENDER_AAIMPMIN",
                            "sICHAN_POLYRENDER_AREFINE",
                            "sICHAN_POLYRENDER_BAKEDIR",
                            "sICHAN_POLYRENDER_BAKEU0",
                            "sICHAN_POLYRENDER_BAKEU1",
                            "sICHAN_POLYRENDER_BAKEV0",
                            "sICHAN_POLYRENDER_BAKEV1",
                            "sICHAN_POLYRENDER_BAKEX",
                            "sICHAN_POLYRENDER_BAKEY",
                            "sICHAN_POLYRENDER_BKTORDER",
                            "sICHAN_POLYRENDER_BKTREFINE",
                            "sICHAN_POLYRENDER_BKTREVERSE",
                            "sICHAN_POLYRENDER_BKTSKIP",
                            "sICHAN_POLYRENDER_BKTWRITE",
                            "sICHAN_POLYRENDER_BUCKETX",
                            "sICHAN_POLYRENDER_BUCKETY",
                            "sICHAN_POLYRENDER_COARSERATE",
                            "sICHAN_POLYRENDER_DPI",
                            "sICHAN_POLYRENDER_FIELD",
                            "sICHAN_POLYRENDER_FINERATE",
                            "sICHAN_POLYRENDER_FINETHRESH",
                            "sICHAN_POLYRENDER_FIRST",
                            "sICHAN_POLYRENDER_FRMPASSES",
                            "sICHAN_POLYRENDER_FRMRANGE",
                            "sICHAN_POLYRENDER_FULLBUFF",
                            "sICHAN_POLYRENDER_LAST",
                            "sICHAN_POLYRENDER_MERGERAD",
                            "sICHAN_POLYRENDER_OUTPAT",
                            "sICHAN_POLYRENDER_PASPECT",
                            "sICHAN_POLYRENDER_REGION",
                            "sICHAN_POLYRENDER_REGX0",
                            "sICHAN_POLYRENDER_REGX1",
                            "sICHAN_POLYRENDER_REGY0",
                            "sICHAN_POLYRENDER_REGY1",
                            "sICHAN_POLYRENDER_RENDTYPE",
                            "sICHAN_POLYRENDER_RESUNIT",
                            "sICHAN_POLYRENDER_RESX",
                            "sICHAN_POLYRENDER_RESY",
                            "sICHAN_POLYRENDER_STEP",
                            "sICHAN_PROCEDURAL_ALPHA1",
                            "sICHAN_PROCEDURAL_ALPHA2",
                            "sICHAN_PROCEDURAL_BIAS",
                            "sICHAN_PROCEDURAL_COLOR1",
                            "sICHAN_PROCEDURAL_COLOR2",
                            "sICHAN_PROCEDURAL_GAIN",
                            "sICHAN_PROCEDURAL_VALUE1",
                            "sICHAN_PROCEDURAL_VALUE2",
                            "sICHAN_PROCESS_BIAS",
                            "sICHAN_PROCESS_GAIN",
                            "sICHAN_PROCESS_HUE",
                            "sICHAN_PROCESS_SAT",
                            "sICHAN_PROCESS_VAL",
                            "sICHAN_PSIM_ADDAGE",
                            "sICHAN_PSIM_ADDPATH",
                            "sICHAN_PSIM_AGEEXTEND",
                            "sICHAN_PSIM_AGEKILL",
                            "sICHAN_PSIM_AGEMAX",
                            "sICHAN_PSIM_CACHEMEM",
                            "sICHAN_PSIM_COLOR",
                            "sICHAN_PSIM_DRAG",
                            "sICHAN_PSIM_DRAGENABLE",
                            "sICHAN_PSIM_ENABLE",
                            "sICHAN_PSIM_GRAVAXIS",
                            "sICHAN_PSIM_GRAVENABLE",
                            "sICHAN_PSIM_GRAVITY",
                            "sICHAN_PSIM_NTHREAD",
                            "sICHAN_PSIM_PCOUNT",
                            "sICHAN_PSIM_SAMPLES",
                            "sICHAN_PSIM_STOREFORCE",
                            "sICHAN_PSIM_STOREMASS",
                            "sICHAN_PSIM_TGROUP",
                            "sICHAN_QUATERNION_SHEARXY",
                            "sICHAN_QUATERNION_SHEARXZ",
                            "sICHAN_RENDEROUTPUT_BLOOM",
                            "sICHAN_RENDEROUTPUT_BLOOMRAD",
                            "sICHAN_RENDEROUTPUT_BLOOMTHR",
                            "sICHAN_RENDEROUTPUT_BLUELEVELOFFSET",
                            "sICHAN_RENDEROUTPUT_CLAMP",
                            "sICHAN_RENDEROUTPUT_COLORIZATION",
                            "sICHAN_RENDEROUTPUT_COLORSPACE",
                            "sICHAN_RENDEROUTPUT_CONTANGLE",
                            "sICHAN_RENDEROUTPUT_CONTCOL",
                            "sICHAN_RENDEROUTPUT_CONTFADE",
                            "sICHAN_RENDEROUTPUT_CONTOUR",
                            "sICHAN_RENDEROUTPUT_CONTSTART",
                            "sICHAN_RENDEROUTPUT_CONTWID",
                            "sICHAN_RENDEROUTPUT_DEPTHMAX",
                            "sICHAN_RENDEROUTPUT_FILENAME",
                            "sICHAN_RENDEROUTPUT_FORMAT",
                            "sICHAN_RENDEROUTPUT_GAMMA",
                            "sICHAN_RENDEROUTPUT_GREENLEVELOFFSET",
                            "sICHAN_RENDEROUTPUT_HUEOFFSET",
                            "sICHAN_RENDEROUTPUT_INPUTBLACKLEVEL",
                            "sICHAN_RENDEROUTPUT_INPUTBLUE",
                            "sICHAN_RENDEROUTPUT_INPUTBLUEGRAYLEVEL",
                            "sICHAN_RENDEROUTPUT_INPUTGRAYLEVEL",
                            "sICHAN_RENDEROUTPUT_INPUTGREEN",
                            "sICHAN_RENDEROUTPUT_INPUTGREENGRAYLEVEL",
                            "sICHAN_RENDEROUTPUT_INPUTMINBLUELEVEL",
                            "sICHAN_RENDEROUTPUT_INPUTMINGREENLEVEL",
                            "sICHAN_RENDEROUTPUT_INPUTMINREDLEVEL",
                            "sICHAN_RENDEROUTPUT_INPUTRED",
                            "sICHAN_RENDEROUTPUT_INPUTREDGRAYLEVEL",
                            "sICHAN_RENDEROUTPUT_LEVELOFFSET",
                            "sICHAN_RENDEROUTPUT_MOTIONMAX",
                            "sICHAN_RENDEROUTPUT_OCCLRANGE",
                            "sICHAN_RENDEROUTPUT_OCCLRAYS",
                            "sICHAN_RENDEROUTPUT_OUTPUTBLACKLEVEL",
                            "sICHAN_RENDEROUTPUT_OUTPUTMAXBLUELEVEL",
                            "sICHAN_RENDEROUTPUT_OUTPUTMAXGREENLEVEL",
                            "sICHAN_RENDEROUTPUT_OUTPUTMAXREDLEVEL",
                            "sICHAN_RENDEROUTPUT_OUTPUTMINBLUELEVEL",
                            "sICHAN_RENDEROUTPUT_OUTPUTMINGREENLEVEL",
                            "sICHAN_RENDEROUTPUT_OUTPUTMINREDLEVEL",
                            "sICHAN_RENDEROUTPUT_OUTPUTWHITELEVEL",
                            "sICHAN_RENDEROUTPUT_REDLEVELOFFSET",
                            "sICHAN_RENDEROUTPUT_SATURATION",
                            "sICHAN_RENDEROUTPUT_SAVEPROCESSED",
                            "sICHAN_RENDEROUTPUT_TARGETCOLOR",
                            "sICHAN_RENDEROUTPUT_TONEAMT",
                            "sICHAN_RENDEROUTPUT_UNPREMUL",
                            "sICHAN_RENDEROUTPUT_WHITE",
                            "sICHAN_RENDER_AMBCOLOR",
                            "sICHAN_RENDER_AMBRAD",
                            "sICHAN_RENDER_ANIMNOISE",
                            "sICHAN_RENDER_BATCHSIZE",
                            "sICHAN_RENDER_BIN_STACK",
                            "sICHAN_RENDER_CAMERA",
                            "sICHAN_RENDER_CAUSENABLE",
                            "sICHAN_RENDER_CAUSLOCAL",
                            "sICHAN_RENDER_CAUSMULT",
                            "sICHAN_RENDER_CAUSMULTI",
                            "sICHAN_RENDER_CAUSTOTAL",
                            "sICHAN_RENDER_CAUSWALK",
                            "sICHAN_RENDER_DIRECTMIS",
                            "sICHAN_RENDER_DIRECTSMPS",
                            "sICHAN_RENDER_DISPBUMP",
                            "sICHAN_RENDER_DISPENABLE",
                            "sICHAN_RENDER_DISPJITTER",
                            "sICHAN_RENDER_DISPRATE",
                            "sICHAN_RENDER_DISPRATIO",
                            "sICHAN_RENDER_DISPSMOOTH",
                            "sICHAN_RENDER_EDGEMIN",
                            "sICHAN_RENDER_ENVMIS",
                            "sICHAN_RENDER_ENVRAYS",
                            "sICHAN_RENDER_ENVSAMPLE",
                            "sICHAN_RENDER_GLOBBUMP",
                            "sICHAN_RENDER_GLOBCAUS",
                            "sICHAN_RENDER_GLOBENABLE",
                            "sICHAN_RENDER_GLOBLIMIT",
                            "sICHAN_RENDER_GLOBRANGE",
                            "sICHAN_RENDER_GLOBRAYS",
                            "sICHAN_RENDER_GLOBREJECT",
                            "sICHAN_RENDER_GLOBSCOPE",
                            "sICHAN_RENDER_GLOBSUBS",
                            "sICHAN_RENDER_GLOBSUPER",
                            "sICHAN_RENDER_GLOBVOLS",
                            "sICHAN_RENDER_IMPBOOST",
                            "sICHAN_RENDER_IRRCACHE",
                            "sICHAN_RENDER_IRRCACHE2",
                            "sICHAN_RENDER_IRRDATA",
                            "sICHAN_RENDER_IRRDIRECT2",
                            "sICHAN_RENDER_IRREND",
                            "sICHAN_RENDER_IRRGRADS",
                            "sICHAN_RENDER_IRRLENABLE",
                            "sICHAN_RENDER_IRRLNAME",
                            "sICHAN_RENDER_IRRRATE",
                            "sICHAN_RENDER_IRRRATIO",
                            "sICHAN_RENDER_IRRRAYS",
                            "sICHAN_RENDER_IRRRAYS2",
                            "sICHAN_RENDER_IRRRETRACE",
                            "sICHAN_RENDER_IRRSAMPLE",
                            "sICHAN_RENDER_IRRSENABLE",
                            "sICHAN_RENDER_IRRSMOOTH",
                            "sICHAN_RENDER_IRRSNAME",
                            "sICHAN_RENDER_IRRSTART",
                            "sICHAN_RENDER_IRRUSAGE",
                            "sICHAN_RENDER_IRRVALS",
                            "sICHAN_RENDER_IRRWALK",
                            "sICHAN_RENDER_MERGEFUR",
                            "sICHAN_RENDER_MULTIGEO",
                            "sICHAN_RENDER_RADCACHE",
                            "sICHAN_RENDER_RAYACCEL",
                            "sICHAN_RENDER_RAYCLAMP",
                            "sICHAN_RENDER_RAYOFFSET",
                            "sICHAN_RENDER_RAYSHADOW",
                            "sICHAN_RENDER_RAYTHRESH",
                            "sICHAN_RENDER_REFLDEPTH",
                            "sICHAN_RENDER_REFRDEPTH",
                            "sICHAN_RENDER_SAMPLEVEC",
                            "sICHAN_RENDER_SHADE_STACK",
                            "sICHAN_RENDER_SPECSMPS",
                            "sICHAN_RENDER_SPG_STACK",
                            "sICHAN_RENDER_STACK",
                            "sICHAN_RENDER_SUBDADAPT",
                            "sICHAN_RENDER_SUBDRATE",
                            "sICHAN_RENDER_UNBIASED",
                            "sICHAN_REPLICATOR_CACHE_OBJ",
                            "sICHAN_REPLICATOR_DENSITY",
                            "sICHAN_REPLICATOR_DISP_DENSITY",
                            "sICHAN_REPLICATOR_HIERARCHY",
                            "sICHAN_REPLICATOR_PARTICLE_OBJ",
                            "sICHAN_REPLICATOR_POSRAND",
                            "sICHAN_REPLICATOR_QUANT_COUNT",
                            "sICHAN_REPLICATOR_RANDOM_1",
                            "sICHAN_REPLICATOR_RANDOM_2",
                            "sICHAN_REPLICATOR_RANDOM_3",
                            "sICHAN_REPLICATOR_RANDOM_4",
                            "sICHAN_REPLICATOR_ROTRAND",
                            "sICHAN_REPLICATOR_SCLRAND",
                            "sICHAN_REPLICATOR_SCLUNIFORM",
                            "sICHAN_REPLICATOR_SEED",
                            "sICHAN_REPLICATOR_SNAPROT",
                            "sICHAN_REPLICATOR_SOURCE",
                            "sICHAN_REPLICATOR_SOURCE_TRANSFORM",
                            "sICHAN_REPLICATOR_TIMEOFF",
                            "sICHAN_REPLICATOR_TIMERANGE",
                            "sICHAN_ROTATION_ORDER",
                            "sICHAN_ROTATION_ROT",
                            "sICHAN_SCALE_SCL",
                            "sICHAN_SCENE_CURRENTE",
                            "sICHAN_SCENE_CURRENTS",
                            "sICHAN_SCENE_DRAWSIZE",
                            "sICHAN_SCENE_FPS",
                            "sICHAN_SCENE_OCIOCONFIG",
                            "sICHAN_SCENE_SCENEE",
                            "sICHAN_SCENE_SCENES",
                            "sICHAN_SCENE_TIME",
                            "sICHAN_SCENE_TIMESYS",
                            "sICHAN_SCENE_UPAXIS",
                            "sICHAN_SCENE_WORKPLANE",
                            "sICHAN_SHEAR_SHEARXY",
                            "sICHAN_SHEAR_SHEARXZ",
                            "sICHAN_SHEAR_SHEARYZ",
                            "sICHAN_SPOTLIGHT_BASE",
                            "sICHAN_SPOTLIGHT_CONE",
                            "sICHAN_SPOTLIGHT_EDGE",
                            "sICHAN_SPOTLIGHT_HEIGHT",
                            "sICHAN_SPOTLIGHT_OUTSIDE",
                            "sICHAN_SPOTLIGHT_RADIUS",
                            "sICHAN_SPOTLIGHT_VDISSOLVE",
                            "sICHAN_SPOTLIGHT_VOLUMETRICS",
                            "sICHAN_SPOTLIGHT_VSAMPLES",
                            "sICHAN_SUNLIGHT_AZIMUTH",
                            "sICHAN_SUNLIGHT_CLAMP",
                            "sICHAN_SUNLIGHT_DAY",
                            "sICHAN_SUNLIGHT_ELEVATION",
                            "sICHAN_SUNLIGHT_HAZE",
                            "sICHAN_SUNLIGHT_HEIGHT",
                            "sICHAN_SUNLIGHT_LAT",
                            "sICHAN_SUNLIGHT_LON",
                            "sICHAN_SUNLIGHT_MAPSIZE",
                            "sICHAN_SUNLIGHT_NORTH",
                            "sICHAN_SUNLIGHT_RADIUS",
                            "sICHAN_SUNLIGHT_SPREAD",
                            "sICHAN_SUNLIGHT_SUNPOS",
                            "sICHAN_SUNLIGHT_TIME",
                            "sICHAN_SUNLIGHT_TIMEZONE",
                            "sICHAN_SUNLIGHT_VDISSOLVE",
                            "sICHAN_SUNLIGHT_VOLUMETRICS",
                            "sICHAN_SUNLIGHT_VSAMPLES",
                            "sICHAN_TARGET_ENABLE",
                            "sICHAN_TARGET_TARGETFOCUS",
                            "sICHAN_TARGET_TARGETROLL",
                            "sICHAN_TEXTURELAYER_BLEND",
                            "sICHAN_TEXTURELAYER_EFFECT",
                            "sICHAN_TEXTURELAYER_ENABLE",
                            "sICHAN_TEXTURELAYER_FILTER",
                            "sICHAN_TEXTURELAYER_INVERT",
                            "sICHAN_TEXTURELAYER_OPACITY",
                            "sICHAN_TEXTURELOC_FALLOFF",
                            "sICHAN_TEXTURELOC_FALLTYPE",
                            "sICHAN_TEXTURELOC_PROJAXIS",
                            "sICHAN_TEXTURELOC_PROJTYPE",
                            "sICHAN_TEXTURELOC_STACK",
                            "sICHAN_TEXTURELOC_TILEU",
                            "sICHAN_TEXTURELOC_TILEV",
                            "sICHAN_TEXTURELOC_UVMAP",
                            "sICHAN_TEXTURELOC_WORLD",
                            "sICHAN_TEXTURELOC_WRAPU",
                            "sICHAN_TEXTURELOC_WRAPV",
                            "sICHAN_TRANSFORM_BLEND",
                            "sICHAN_TRANSFORM_MATRIX",
                            "sICHAN_TRANSFORM_TYPE",
                            "sICHAN_TRANSFORM_UNMATRIX",
                            "sICHAN_TRANSLATION_POS",
                            "sICHAN_TRISURF_SURF",
                            "sICHAN_UISTATE_LOCK",
                            "sICHAN_UISTATE_RENDER",
                            "sICHAN_UISTATE_SELECT",
                            "sICHAN_UISTATE_VISIBLE",
                            "sICHAN_VIDEOCLIP_ALPHAMODE",
                            "sICHAN_VIDEOCLIP_COLORSPACE",
                            "sICHAN_VIDEOCLIP_FPS",
                            "sICHAN_VIDEOCLIP_IMAGESTACK",
                            "sICHAN_VIDEOCLIP_INTERLACE",
                            "sICHAN_VIDEOSEQUENCE_ENDBEHAVIOR",
                            "sICHAN_VIDEOSEQUENCE_FIRSTFRAME",
                            "sICHAN_VIDEOSEQUENCE_LASTFRAME",
                            "sICHAN_VIDEOSEQUENCE_PATTERN",
                            "sICHAN_VIDEOSEQUENCE_STARTFRAME",
                            "sICHAN_VIDEOSTILL_FILENAME",
                            "sICHAN_VIDEOSTILL_FORMAT",
                            "sICHAN_VMAPTEXTURE_VMAP",
                            "sICHAN_WEIGHTCONTAINER_ENABLE",
                            "sICHAN_WEIGHTCONTAINER_INFLUENCE",
                            "sICHAN_WEIGHTCONTAINER_WEIGHTMAP",
                            "sICHAN_WOOD_GRAIN",
                            "sICHAN_WOOD_GRAINSCALE",
                            "sICHAN_WOOD_RINGSCALE",
                            "sICHAN_WOOD_WAVE",
                            "sICHAN_WOOD_WAVESCALE",
                            "sICHAN_XFRMCORE_INHERITPOS",
                            "sICHAN_XFRMCORE_INHERITROT",
                            "sICHAN_XFRMCORE_INHERITSCL",
                            "sICHAN_XFRMCORE_LOCALMATRIX",
                            "sICHAN_XFRMCORE_PARENTMATRIX",
                            "sICHAN_XFRMCORE_WORLDMATRIX",
                            "sICHAN_XFRMCORE_WPARENTMATRIX",
                            "sICHAN_XFRMCORE_WPIVPOSMATRIX",
                            "sICHAN_XFRMCORE_WPIVROTMATRIX",
                            "sICHAN_XFRMCORE_WPOSMATRIX",
                            "sICHAN_XFRMCORE_WROTMATRIX",
                            "sICHAN_XFRMCORE_WSCLMATRIX",
                            "sICVAL_AREALIGHT_SHAPE_ELLIPSE",
                            "sICVAL_AREALIGHT_SHAPE_RECTANGLE",
                            "sICVAL_BACKDROP_PROJECTION_BACK",
                            "sICVAL_BACKDROP_PROJECTION_BOTTOM",
                            "sICVAL_BACKDROP_PROJECTION_CAMERA",
                            "sICVAL_BACKDROP_PROJECTION_FRONT",
                            "sICVAL_BACKDROP_PROJECTION_LEFT",
                            "sICVAL_BACKDROP_PROJECTION_RIGHT",
                            "sICVAL_BACKDROP_PROJECTION_TOP",
                            "sICVAL_CAMERA_FILMFIT_FILL",
                            "sICVAL_CAMERA_FILMFIT_HORIZONTAL",
                            "sICVAL_CAMERA_FILMFIT_OVERSCAN",
                            "sICVAL_CAMERA_FILMFIT_VERTICAL",
                            "sICVAL_CAMERA_PROJTYPE_ORTHO",
                            "sICVAL_CAMERA_PROJTYPE_PERSP",
                            "sICVAL_CAMERA_PROJTYPE_SPHERICAL",
                            "sICVAL_CELLULAR_TYPE_ANGULAR",
                            "sICVAL_CELLULAR_TYPE_ROUND",
                            "sICVAL_CHECKER_TYPE_CUBE",
                            "sICVAL_CHECKER_TYPE_SQUARE",
                            "sICVAL_DEFAULTSHADER_ALPHATYPE_EXP",
                            "sICVAL_DEFAULTSHADER_ALPHATYPE_NONE",
                            "sICVAL_DEFAULTSHADER_FOGTYPE_EXP",
                            "sICVAL_DEFAULTSHADER_FOGTYPE_NONE",
                            "sICVAL_DEFORMGROUP_INTERPOLATION_DQS",
                            "sICVAL_DEFORMGROUP_INTERPOLATION_LINEAR",
                            "sICVAL_DEFORMGROUP_INTERPOLATION_LOCAL",
                            "sICVAL_DOTS_TYPE_CUBE",
                            "sICVAL_DOTS_TYPE_HEXAGON",
                            "sICVAL_DOTS_TYPE_SQUARE",
                            "sICVAL_ENVIRONMENT_PROJTYPE_ANGULAR",
                            "sICVAL_ENVIRONMENT_PROJTYPE_SPHERICAL",
                            "sICVAL_ENVIRONMENT_SHADTYPE_NONE",
                            "sICVAL_ENVIRONMENT_SHADTYPE_RAYTRACE",
                            "sICVAL_ENVMATERIAL_ENVTYPE_CONSTANT",
                            "sICVAL_ENVMATERIAL_ENVTYPE_GRAD2",
                            "sICVAL_ENVMATERIAL_ENVTYPE_GRAD4",
                            "sICVAL_ENVMATERIAL_ENVTYPE_OVERCAST",
                            "sICVAL_ENVMATERIAL_ENVTYPE_PHYSICAL",
                            "sICVAL_GENINFLUENCE_INTERPOLATION_LINEAR",
                            "sICVAL_GENINFLUENCE_INTERPOLATION_LOCAL",
                            "sICVAL_GENINFLUENCE_TYPE_ALL",
                            "sICVAL_GENINFLUENCE_TYPE_MATERIAL",
                            "sICVAL_GENINFLUENCE_TYPE_PART",
                            "sICVAL_GENINFLUENCE_TYPE_PICK",
                            "sICVAL_GENINFLUENCE_TYPE_PSELSET",
                            "sICVAL_GENINFLUENCE_TYPE_WEIGHT",
                            "sICVAL_GLDRAW_FILLOPTOINS_BGMINUS",
                            "sICVAL_GLDRAW_FILLOPTOINS_BGPLUS",
                            "sICVAL_GLDRAW_FILLOPTOINS_DEFAULT",
                            "sICVAL_GLDRAW_FILLOPTOINS_USER",
                            "sICVAL_GLDRAW_STYLE_DEFAULT",
                            "sICVAL_GLDRAW_STYLE_SHADE",
                            "sICVAL_GLDRAW_STYLE_SOLID",
                            "sICVAL_GLDRAW_STYLE_VMAP",
                            "sICVAL_GLDRAW_STYLE_WIRE",
                            "sICVAL_GLDRAW_TEXTURE_DECAL",
                            "sICVAL_GLDRAW_TEXTURE_OFF",
                            "sICVAL_GLDRAW_TEXTURE_SHADE",
                            "sICVAL_GLDRAW_WIREOPTOINS_BGMINUS",
                            "sICVAL_GLDRAW_WIREOPTOINS_BGPLUS",
                            "sICVAL_GLDRAW_WIREOPTOINS_DEFAULT",
                            "sICVAL_GLDRAW_WIREOPTOINS_USER",
                            "sICVAL_GRID_TYPE_CUBE",
                            "sICVAL_GRID_TYPE_HEXAGON",
                            "sICVAL_GRID_TYPE_LINE",
                            "sICVAL_GRID_TYPE_SQUARE",
                            "sICVAL_GRID_TYPE_TRIANGLE",
                            "sICVAL_IBLURFILTER_BLURTYPE_GAUSSIAN",
                            "sICVAL_IBLURFILTER_BLURTYPE_SQUARE",
                            "sICVAL_IBLURFILTER_BLURTYPE_TENT",
                            "sICVAL_IBLURFILTER_CHANNELS_A",
                            "sICVAL_IBLURFILTER_CHANNELS_B",
                            "sICVAL_IBLURFILTER_CHANNELS_G",
                            "sICVAL_IBLURFILTER_CHANNELS_R",
                            "sICVAL_IBLURFILTER_CHANNELS_RGB",
                            "sICVAL_IBLURFILTER_CHANNELS_RGBA",
                            "sICVAL_IMAGEMAP_ALPHA_IGNORE",
                            "sICVAL_IMAGEMAP_ALPHA_ONLY",
                            "sICVAL_IMAGEMAP_ALPHA_USE",
                            "sICVAL_IMAGEMAP_PIXBLEND_BICUBIC",
                            "sICVAL_IMAGEMAP_PIXBLEND_BILINEAR",
                            "sICVAL_IMAGEMAP_PIXBLEND_NEAREST",
                            "sICVAL_ITEMINFLUENCE_INTERPOLATION_LINEAR",
                            "sICVAL_ITEMINFLUENCE_INTERPOLATION_LOCAL",
                            "sICVAL_LIGHT_SHADTYPE_NONE",
                            "sICVAL_LIGHT_SHADTYPE_RAYTRACE",
                            "sICVAL_LIGHT_SHADTYPE_SHADOWMAP",
                            "sICVAL_LOCATOR_DEFORMMODE_LOCAL",
                            "sICVAL_LOCATOR_DEFORMMODE_ROTXY",
                            "sICVAL_LOCATOR_DEFORMMODE_ROTXZ",
                            "sICVAL_LOCATOR_DEFORMMODE_ROTYZ",
                            "sICVAL_LOCATOR_DEFORMMODE_WORLD",
                            "sICVAL_LOCATOR_DRAWSHAPE_CUSTOM",
                            "sICVAL_LOCATOR_DRAWSHAPE_DEFAULT",
                            "sICVAL_LOCATOR_LINK_CUSTOM",
                            "sICVAL_LOCATOR_LINK_DEFAULT",
                            "sICVAL_LOCATOR_STATE_DEFAULT",
                            "sICVAL_LOCATOR_STATE_OFF",
                            "sICVAL_LOCATOR_STATE_ON",
                            "sICVAL_NOISE_TYPE_FRACTAL",
                            "sICVAL_NOISE_TYPE_SIMPLE",
                            "sICVAL_NOISE_TYPE_TURBULENCE",
                            "sICVAL_PARTICLEOP_TYPE_ASSIGN",
                            "sICVAL_PARTICLEOP_TYPE_INTEGRATE",
                            "sICVAL_PARTICLEOP_TYPE_NEW",
                            "sICVAL_PARTICLEOP_TYPE_TRIGGER",
                            "sICVAL_PROXY_PREVREND_NONE",
                            "sICVAL_PROXY_PREVREND_PREVIEW",
                            "sICVAL_PROXY_PREVREND_RENDER",
                            "sICVAL_RENDER_AAFILTER_BOX",
                            "sICVAL_RENDER_AAFILTER_CATMULL",
                            "sICVAL_RENDER_AAFILTER_GAUSSIAN",
                            "sICVAL_RENDER_AAFILTER_MITCHELL",
                            "sICVAL_RENDER_AAFILTER_TRIANGLE",
                            "sICVAL_RENDER_AA_S1",
                            "sICVAL_RENDER_AA_S1024",
                            "sICVAL_RENDER_AA_S128",
                            "sICVAL_RENDER_AA_S16",
                            "sICVAL_RENDER_AA_S2",
                            "sICVAL_RENDER_AA_S256",
                            "sICVAL_RENDER_AA_S32",
                            "sICVAL_RENDER_AA_S4",
                            "sICVAL_RENDER_AA_S512",
                            "sICVAL_RENDER_AA_S64",
                            "sICVAL_RENDER_AA_S8",
                            "sICVAL_RENDER_BKTORDER_COLUMNS",
                            "sICVAL_RENDER_BKTORDER_HILBERT",
                            "sICVAL_RENDER_BKTORDER_RANDOM",
                            "sICVAL_RENDER_BKTORDER_ROWS",
                            "sICVAL_RENDER_BKTORDER_SPIRAL",
                            "sICVAL_RENDER_DIRECTMIS_BOTH",
                            "sICVAL_RENDER_DIRECTMIS_DIFFUSE",
                            "sICVAL_RENDER_DIRECTMIS_NONE",
                            "sICVAL_RENDER_DIRECTMIS_SPECULAR",
                            "sICVAL_RENDER_ENVMIS_BOTH",
                            "sICVAL_RENDER_ENVMIS_DIFFUSE",
                            "sICVAL_RENDER_ENVMIS_NONE",
                            "sICVAL_RENDER_ENVMIS_REFLECTION",
                            "sICVAL_RENDER_FIELD_LOWER",
                            "sICVAL_RENDER_FIELD_OFF",
                            "sICVAL_RENDER_FIELD_UPPER",
                            "sICVAL_RENDER_GLOBCAUS_BOTH",
                            "sICVAL_RENDER_GLOBCAUS_NONE",
                            "sICVAL_RENDER_GLOBCAUS_REFLECTION",
                            "sICVAL_RENDER_GLOBCAUS_REFRACTION",
                            "sICVAL_RENDER_GLOBSCOPE_ALL",
                            "sICVAL_RENDER_GLOBSCOPE_ENVIRONMENT",
                            "sICVAL_RENDER_GLOBSCOPE_GEOMETRY",
                            "sICVAL_RENDER_GLOBSCOPE_VOLUMETRICS",
                            "sICVAL_RENDER_GLOBSUBS_BOTH",
                            "sICVAL_RENDER_GLOBSUBS_GIAFFECTSSS",
                            "sICVAL_RENDER_GLOBSUBS_NONE",
                            "sICVAL_RENDER_GLOBSUBS_SSSAFFECTGI",
                            "sICVAL_RENDER_IRRDATA_FAST",
                            "sICVAL_RENDER_IRRDATA_SMALL",
                            "sICVAL_RENDER_IRRGRADS_BOTH",
                            "sICVAL_RENDER_IRRGRADS_NONE",
                            "sICVAL_RENDER_IRRGRADS_ROTATION",
                            "sICVAL_RENDER_IRRGRADS_TRANSLATION",
                            "sICVAL_RENDER_IRRSAMPLE_JITTER",
                            "sICVAL_RENDER_IRRSAMPLE_POISSON",
                            "sICVAL_RENDER_IRRSTART_S16",
                            "sICVAL_RENDER_IRRSTART_S2",
                            "sICVAL_RENDER_IRRSTART_S32",
                            "sICVAL_RENDER_IRRSTART_S4",
                            "sICVAL_RENDER_IRRSTART_S64",
                            "sICVAL_RENDER_IRRSTART_S8",
                            "sICVAL_RENDER_IRRUSAGE_BOTH",
                            "sICVAL_RENDER_IRRUSAGE_FIRST",
                            "sICVAL_RENDER_IRRUSAGE_SECOND",
                            "sICVAL_RENDER_RENDTYPE_AUTOMATIC",
                            "sICVAL_RENDER_RENDTYPE_INTERACTIVE",
                            "sICVAL_RENDER_RENDTYPE_RAYTRACE",
                            "sICVAL_RENDER_RENDTYPE_SCANLINE",
                            "sICVAL_RENDER_RESUNIT_CM",
                            "sICVAL_RENDER_RESUNIT_INCHES",
                            "sICVAL_RENDER_RESUNIT_PIXELS",
                            "sICVAL_SCENE_TIMESYSTEM_FILMCODE",
                            "sICVAL_SCENE_TIMESYSTEM_FRAMES",
                            "sICVAL_SCENE_TIMESYSTEM_SECONDS",
                            "sICVAL_SCENE_TIMESYSTEM_SMPTE",
                            "sICVAL_TEXTURELAYER_BLEND_ADD",
                            "sICVAL_TEXTURELAYER_BLEND_COLORBURN",
                            "sICVAL_TEXTURELAYER_BLEND_COLORDODGE",
                            "sICVAL_TEXTURELAYER_BLEND_DARKEN",
                            "sICVAL_TEXTURELAYER_BLEND_DIFFERENCE",
                            "sICVAL_TEXTURELAYER_BLEND_DIVIDE",
                            "sICVAL_TEXTURELAYER_BLEND_HARDLIGHT",
                            "sICVAL_TEXTURELAYER_BLEND_LIGHTEN",
                            "sICVAL_TEXTURELAYER_BLEND_MULTIPLY",
                            "sICVAL_TEXTURELAYER_BLEND_NORMAL",
                            "sICVAL_TEXTURELAYER_BLEND_NORMALMULT",
                            "sICVAL_TEXTURELAYER_BLEND_OVERLAY",
                            "sICVAL_TEXTURELAYER_BLEND_SCREEN",
                            "sICVAL_TEXTURELAYER_BLEND_SOFTLIGHT",
                            "sICVAL_TEXTURELAYER_BLEND_SUBTRACT",
                            "sICVAL_TEXTURELOC_FALLTYPE_CUBIC",
                            "sICVAL_TEXTURELOC_FALLTYPE_LINEARX",
                            "sICVAL_TEXTURELOC_FALLTYPE_LINEARY",
                            "sICVAL_TEXTURELOC_FALLTYPE_LINEARZ",
                            "sICVAL_TEXTURELOC_FALLTYPE_SPHERICAL",
                            "sICVAL_TEXTURELOC_PROJTYPE_CUBIC",
                            "sICVAL_TEXTURELOC_PROJTYPE_CYLINDRICAL",
                            "sICVAL_TEXTURELOC_PROJTYPE_FRONT",
                            "sICVAL_TEXTURELOC_PROJTYPE_LIGHTPROBE",
                            "sICVAL_TEXTURELOC_PROJTYPE_NONE",
                            "sICVAL_TEXTURELOC_PROJTYPE_PLANAR",
                            "sICVAL_TEXTURELOC_PROJTYPE_SPHERICAL",
                            "sICVAL_TEXTURELOC_PROJTYPE_UV",
                            "sICVAL_TEXTURELOC_TILEUV_EDGE",
                            "sICVAL_TEXTURELOC_TILEUV_MIRROR",
                            "sICVAL_TEXTURELOC_TILEUV_REPEAT",
                            "sICVAL_TEXTURELOC_TILEUV_RESET",
                            "sICVAL_TRANSFORM_TYPE_CORE",
                            "sICVAL_TRANSFORM_TYPE_INVERSE",
                            "sICVAL_TRANSFORM_TYPE_NONE",
                            "sICVAL_TRANSFORM_TYPE_PIVOT",
                            "sICVAL_TRANSFORM_TYPE_PIVOT_C",
                            "sICVAL_TRANSFORM_TYPE_SHEAR",
                            "sICVAL_TRANSFORM_TYPE_SYS",
                            "sICVAL_VIDEOSEQUENCE_ENDBEHAVIOR_HOLD",
                            "sICVAL_VIDEOSEQUENCE_ENDBEHAVIOR_PINGPONG",
                            "sICVAL_VIDEOSEQUENCE_ENDBEHAVIOR_REPEAT",
                            "sIMAGEMONITOR_SOURCE_NOTIFIER",
                            "sIMAGEPROC_NOTIFIER",
                            "sITYPE_ADVANCEDMATERIAL",
                            "sITYPE_AREALIGHT",
                            "sITYPE_AUDIOCLIP",
                            "sITYPE_AUDIOFILE",
                            "sITYPE_BACKDROP",
                            "sITYPE_BAKE",
                            "sITYPE_BEZIER",
                            "sITYPE_CAMERA",
                            "sITYPE_CAPSULE",
                            "sITYPE_CELLULAR",
                            "sITYPE_CELSHADER",
                            "sITYPE_CHANMODIFY",
                            "sITYPE_CHECKER",
                            "sITYPE_CONSTANT",
                            "sITYPE_CURVE",
                            "sITYPE_CURVECONSTRAIN",
                            "sITYPE_CV",
                            "sITYPE_CYLINDERLIGHT",
                            "sITYPE_DEFAULTSHADER",
                            "sITYPE_DEFORM",
                            "sITYPE_DEFORMFOLDER",
                            "sITYPE_DEFORMGROUP",
                            "sITYPE_DOMELIGHT",
                            "sITYPE_DOTS",
                            "sITYPE_EDGETRANSSHADER",
                            "sITYPE_ENVIRONMENT",
                            "sITYPE_ENVMATERIAL",
                            "sITYPE_ENVSHADER",
                            "sITYPE_FALLOFF",
                            "sITYPE_FORCE",
                            "sITYPE_FURMATERIAL",
                            "sITYPE_FXSHADER",
                            "sITYPE_GENINFLUENCE",
                            "sITYPE_GLDRAW",
                            "sITYPE_GLOWSHADER",
                            "sITYPE_GLOWSHADER_BASEISOTROPY",
                            "sITYPE_GLOWSHADER_BASEROUGHNESS",
                            "sITYPE_GLOWSHADER_COATISOTROPY",
                            "sITYPE_GLOWSHADER_COATROUGHNESS",
                            "sITYPE_GLOWSHADER_GLOWAMP",
                            "sITYPE_GLOWSHADER_GLOWSIZE",
                            "sITYPE_GLOWSHADER_LAYERS",
                            "sITYPE_GRADIENT",
                            "sITYPE_GRID",
                            "sITYPE_GROUP",
                            "sITYPE_GROUPLOCATOR",
                            "sITYPE_IBLURFILTER",
                            "sITYPE_IBRIGHTFILTER",
                            "sITYPE_IGAMMAFILTER",
                            "sITYPE_IK2DLIMB",
                            "sITYPE_IMAGEFILTER",
                            "sITYPE_IMAGEFOLDER",
                            "sITYPE_IMAGEGROUP",
                            "sITYPE_IMAGELAYER",
                            "sITYPE_IMAGEMAP",
                            "sITYPE_ITEMINFLUENCE",
                            "sITYPE_ITEMMODIFY",
                            "sITYPE_LIGHT",
                            "sITYPE_LIGHTMATERIAL",
                            "sITYPE_LOCATOR",
                            "sITYPE_LOCDEFORM",
                            "sITYPE_MAPMIX",
                            "sITYPE_MASK",
                            "sITYPE_MDD",
                            "sITYPE_MDD2",
                            "sITYPE_MEDIACLIP",
                            "sITYPE_MESH",
                            "sITYPE_MESHINST",
                            "sITYPE_MODSCULPT",
                            "sITYPE_MORPHDEFORM",
                            "sITYPE_MORPHMIX",
                            "sITYPE_MULTIPARTICLE",
                            "sITYPE_NOISE",
                            "sITYPE_ORDEREDPARTICLE",
                            "sITYPE_PARTICLEOP",
                            "sITYPE_PHOTOMETRYLIGHT",
                            "sITYPE_PLOAD",
                            "sITYPE_POINTLIGHT",
                            "sITYPE_POLYRENDER",
                            "sITYPE_PROCESS",
                            "sITYPE_PROXY",
                            "sITYPE_PSIM",
                            "sITYPE_QUATERNION",
                            "sITYPE_RENDER",
                            "sITYPE_RENDEROUTPUT",
                            "sITYPE_REPLICATOR",
                            "sITYPE_ROTATION",
                            "sITYPE_SCALE",
                            "sITYPE_SCENE",
                            "sITYPE_SCHLICKSHADER",
                            "sITYPE_SHEAR",
                            "sITYPE_SINGLEPARTICLE",
                            "sITYPE_SOFTLAG",
                            "sITYPE_SPOTLIGHT",
                            "sITYPE_SUNLIGHT",
                            "sITYPE_TARGET",
                            "sITYPE_TEXTURELAYER",
                            "sITYPE_TEXTURELOC",
                            "sITYPE_TRANSFORM",
                            "sITYPE_TRANSLATION",
                            "sITYPE_TRISURF",
                            "sITYPE_UISTATE",
                            "sITYPE_VIDEOCLIP",
                            "sITYPE_VIDEOSEQUENCE",
                            "sITYPE_VIDEOSTILL",
                            "sITYPE_VMAPTEXTURE",
                            "sITYPE_VOLUME",
                            "sITYPE_WEIGHTCONTAINER",
                            "sITYPE_WOOD",
                            "sITYPE_WRAPDEFORM",
                            "sITYPE_XFRMCORE",
                            "sKNOWN_COLORSPACE_LINEAR",
                            "sLOD_CLASSLIST",
                            "sLOD_DOSPATTERN",
                            "sLOD_MACPATTERN",
                            "sLOD_THREADSAFE",
                            "sLOG_LOGSYS",
                            "sLOG_MASTERSYS",
                            "sLOG_SCRIPTSYS",
                            "sMARK_HALO",
                            "sMARK_HIDE",
                            "sMARK_LOCK",
                            "sMARK_SELECT",
                            "sMARK_USER_0",
                            "sMARK_USER_1",
                            "sMARK_USER_2",
                            "sMARK_USER_3",
                            "sMARK_USER_4",
                            "sMARK_USER_5",
                            "sMARK_USER_6",
                            "sMARK_USER_7",
                            "sMOD_GRAPHLIST",
                            "sMOD_GUIDLIST",
                            "sMOD_REQUIREDTYPE",
                            "sMOD_SERVER",
                            "sMOD_TYPELIST",
                            "sMOVIE_OPTIONSCOMMAND",
                            "sMOVIE_SAVESTEREO",
                            "sNOTIFIER_ACTION",
                            "sNOTIFIER_CHANNEL",
                            "sNOTIFIER_GRAPHS",
                            "sNOTIFIER_ITEM",
                            "sNOTIFIER_MESHES",
                            "sNOTIFIER_SELECT",
                            "sPARTICLEATTR_DEFORM",
                            "sPARTICLEATTR_SEED",
                            "sPARTICLEATTR_SPACING",
                            "sPARTICLEATTR_UPAXIS",
                            "sPARTICLEATTR_USEPOL",
                            "sPBMETA_CAPTION",
                            "sPBMETA_LABEL",
                            "sPBMETA_TOOLTIP",
                            "sPBS_CANAPPLY",
                            "sPBS_CANDO",
                            "sPBS_CATEGORY",
                            "sPBS_DOSPATTERN",
                            "sPBS_DYNAMICTHUMBNAILS",
                            "sPBS_ORDINAL",
                            "sPFILT_ENABLECHANNEL",
                            "sPKG_CONVERTCMD",
                            "sPKG_CREATECMD",
                            "sPKG_CREATE_INDIRECT",
                            "sPKG_CURVES_CHANNEL",
                            "sPKG_DEFORMATION_CHANNEL",
                            "sPKG_DEFORMER_CHANNEL",
                            "sPKG_DEFORMER_CREATECMD",
                            "sPKG_DEFORMER_FLAGS",
                            "sPKG_GRAPHS",
                            "sPKG_INSTANCEABLE_CHANNEL",
                            "sPKG_IS_COREVOLUME",
                            "sPKG_IS_MASK",
                            "sPKG_NONEVALREAD",
                            "sPKG_PCOOP_CHANNEL",
                            "sPKG_PFILT_CHANNEL",
                            "sPKG_READPARTICLES",
                            "sPKG_REPLICATOR",
                            "sPKG_SHADER_CONTEXT",
                            "sPKG_SHADER_NODE",
                            "sPKG_SUPERTYPE",
                            "sPKG_USEFEATURES",
                            "sPKG_VOXEL_CHANNEL",
                            "sPTYP_BEZIER",
                            "sPTYP_CRVFIL",
                            "sPTYP_CURVE",
                            "sPTYP_FACE",
                            "sPTYP_LINE",
                            "sPTYP_PSUB",
                            "sPTYP_SPCH",
                            "sPTYP_SUBD",
                            "sPTYP_TEXT",
                            "sP_ANIM_DEFORM",
                            "sP_CAM_FRUSTUM",
                            "sP_CAM_FRUSTUM_T1",
                            "sP_CAM_PIXEL",
                            "sP_CAM_RAY",
                            "sP_CAM_RAY_T1",
                            "sP_CAM_RESOLUTION",
                            "sP_CAM_UVBAKE",
                            "sP_DISPLACE",
                            "sP_ENV_INFINITECOLOR",
                            "sP_ENV_VISIBILITY",
                            "sP_FUR_PARMS",
                            "sP_GLO_CAUSTICS",
                            "sP_GLO_DISPLACEMENT",
                            "sP_GLO_INDIRECT",
                            "sP_GLO_LIGHTING",
                            "sP_GLO_RENDERING",
                            "sP_GROUP_LAYER",
                            "sP_LGT_COLOR",
                            "sP_LGT_QUALITY",
                            "sP_LGT_SHADOWING",
                            "sP_LGT_SOURCE",
                            "sP_LIGHTING",
                            "sP_PARTICLE_SAMPLE",
                            "sP_RAYCAST",
                            "sP_RAYMARCH",
                            "sP_RENDERBUCKET",
                            "sP_SAMPLE_BUMP",
                            "sP_SAMPLE_CLIP",
                            "sP_SAMPLE_DENSITY",
                            "sP_SAMPLE_DISSOLVE",
                            "sP_SAMPLE_DRIVER",
                            "sP_SAMPLE_FACET",
                            "sP_SAMPLE_FALLOFF",
                            "sP_SAMPLE_MASK",
                            "sP_SAMPLE_PARMS",
                            "sP_SAMPLE_POSITION",
                            "sP_SAMPLE_RAY",
                            "sP_SAMPLE_STENCIL",
                            "sP_SAMPLE_VOLUME",
                            "sP_SAMPLE_XFRM",
                            "sP_SHADER_TYPE",
                            "sP_SHADE_COMPONENTS",
                            "sP_SHADE_DIFFUSE",
                            "sP_SHADE_FLAGS",
                            "sP_SHADE_FOG",
                            "sP_SHADE_LUMINOSITY",
                            "sP_SHADE_MIRROR",
                            "sP_SHADE_OPACITY",
                            "sP_SHADE_OUTPUT",
                            "sP_SHADE_SPECULAR",
                            "sP_SHADE_SUBSURFACE",
                            "sP_SHADE_TRANSPARENCY",
                            "sP_SURF_NORMAL",
                            "sP_SURF_SMOOTH",
                            "sP_TEXTURE_INPUT",
                            "sP_TEXTURE_LOCATOR",
                            "sP_TEXTURE_OUTPUT",
                            "sP_TEXTURE_VALUE",
                            "sP_TOOL_3D_EVENT",
                            "sP_TOOL_ACTCENTER",
                            "sP_TOOL_AXIS",
                            "sP_TOOL_COLOR",
                            "sP_TOOL_CONTENT",
                            "sP_TOOL_ELTAXIS",
                            "sP_TOOL_ELTCENTER",
                            "sP_TOOL_EVENTTRANS",
                            "sP_TOOL_FALLOFF",
                            "sP_TOOL_HIT_EVENT",
                            "sP_TOOL_IMAGE",
                            "sP_TOOL_INPUT_EVENT",
                            "sP_TOOL_PAINT_BRUSH",
                            "sP_TOOL_PAINT_INK",
                            "sP_TOOL_PAINT_NOZZLE",
                            "sP_TOOL_PAINT_STROKE",
                            "sP_TOOL_PAINT_TARGET",
                            "sP_TOOL_PARTGEN",
                            "sP_TOOL_PATHGEN",
                            "sP_TOOL_PROFILE",
                            "sP_TOOL_RAYCAST",
                            "sP_TOOL_SCREEN_EVENT",
                            "sP_TOOL_SNAPELEMENT",
                            "sP_TOOL_STROKE_EVENT",
                            "sP_TOOL_STYLE",
                            "sP_TOOL_SUBJECT",
                            "sP_TOOL_SYMMETRY",
                            "sP_TOOL_TABLET_EVENT",
                            "sP_TOOL_TEXTURE",
                            "sP_TOOL_VIEW_EVENT",
                            "sP_TOOL_XFRM",
                            "sSAV_DOSTYPE",
                            "sSAV_IMAGE_FLOAT",
                            "sSAV_MACTYPE",
                            "sSAV_OUTCLASS",
                            "sSAV_OUTPUT_KNOWN_COLOR_SPACE",
                            "sSAV_OUTPUT_PIXEL_FORMAT",
                            "sSAV_OVERWRITE",
                            "sSAV_SAVEAS",
                            "sSELTYP_CENTER",
                            "sSELTYP_CHANNEL",
                            "sSELTYP_EDGE",
                            "sSELTYP_ITEM",
                            "sSELTYP_LINK",
                            "sSELTYP_NODE",
                            "sSELTYP_PIVOT",
                            "sSELTYP_POLYGON",
                            "sSELTYP_PRESETPATH",
                            "sSELTYP_SCENE",
                            "sSELTYP_VERTEX",
                            "sSELTYP_VERTEXMAP",
                            "sSHADE_CAMERA",
                            "sSHADE_ENVIRONMENT",
                            "sSHADE_LIGHT",
                            "sSHADE_OUTPUT",
                            "sSHADE_PROCEDURAL",
                            "sSHADE_SCENE",
                            "sSHADE_SGEN",
                            "sSHADE_SURFACE",
                            "sSRVEXT_GUID",
                            "sSRV_LICENSE",
                            "sSRV_LOGSUBSYSTEM",
                            "sSRV_OWNER",
                            "sSRV_SERIAL",
                            "sSRV_USERNAME",
                            "sSTACK_GRADIENT",
                            "sSTACK_IMAGE",
                            "sSTACK_MESH",
                            "sSTACK_PARTICLE",
                            "sSTACK_SHADER",
                            "sSTACK_TEXTURE",
                            "sSTACK_TXTRLOC",
                            "sSTAGED_FILE_LIST",
                            "sSYSTEM_PATH_ASSET",
                            "sSYSTEM_PATH_CONFIGS",
                            "sSYSTEM_PATH_CONTENT",
                            "sSYSTEM_PATH_DOCUMENTS",
                            "sSYSTEM_PATH_EXENAME",
                            "sSYSTEM_PATH_HEADLESS",
                            "sSYSTEM_PATH_HEADLESS32",
                            "sSYSTEM_PATH_HELP",
                            "sSYSTEM_PATH_KITS",
                            "sSYSTEM_PATH_LICENSE",
                            "sSYSTEM_PATH_LOGS",
                            "sSYSTEM_PATH_MODULE",
                            "sSYSTEM_PATH_PREFS",
                            "sSYSTEM_PATH_PROGRAM",
                            "sSYSTEM_PATH_PROJECT",
                            "sSYSTEM_PATH_RESOURCE",
                            "sSYSTEM_PATH_SAMPLE",
                            "sSYSTEM_PATH_SCRIPTS",
                            "sSYSTEM_PATH_TEMP",
                            "sSYSTEM_PATH_USER",
                            "sTBLX_COLLISION_COUNT",
                            "sTBLX_COLLISION_NORM",
                            "sTBLX_COLLISION_POS",
                            "sTBLX_COLLISION_TIME",
                            "sTBLX_COLLISION_VAL",
                            "sTBLX_FEATURE_NORMAL",
                            "sTBLX_FEATURE_OBJPOS",
                            "sTBLX_FEATURE_PARAM_LENGTH",
                            "sTBLX_FEATURE_PARTID",
                            "sTBLX_FEATURE_POS",
                            "sTBLX_FEATURE_RADIANCE",
                            "sTBLX_FEATURE_RADIUS",
                            "sTBLX_FEATURE_TENSION",
                            "sTBLX_FEATURE_TORSION",
                            "sTBLX_FEATURE_VEL",
                            "sTBLX_PARTICLE_AGE",
                            "sTBLX_PARTICLE_ANGVEL",
                            "sTBLX_PARTICLE_DISS",
                            "sTBLX_PARTICLE_FORCE",
                            "sTBLX_PARTICLE_ID",
                            "sTBLX_PARTICLE_ITEM",
                            "sTBLX_PARTICLE_LUM",
                            "sTBLX_PARTICLE_MASS",
                            "sTBLX_PARTICLE_PATH",
                            "sTBLX_PARTICLE_POS",
                            "sTBLX_PARTICLE_PPREV",
                            "sTBLX_PARTICLE_RATE",
                            "sTBLX_PARTICLE_RGB",
                            "sTBLX_PARTICLE_SIZE",
                            "sTBLX_PARTICLE_TORQUE",
                            "sTBLX_PARTICLE_VEL",
                            "sTBLX_PARTICLE_XFRM",
                            "sTFX_CATEGORY",
                            "sTLR_CATEGORY",
                            "sTREEVIEW_EMBEDABILITY",
                            "sTREEVIEW_OPTIONS_FORM",
                            "sTREEVIEW_TYPE",
                            "sTYPE_ACCELERATION",
                            "sTYPE_ANGLE",
                            "sTYPE_ANGLE3",
                            "sTYPE_AXIS",
                            "sTYPE_BOOLEAN",
                            "sTYPE_COLOR",
                            "sTYPE_COLOR1",
                            "sTYPE_DATE",
                            "sTYPE_DATETIME",
                            "sTYPE_DISTANCE",
                            "sTYPE_DISTANCE3",
                            "sTYPE_FILEPATH",
                            "sTYPE_FLOAT",
                            "sTYPE_FLOAT3",
                            "sTYPE_FOCALLENGTH",
                            "sTYPE_FORCE",
                            "sTYPE_FPIXEL",
                            "sTYPE_INTEGER",
                            "sTYPE_INTRANGE",
                            "sTYPE_LIGHT",
                            "sTYPE_MASS",
                            "sTYPE_MATRIX3",
                            "sTYPE_MATRIX4",
                            "sTYPE_MEMORY",
                            "sTYPE_MESH",
                            "sTYPE_NONE",
                            "sTYPE_OBJREF",
                            "sTYPE_PERCENT",
                            "sTYPE_PERCENT3",
                            "sTYPE_PIXEL",
                            "sTYPE_QUATERNION",
                            "sTYPE_SPEED",
                            "sTYPE_STRING",
                            "sTYPE_TIME",
                            "sTYPE_TOD",
                            "sTYPE_TRIGROUP",
                            "sTYPE_UVCOORD",
                            "sTYPE_VERTMAPNAME",
                            "sVECTYPE_RGB",
                            "sVECTYPE_RGBA",
                            "sVECTYPE_UV",
                            "sVECTYPE_UVW",
                            "sVECTYPE_XY",
                            "sVECTYPE_XYZ",
                            "sVFCAT_PARTICLE",
                            "sVFCAT_SURFACE",
                            "sVMAP_ITEMPREFIX",
                            "sVPK_CATEGORY",
                            "s_ACTIONLAYER_ANIM",
                            "s_ACTIONLAYER_EDIT",
                            "s_ACTIONLAYER_SETUP",
                            "s_FX_ANISODIR",
                            "s_FX_BUMP",
                            "s_FX_COATAMOUNT",
                            "s_FX_COATBUMP",
                            "s_FX_COATROUGH",
                            "s_FX_DEFORM_AMP",
                            "s_FX_DIFFAMOUNT",
                            "s_FX_DIFFCOLOR",
                            "s_FX_DIFFROUGH",
                            "s_FX_DISPLACE",
                            "s_FX_DISSOLVE",
                            "s_FX_DRIVERA",
                            "s_FX_DRIVERB",
                            "s_FX_DRIVERC",
                            "s_FX_DRIVERD",
                            "s_FX_ENVALTITUDE",
                            "s_FX_ENVCOLOR",
                            "s_FX_FALLOFF_VALUE",
                            "s_FX_FUR_BEND",
                            "s_FX_FUR_BUMP",
                            "s_FX_FUR_CLDENS",
                            "s_FX_FUR_CLUMPS",
                            "s_FX_FUR_CURLS",
                            "s_FX_FUR_CYLINDERS",
                            "s_FX_FUR_DENSITY",
                            "s_FX_FUR_DIRECTION",
                            "s_FX_FUR_FLEX",
                            "s_FX_FUR_FRIZZ",
                            "s_FX_FUR_FRIZZ_TIP",
                            "s_FX_FUR_GROWJIT",
                            "s_FX_FUR_GUIDE_CLUMP",
                            "s_FX_FUR_GUIDE_DIRECTION",
                            "s_FX_FUR_GUIDE_DIRLENGTH",
                            "s_FX_FUR_GUIDE_NONE",
                            "s_FX_FUR_GUIDE_RANGE",
                            "s_FX_FUR_GUIDE_SHAPE",
                            "s_FX_FUR_KINK",
                            "s_FX_FUR_KINK_TIP",
                            "s_FX_FUR_LENGTH",
                            "s_FX_FUR_STRAYS",
                            "s_FX_FUR_STRIPS",
                            "s_FX_FUR_VECTOR",
                            "s_FX_GROUPMASK",
                            "s_FX_LAYERMASK",
                            "s_FX_LIGHTANGLE",
                            "s_FX_LIGHTCAUSTICS",
                            "s_FX_LIGHTCOLOR",
                            "s_FX_LIGHTDIFFUSE",
                            "s_FX_LIGHTDISTANCE",
                            "s_FX_LIGHTSHADOW",
                            "s_FX_LIGHTSPECULAR",
                            "s_FX_LUMIAMOUNT",
                            "s_FX_LUMICOLOR",
                            "s_FX_NORMAL",
                            "s_FX_OUTPUT_ALPHA",
                            "s_FX_OUTPUT_AMBIENT_OCCLUSION",
                            "s_FX_OUTPUT_DEPTH",
                            "s_FX_OUTPUT_DIFFUSE_AMOUNT",
                            "s_FX_OUTPUT_DIFFUSE_COEFFICIENT",
                            "s_FX_OUTPUT_DIFFUSE_COLOR",
                            "s_FX_OUTPUT_DIFFUSE_ENERGY_CONSERVATION",
                            "s_FX_OUTPUT_DIFFUSE_ROUGHNESS",
                            "s_FX_OUTPUT_DIFFUSE_SHADING_DIRECT",
                            "s_FX_OUTPUT_DIFFUSE_SHADING_INDIRECT",
                            "s_FX_OUTPUT_DIFFUSE_SHADING_TOTAL",
                            "s_FX_OUTPUT_DIFFUSE_SHADING_UNSHADOWED",
                            "s_FX_OUTPUT_DPDU_VECTOR",
                            "s_FX_OUTPUT_DPDV_VECTOR",
                            "s_FX_OUTPUT_FINAL_COLOR",
                            "s_FX_OUTPUT_GEOMETRIC_NORMAL",
                            "s_FX_OUTPUT_IC_POSITIONS",
                            "s_FX_OUTPUT_IC_VALUES",
                            "s_FX_OUTPUT_ILLUMINATION_SHADING_DIRECT",
                            "s_FX_OUTPUT_ILLUMINATION_SHADING_INDIRECT",
                            "s_FX_OUTPUT_ILLUMINATION_SHADING_TOTAL",
                            "s_FX_OUTPUT_ILLUMINATION_SHADING_UNSHADOWED",
                            "s_FX_OUTPUT_LUMINOUS_SHADING",
                            "s_FX_OUTPUT_MOTION",
                            "s_FX_OUTPUT_OBJECT_COORDINATES",
                            "s_FX_OUTPUT_PARTICLE_AGE",
                            "s_FX_OUTPUT_PARTICLE_ID",
                            "s_FX_OUTPUT_PARTICLE_VEL",
                            "s_FX_OUTPUT_REFLECTION_COEFFICIENT",
                            "s_FX_OUTPUT_REFLECTION_OCCLUSION",
                            "s_FX_OUTPUT_REFLECTION_SHADING",
                            "s_FX_OUTPUT_ROUGHNESS",
                            "s_FX_OUTPUT_SEGMENT_ID",
                            "s_FX_OUTPUT_SHADING_INCIDENCE",
                            "s_FX_OUTPUT_SHADING_NORMAL",
                            "s_FX_OUTPUT_SHADING_SAMPLES",
                            "s_FX_OUTPUT_SHADOW_DENSITY",
                            "s_FX_OUTPUT_SPECULAR_COEFFICIENT",
                            "s_FX_OUTPUT_SPECULAR_SHADING",
                            "s_FX_OUTPUT_SUBSURFACE_AMOUNT",
                            "s_FX_OUTPUT_SUBSURFACE_COLOR",
                            "s_FX_OUTPUT_SUBSURFACE_SHADING",
                            "s_FX_OUTPUT_SURFACE_ID",
                            "s_FX_OUTPUT_TRANSPARENT_AMOUNT",
                            "s_FX_OUTPUT_TRANSPARENT_COLOR",
                            "s_FX_OUTPUT_TRANSPARENT_SHADING",
                            "s_FX_OUTPUT_UV_COORDINATES",
                            "s_FX_OUTPUT_VOL_DEPTH",
                            "s_FX_OUTPUT_VOL_OPACITY",
                            "s_FX_OUTPUT_VOL_SCATTERING",
                            "s_FX_OUTPUT_WORLD_COORDINATES",
                            "s_FX_PART_DENS",
                            "s_FX_PART_DISS",
                            "s_FX_PART_SIZE",
                            "s_FX_REFLAMOUNT",
                            "s_FX_REFLCOLOR",
                            "s_FX_REFLFRESNEL",
                            "s_FX_RGBA",
                            "s_FX_ROUGH",
                            "s_FX_SHADER_DIFFUSE_SHADING",
                            "s_FX_SHADER_FOG_SHADING",
                            "s_FX_SHADER_FULL_SHADING",
                            "s_FX_SHADER_LUMINOUS_SHADING",
                            "s_FX_SHADER_REFLECTION_SHADING",
                            "s_FX_SHADER_SPECULAR_SHADING",
                            "s_FX_SHADER_SUBSURFACE_SHADING",
                            "s_FX_SHADER_TRANSPARENT_SHADING",
                            "s_FX_SPECAMOUNT",
                            "s_FX_SPECCOLOR",
                            "s_FX_SPECFRESNEL",
                            "s_FX_SP_DENSITY",
                            "s_FX_SP_HEADING",
                            "s_FX_SP_NORMAL",
                            "s_FX_SP_SIZE",
                            "s_FX_STENCIL",
                            "s_FX_SUBSAMOUNT",
                            "s_FX_SUBSCOLOR",
                            "s_FX_TRANAMOUNT",
                            "s_FX_TRANCOLOR",
                            "s_FX_TRANROUGH",
                            "s_FX_TXTROFFSET",
                            "s_FX_VECDISP",
                            "s_FX_VOLABSORB",
                            "s_FX_VOLABSORB_COL",
                            "s_FX_VOLAMB_COL",
                            "s_FX_VOLDENSITY",
                            "s_FX_VOLLEVEL",
                            "s_FX_VOLLUMI",
                            "s_FX_VOLLUMI_COL",
                            "s_FX_VOLSCATTER",
                            "s_FX_VOLSCATTER_COL",
                            "s_FX_VOLSMPDENSITY",
                            "s_MODIFIER_OPTIONS",
                            "s_NOTIFIER_COLOR_CHANGED",
                            "s_ORD_ACEN",
                            "s_ORD_ACTR",
                            "s_ORD_AXIS",
                            "s_ORD_BRSH",
                            "s_ORD_CONS",
                            "s_ORD_CONT",
                            "s_ORD_EFFR",
                            "s_ORD_NOZL",
                            "s_ORD_PATH",
                            "s_ORD_PINK",
                            "s_ORD_POST",
                            "s_ORD_PTCL",
                            "s_ORD_SIDE",
                            "s_ORD_SNAP",
                            "s_ORD_STYL",
                            "s_ORD_WGHT",
                            "s_PKG_DIRECTCONVERTOK",
                            "s_PKG_IS_REPLICATOR",
                            "s_PKG_NODIRECTCREATE",
                            "u_ACTIONCLIP",
                            "u_ACTIONLISTENER",
                            "u_ADDCHANNEL",
                            "u_ADDDROPACTION",
                            "u_ADJUSTTOOL",
                            "u_ANIMLISTENER",
                            "u_APPACTIVELISTENER",
                            "u_ARRAY",
                            "u_ASYNCMONITORINFO",
                            "u_ASYNCMONITORSYSTEM",
                            "u_ATTRIBUTES",
                            "u_ATTRIBUTESUI",
                            "u_ATTRSEQUENCE",
                            "u_AUDIO",
                            "u_AUDIOANIMSERVICE",
                            "u_AUDIODEVICE",
                            "u_AUDIOHANDLE",
                            "u_AUDIOLOADERTARGET",
                            "u_AUDIOWRITE",
                            "u_AUTOSAVELISTENER",
                            "u_BAGGENERATOR",
                            "u_BASEPATHADDDEST",
                            "u_BLOCKREAD",
                            "u_BLOCKSTORE",
                            "u_BLOCKWRITE",
                            "u_BRUSHTOOLPRESET",
                            "u_BUFFER",
                            "u_CENTERPACKETTRANSLATION",
                            "u_CHANNELDEST",
                            "u_CHANNELGRAPH",
                            "u_CHANNELMODIFIER",
                            "u_CHANNELMODITEM",
                            "u_CHANNELPACKETTRANSLATION",
                            "u_CHANNELREAD",
                            "u_CHANNELUI",
                            "u_CHANNELUI1",
                            "u_CHANNELUISERVICE",
                            "u_CHANNELWRITE",
                            "u_CMDSYSLISTENER",
                            "u_COLOR",
                            "u_COLORDIALOG",
                            "u_COLORMAPPING",
                            "u_COLORMAPPINGMODULE",
                            "u_COLORMAPPINGSERVICE",
                            "u_COLORMODEL",
                            "u_COLORPREDEST",
                            "u_COMMAND",
                            "u_COMMAND1",
                            "u_COMMAND2",
                            "u_COMMANDBLOCK",
                            "u_COMMANDDBHELP",
                            "u_COMMANDEVENT",
                            "u_COMMANDPOSTEND",
                            "u_COMMANDSERVICE",
                            "u_COMPSHADER",
                            "u_COMPSHADER1",
                            "u_CURVE",
                            "u_CURVE1",
                            "u_CURVEGROUP",
                            "u_CUSTOMMATERIAL",
                            "u_CUSTOMMATERIAL1",
                            "u_CUSTOMMATERIAL2",
                            "u_CUSTOMPANE",
                            "u_CUSTOMVIEW",
                            "u_DEFORMATION",
                            "u_DEFORMER",
                            "u_DEFORMERSERVICE",
                            "u_DIRCACHEENTRY",
                            "u_DIRCACHEFILEMETRICS",
                            "u_DIRCACHEGRIDPOSDEST",
                            "u_DIRCACHEMANUALORDERDEST",
                            "u_DIRCACHESERVICE",
                            "u_DIRENTRYTHUMBASYNC",
                            "u_DROP",
                            "u_DROP1",
                            "u_DROPPREVIEWDEFAULT",
                            "u_DROPSERVICE",
                            "u_DTBDROPPREVIEW",
                            "u_DTBGROUPSORTOVERRIDE",
                            "u_EDGE",
                            "u_EDGEPACKETTRANSLATION",
                            "u_ELEMENTAXISPACKET",
                            "u_ELEMENTCENTERPACKET",
                            "u_ENVELOPE",
                            "u_EVALMODIFIER",
                            "u_EVALUATION",
                            "u_EVALUATIONSTACK",
                            "u_EVENTGUIDE",
                            "u_EVENTTRANSLATEPACKET",
                            "u_EVENTTRANSLATEPACKET1",
                            "u_FACTORY",
                            "u_FALLOFF",
                            "u_FALLOFFPACKET",
                            "u_FILE1SERVICE",
                            "u_FILEDIALOGCLIENT",
                            "u_FILEREFERENCE",
                            "u_FILESERVICE",
                            "u_FILESYSDEST",
                            "u_FORCE",
                            "u_FORMDELETEENTRYDEST",
                            "u_FORMENTRYDEST",
                            "u_FORMENTRYDROPPREVIEW",
                            "u_FRAMEBUFFER",
                            "u_GEOCACHESEGMENT",
                            "u_GEOCACHESURFACE",
                            "u_GEOCONSTRAINTPACKET",
                            "u_GRADIENTFILTER",
                            "u_GROUPDEFORMER",
                            "u_GROUPDEST",
                            "u_GROUPENUMERATOR",
                            "u_GROUPITEM",
                            "u_GROUPMEMBERCHANDEST",
                            "u_GROUPMEMBERITEMDEST",
                            "u_GUIDSERVICE",
                            "u_HANDLEDRAW",
                            "u_HOSTSERVICE",
                            "u_IMAGE",
                            "u_IMAGEBLOCKCODEC",
                            "u_IMAGEFILTER",
                            "u_IMAGEFILTERMETRICS",
                            "u_IMAGEFILTERSAMPLE",
                            "u_IMAGELEVELSAMPLE",
                            "u_IMAGELOADERTARGET",
                            "u_IMAGELOADERTARGET1",
                            "u_IMAGEMONITOR",
                            "u_IMAGEMONITORSERVICE",
                            "u_IMAGEPROCESSING",
                            "u_IMAGEPROCESSINGLISTENER",
                            "u_IMAGEPROCESSINGREAD",
                            "u_IMAGEPROCESSINGSERVICE",
                            "u_IMAGESEGMENT",
                            "u_IMAGESERVICE",
                            "u_IMAGEWRITE",
                            "u_INDEXIMAGE",
                            "u_INDEXIMAGEWRITE",
                            "u_INSTANCEABLE",
                            "u_INTRANGE",
                            "u_IOSERVICE",
                            "u_ITEM",
                            "u_ITEM1",
                            "u_ITEMCHANNEL",
                            "u_ITEMCOLLECTION",
                            "u_ITEMGRAPH",
                            "u_ITEMINFLUENCE",
                            "u_ITEMPACKETTRANSLATION",
                            "u_KEYFRAME",
                            "u_LAYEREDIMAGE",
                            "u_LAYEREDIMAGEWRITE",
                            "u_LAYERSCAN",
                            "u_LAYERSERVICE",
                            "u_LIGHTING",
                            "u_LIGHTSAMPLE",
                            "u_LINEEXECUTION",
                            "u_LINEINTERPRETER",
                            "u_LINKPACKETTRANSLATION",
                            "u_LISTENERPORT",
                            "u_LISTENERSERVICE",
                            "u_LOADER",
                            "u_LOADER1",
                            "u_LOADERINFO",
                            "u_LOCATOR",
                            "u_LOCATORDEST",
                            "u_LOG",
                            "u_LOGENTRY",
                            "u_LOGINFOBLOCK",
                            "u_LOGLISTENER",
                            "u_LOGSERVICE",
                            "u_MATRIX",
                            "u_MESH",
                            "u_MESH1",
                            "u_MESHDEST",
                            "u_MESHFILTER",
                            "u_MESHFILTERBBOX",
                            "u_MESHINFLUENCE",
                            "u_MESHLAYERPREDEST",
                            "u_MESHLISTENER",
                            "u_MESHLISTENER1",
                            "u_MESHMAP",
                            "u_MESHSERVICE",
                            "u_MESSAGE",
                            "u_MESSAGESERVICE",
                            "u_MODIFIER",
                            "u_MODIFIER1",
                            "u_MODULE",
                            "u_MODULE1",
                            "u_MONITOR",
                            "u_MOVIE",
                            "u_NAVIGATIONLISTENER",
                            "u_NEEDCONTEXT",
                            "u_NODALSERVICE",
                            "u_NODEPACKETTRANSLATION",
                            "u_NOTIFIER",
                            "u_NOTIFY",
                            "u_NOTIFYSYSSERVICE",
                            "u_PACKAGE",
                            "u_PACKAGE1",
                            "u_PACKAGEINSTANCE",
                            "u_PACKAGEINSTANCE1",
                            "u_PACKETEFFECT",
                            "u_PACKETSERVICE",
                            "u_PAINTBRUSHPACKET",
                            "u_PAINTINKPACKET",
                            "u_PAINTNOZZLEPACKET",
                            "u_PARTICLECOOPERATOR",
                            "u_PARTICLEEVALFRAME",
                            "u_PARTICLEFILTER",
                            "u_PARTICLEGENERATORPACKET",
                            "u_PARTICLEITEM",
                            "u_PARTICLESERVICE",
                            "u_PATHGENERATORPACKET",
                            "u_PATHSTEP",
                            "u_PERSISTENCECLIENT",
                            "u_PERSISTENCESERVICE",
                            "u_PERSISTENTENTRY",
                            "u_PHOTOMETRYPREDEST",
                            "u_PIVOTPACKETTRANSLATION",
                            "u_PLATFORMSERVICE",
                            "u_POINT",
                            "u_POINTCACHEITEM",
                            "u_POLYGON",
                            "u_POLYGON1",
                            "u_POLYGONPACKETTRANSLATION",
                            "u_POLYGONSLICE",
                            "u_PRESET",
                            "u_PRESETBROWSERSERVICE",
                            "u_PRESETLOADERTARGET",
                            "u_PRESETMETRICS",
                            "u_PRESETMETRICS1",
                            "u_PRESETPATHPACKETTRANSLATION",
                            "u_PRESETTYPE",
                            "u_PRESETTYPE1",
                            "u_PREVIEW",
                            "u_PREVIEWNOTIFIER",
                            "u_PREVIEWSERVICE",
                            "u_PROFILE1DPREDEST",
                            "u_PROFILE2DPREDEST",
                            "u_PROJDIROVERRIDE",
                            "u_PROXYOPTIONS",
                            "u_QUATERNION",
                            "u_RAYCAST",
                            "u_RAYCAST1",
                            "u_RAYCASTPACKET",
                            "u_RAYCASTPACKET1",
                            "u_RAYMARCH",
                            "u_RENDERBUCKET",
                            "u_RENDERCACHE",
                            "u_RENDERCACHELISTENER",
                            "u_RENDERCACHESERVICE",
                            "u_RENDERJOB",
                            "u_RENDERPROGRESSLISTENER",
                            "u_RENDERSERVICE",
                            "u_RENDERSTATS",
                            "u_REPLICATORENUMERATOR",
                            "u_SAVER",
                            "u_SCENE",
                            "u_SCENE1",
                            "u_SCENE1SERVICE",
                            "u_SCENE2SERVICE",
                            "u_SCENECONTENTS",
                            "u_SCENEGRAPH",
                            "u_SCENEITEMLISTENER",
                            "u_SCENEITEMLISTENER1",
                            "u_SCENEITEMLISTENER2",
                            "u_SCENEITEMPREDEST",
                            "u_SCENELOADERTARGET",
                            "u_SCENEPACKETTRANSLATION",
                            "u_SCENESERVICE",
                            "u_SCHEMADEST",
                            "u_SCHEMATICCONNECTION",
                            "u_SCRIPT",
                            "u_SCRIPTLINEEVENT",
                            "u_SCRIPTMANAGER",
                            "u_SCRIPTQUERY",
                            "u_SCRIPTSYSSERVICE",
                            "u_SELECTIONLISTENER",
                            "u_SELECTIONPACKET1SERVICE",
                            "u_SELECTIONSERVICE",
                            "u_SELECTIONTYPE",
                            "u_SERVICEEXTENSION",
                            "u_SESSIONLISTENER",
                            "u_SHADER",
                            "u_SHADERPREDEST",
                            "u_SHADERSERVICE",
                            "u_SHADERSLICE",
                            "u_SHAPEDRAW",
                            "u_SHAREDWORK",
                            "u_SIDEEFFECT",
                            "u_SIMULATIONMODIFIER",
                            "u_SOLIDDRILL",
                            "u_STACKFILTER",
                            "u_STDDIALOGSERVICE",
                            "u_STREAMIO",
                            "u_STRINGCONVERSION",
                            "u_STRINGCONVERSIONNICE",
                            "u_STRINGTAG",
                            "u_STROKEDRAW",
                            "u_SUBDIVISION",
                            "u_SUBDPOLYTYPE",
                            "u_SURFACE",
                            "u_SURFACEBIN",
                            "u_SURFACEITEM",
                            "u_SYMMETRYPACKET",
                            "u_TABLEAU",
                            "u_TABLEAUELEMENT",
                            "u_TABLEAUFILTER",
                            "u_TABLEAUINSTANCE",
                            "u_TABLEAUINSTANCE1",
                            "u_TABLEAULIGHT",
                            "u_TABLEAULISTENER",
                            "u_TABLEAUPROXY",
                            "u_TABLEAUSERVICE",
                            "u_TABLEAUSHADER",
                            "u_TABLEAUSOURCE",
                            "u_TABLEAUSOURCE1",
                            "u_TABLEAUSURFACE",
                            "u_TABLEAUSURFACE1",
                            "u_TABLEAUVERTEX",
                            "u_TABLEAUVOLUME",
                            "u_TAGDESCRIPTION",
                            "u_TEXTENCODING",
                            "u_TEXTENCODINGSERVICE",
                            "u_TEXTSCRIPTINTERPRETER",
                            "u_TEXTURE",
                            "u_TEXTUREEFFECT",
                            "u_TEXTUREEVAL",
                            "u_TEXTUREGL",
                            "u_TEXTURELAYER",
                            "u_TEXTUREMASK",
                            "u_TEXTUREPACKET",
                            "u_TEXTUREVMAP",
                            "u_THREADGROUP",
                            "u_THREADJOB",
                            "u_THREADMUTEX",
                            "u_THREADRANGEWORKER",
                            "u_THREADSERVICE",
                            "u_THREADSLOT",
                            "u_THREADSLOTCLIENT",
                            "u_TILEIMAGE",
                            "u_TOOL",
                            "u_TOOLMODEL",
                            "u_TOOLMODEL1",
                            "u_TOOLMODEL2",
                            "u_TRANSFORMSCAN",
                            "u_TREE",
                            "u_TREELISTENER",
                            "u_TREEVIEW",
                            "u_TRIANGLEGROUP",
                            "u_TRIANGLEGROUP1",
                            "u_TRIANGLESOUP",
                            "u_TRIANGLESURFACE",
                            "u_UIHINTS",
                            "u_UIVALUEHINTS",
                            "u_UIVALUEHINTS1",
                            "u_UNDO",
                            "u_UNDOSERVICE",
                            "u_UNKNOWN",
                            "u_USERVALUE",
                            "u_USERVALUELISTENER",
                            "u_VALUE",
                            "u_VALUEARRAY",
                            "u_VALUEMATH",
                            "u_VALUEREFERENCE",
                            "u_VALUESERVICE",
                            "u_VALUETEXTURE",
                            "u_VALUETEXTURE1",
                            "u_VALUETEXTURECUSTOM",
                            "u_VECTORLIST",
                            "u_VECTORPACKET",
                            "u_VECTORPACKET1",
                            "u_VECTORSTACK",
                            "u_VECTORTYPE",
                            "u_VERTEXFEATURESERVICE",
                            "u_VERTEXPACKETTRANSLATION",
                            "u_VIDEOCLIPITEM",
                            "u_VIEW",
                            "u_VIEW3D",
                            "u_VIEW3DPORTSERVICE",
                            "u_VIEWITEM3D",
                            "u_VIEWITEM3D1",
                            "u_VIEWPORTDEST",
                            "u_VIRTUALDEVICE",
                            "u_VISITOR",
                            "u_VMAPPACKETTRANSLATION",
                            "u_VOXEL",
                            "u_WATERFALL",
                            "u_WEIGHTMAPDEFORMERITEM",
                            "u_WORKLIST",
                            "vDCELIST_BOTH",
                            "vDCELIST_DIRS",
                            "vDCELIST_FILES",
                            "v_PATHGEN_DIV_COARSE",
                            "v_PATHGEN_DIV_FINE",
                            "v_PATHGEN_DIV_MEDIUM"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Test the state of a toggle argument.",
                        "name": "test",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Raise a result code exception.",
                        "name": "throw",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "Toggle extra Event Log output for each lx function call.",
                        "name": "trace",
                        "parameters": [
                            "unavailable"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": null,
                "name": "lxu",
                "children": [
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "attributes",
                        "children": [
                            "DynamicAttributes",
                            "lx",
                            "lxifc"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "command",
                        "children": [
                            "BasicCommand",
                            "BasicHints",
                            "lx",
                            "lxifc",
                            "lxu"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "decodeID4",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "lxID4",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "object",
                        "children": [
                            "ActionClip",
                            "ActionListener",
                            "AddChannel",
                            "AddDropAction",
                            "AdjustTool",
                            "AnimListener",
                            "AppActiveListener",
                            "AsyncMonitorInfo",
                            "AsyncMonitorSystem",
                            "AttrSequence",
                            "Attributes",
                            "AttributesUI",
                            "Audio",
                            "AudioDevice",
                            "AudioHandle",
                            "AudioLoaderTarget",
                            "AudioWrite",
                            "AutoSaveListener",
                            "BagGenerator",
                            "BlockRead",
                            "BlockStore",
                            "BlockWrite",
                            "Buffer",
                            "CenterPacketTranslation",
                            "ChannelGraph",
                            "ChannelModifier",
                            "ChannelPacketTranslation",
                            "ChannelRead",
                            "ChannelUI",
                            "ChannelWrite",
                            "CmdSysListener",
                            "Color",
                            "ColorDialog",
                            "ColorMapping",
                            "ColorModel",
                            "ColorPreDest",
                            "Command",
                            "CommandDBHelp",
                            "CommandEvent",
                            "CompShader",
                            "Curve",
                            "CurveGroup",
                            "CustomMaterial",
                            "CustomPane",
                            "CustomView",
                            "DTBGroupSortOverride",
                            "Deformation",
                            "Deformer",
                            "DirCacheEntry",
                            "DirCacheFileMetrics",
                            "DirCacheGridPosDest",
                            "DirCacheManualOrderDest",
                            "DirEntryThumbAsync",
                            "Drop",
                            "DropPreviewDefault",
                            "Edge",
                            "EdgePacketTranslation",
                            "ElementAxisPacket",
                            "ElementCenterPacket",
                            "Envelope",
                            "EvalModifier",
                            "Evaluation",
                            "EvaluationStack",
                            "EventGuide",
                            "EventTranslatePacket",
                            "Factory",
                            "Falloff",
                            "FalloffPacket",
                            "FileReference",
                            "FileSysDest",
                            "Force",
                            "GradientFilter",
                            "GroupDeformer",
                            "GroupDest",
                            "GroupEnumerator",
                            "GroupItem",
                            "GroupMemberChanDest",
                            "GroupMemberItemDest",
                            "HandleDraw",
                            "Image",
                            "ImageFilter",
                            "ImageFilterMetrics",
                            "ImageLevelSample",
                            "ImageLoaderTarget",
                            "ImageMonitor",
                            "ImageProcessing",
                            "ImageProcessingListener",
                            "ImageProcessingRead",
                            "ImageSegment",
                            "ImageWrite",
                            "IndexImage",
                            "IndexImageWrite",
                            "IntRange",
                            "Item",
                            "ItemChannel",
                            "ItemCollection",
                            "ItemGraph",
                            "ItemInfluence",
                            "ItemPacketTranslation",
                            "Keyframe",
                            "LayerScan",
                            "LayeredImage",
                            "LayeredImageWrite",
                            "LightSample",
                            "Lighting",
                            "LineExecution",
                            "LineInterpreter",
                            "LinkPacketTranslation",
                            "ListenerPort",
                            "Loader",
                            "LoaderInfo",
                            "Locator",
                            "Log",
                            "LogEntry",
                            "LogInfoBlock",
                            "LogListener",
                            "Matrix",
                            "Mesh",
                            "MeshFilter",
                            "MeshFilterBBox",
                            "MeshInfluence",
                            "MeshLayerPreDest",
                            "MeshMap",
                            "Message",
                            "Modifier",
                            "Module",
                            "Monitor",
                            "NavigationListener",
                            "NeedContext",
                            "NodePacketTranslation",
                            "Notifier",
                            "Package",
                            "PackageInstance",
                            "PacketEffect",
                            "PaintBrushPacket",
                            "PaintInkPacket",
                            "PaintNozzlePacket",
                            "ParticleCoOperator",
                            "ParticleEvalFrame",
                            "ParticleFilter",
                            "ParticleGeneratorPacket",
                            "ParticleItem",
                            "PathGeneratorPacket",
                            "PathStep",
                            "PersistenceClient",
                            "PersistentEntry",
                            "PivotPacketTranslation",
                            "Point",
                            "PointCacheItem",
                            "Polygon",
                            "PolygonPacketTranslation",
                            "PolygonSlice",
                            "PresetLoaderTarget",
                            "PresetMetrics",
                            "PresetPathPacketTranslation",
                            "PresetType",
                            "Preview",
                            "PreviewNotifier",
                            "Profile1DPreDest",
                            "Profile2DPreDest",
                            "ProjDirOverride",
                            "ProxyOptions",
                            "Quaternion",
                            "Raycast",
                            "RaycastPacket",
                            "Raymarch",
                            "RenderJob",
                            "RenderProgressListener",
                            "RenderStats",
                            "ReplicatorEnumerator",
                            "Saver",
                            "Scene",
                            "SceneContents",
                            "SceneGraph",
                            "SceneItemListener",
                            "SceneItemPreDest",
                            "SceneLoaderTarget",
                            "ScenePacketTranslation",
                            "SchemaDest",
                            "SchematicConnection",
                            "Script",
                            "ScriptLineEvent",
                            "ScriptQuery",
                            "SelectionListener",
                            "SelectionType",
                            "SessionListener",
                            "Shader",
                            "ShaderPreDest",
                            "ShaderSlice",
                            "ShapeDraw",
                            "SimulationModifier",
                            "SolidDrill",
                            "StackFilter",
                            "StreamIO",
                            "StringConversion",
                            "StringConversionNice",
                            "StringTag",
                            "StrokeDraw",
                            "Surface",
                            "SurfaceBin",
                            "SurfaceItem",
                            "SymmetryPacket",
                            "Tableau",
                            "TableauElement",
                            "TableauInstance",
                            "TableauLight",
                            "TableauProxy",
                            "TableauShader",
                            "TableauSource",
                            "TableauSurface",
                            "TableauVertex",
                            "TableauVolume",
                            "TagDescription",
                            "TextEncoding",
                            "TextScriptInterpreter",
                            "Texture",
                            "TextureEffect",
                            "TexturePacket",
                            "TileImage",
                            "Tool",
                            "ToolModel",
                            "TransformScan",
                            "Tree",
                            "TreeListener",
                            "TreeView",
                            "TriangleGroup",
                            "TriangleSoup",
                            "TriangleSurface",
                            "UIHints",
                            "UIValueHints",
                            "Undo",
                            "UserValue",
                            "UserValueListener",
                            "VMapPacketTranslation",
                            "Value",
                            "ValueArray",
                            "ValueMath",
                            "ValueReference",
                            "ValueTexture",
                            "ValueTextureCustom",
                            "VectorList",
                            "VectorStack",
                            "VectorType",
                            "VertexPacketTranslation",
                            "VideoClipItem",
                            "View",
                            "View3D",
                            "ViewItem3D",
                            "VirtualDevice",
                            "Visitor",
                            "WeightMapDeformerItem",
                            "lx"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "select",
                        "children": [
                            "AnySelection",
                            "ChannelSelection",
                            "ItemSelection",
                            "PresetPathSelection",
                            "SceneSelection",
                            "lx"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "utils",
                        "children": [
                            "decodeID4",
                            "lx",
                            "lxID4",
                            "pack",
                            "unpack"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "vector",
                        "children": [
                            "add",
                            "cross",
                            "dot",
                            "length",
                            "math",
                            "normalize",
                            "scale",
                            "sub",
                            "vector"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": null,
                "name": "mathutils",
                "children": [
                    {
                        "type": "ABCMeta",
                        "docstring": null,
                        "name": "Iterable",
                        "children": [
                            "_abc_cache",
                            "_abc_negative_cache",
                            "_abc_negative_cache_version",
                            "_abc_registry"
                        ]
                    },
                    {
                        "type": "float",
                        "docstring": "float(x) -> floating point number\n\nConvert a string or number to a floating point number, if possible.",
                        "name": "MIN_PRECISION",
                        "children": [
                            "as_integer_ratio",
                            "conjugate",
                            "fromhex",
                            "hex",
                            "imag",
                            "is_integer",
                            "real"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Matrix3 class ",
                        "name": "Matrix3",
                        "children": [
                            "_MatrixToEuler",
                            "_getIdentity",
                            "asEuler",
                            "copy",
                            "invert",
                            "inverted",
                            "set",
                            "setIdentity",
                            "transpose",
                            "transposed"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Matrix class ",
                        "name": "Matrix4",
                        "children": [
                            "_MatrixToEuler",
                            "_getIdentity",
                            "_matrix_calcRotation",
                            "_matrix_vectorMultiply",
                            "asEuler",
                            "asRotateMatrix",
                            "copy",
                            "determinant",
                            "fromEuler",
                            "invert",
                            "inverted",
                            "position",
                            "scale",
                            "set",
                            "setIdentity",
                            "transpose",
                            "transposed"
                        ]
                    },
                    {
                        "type": "int",
                        "docstring": "int(x[, base]) -> integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string.  If base is zero, the proper base is guessed based on the\nstring content.  If the argument is outside the integer range a\nlong object will be returned instead.",
                        "name": "QW",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "int",
                        "docstring": "int(x[, base]) -> integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string.  If base is zero, the proper base is guessed based on the\nstring content.  If the argument is outside the integer range a\nlong object will be returned instead.",
                        "name": "QX",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "int",
                        "docstring": "int(x[, base]) -> integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string.  If base is zero, the proper base is guessed based on the\nstring content.  If the argument is outside the integer range a\nlong object will be returned instead.",
                        "name": "QY",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "int",
                        "docstring": "int(x[, base]) -> integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string.  If base is zero, the proper base is guessed based on the\nstring content.  If the argument is outside the integer range a\nlong object will be returned instead.",
                        "name": "QZ",
                        "children": [
                            "bit_length",
                            "conjugate",
                            "denominator",
                            "imag",
                            "numerator",
                            "real"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Minimal quaternion class",
                        "name": "Quaternion",
                        "children": [
                            "_Quaternion__dTolerance",
                            "_quaternion_identity",
                            "_quaternion_length",
                            "_quaternion_normalize",
                            "copy",
                            "fromMatrix3",
                            "fromMatrix4",
                            "getAxisAngle",
                            "length",
                            "normalize",
                            "setAxisAngle",
                            "toMatrix3",
                            "toMatrix4",
                            "w",
                            "x",
                            "y",
                            "z"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Vector3 class\n    ",
                        "name": "Vector3",
                        "children": [
                            "angle",
                            "copy",
                            "cross",
                            "distanceBetweenPoints",
                            "dot",
                            "equals",
                            "length",
                            "mulByMatrixAsPoint",
                            "normal",
                            "normalize",
                            "rotate",
                            "rotateByAxisAngle",
                            "rotateByQuat",
                            "setLength",
                            "x",
                            "y",
                            "z"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "This module is always available.  It provides access to the\nmathematical functions defined by the C standard.",
                        "name": "math",
                        "children": [
                            "acos",
                            "acosh",
                            "asin",
                            "asinh",
                            "atan",
                            "atan2",
                            "atanh",
                            "ceil",
                            "copysign",
                            "cos",
                            "cosh",
                            "degrees",
                            "e",
                            "erf",
                            "erfc",
                            "exp",
                            "expm1",
                            "fabs",
                            "factorial",
                            "floor",
                            "fmod",
                            "frexp",
                            "fsum",
                            "gamma",
                            "hypot",
                            "isinf",
                            "isnan",
                            "ldexp",
                            "lgamma",
                            "log",
                            "log10",
                            "log1p",
                            "modf",
                            "pi",
                            "pow",
                            "radians",
                            "sin",
                            "sinh",
                            "sqrt",
                            "tan",
                            "tanh",
                            "trunc"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nexitfunc -- if sys.exitfunc exists, this routine is called when Python exits\n  Assigning to sys.exitfunc is deprecated; use the atexit module instead.\n\nstdin -- standard input file object; used by raw_input() and input()\nstdout -- standard output file object; used by the print statement\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nexc_type -- type of exception currently being handled\nexc_value -- value of exception currently being handled\nexc_traceback -- traceback of exception currently being handled\n  The function exc_info() should be used instead of these three,\n  because it is thread-safe.\n\nStatic objects:\n\nfloat_info -- a dict with information about the float inplementation.\nlong_info -- a struct sequence with information about the long implementation.\nmaxint -- the largest supported integer (the smallest is -maxint-1)\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the largest supported character\nbuiltin_module_names -- tuple of module names built into this interpreter\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\nhexversion -- version information encoded as a single integer\ncopyright -- copyright notice pertaining to this interpreter\nplatform -- platform identifier\nexecutable -- absolute path of the executable binary of the Python interpreter\nprefix -- prefix used to find the Python library\nexec_prefix -- prefix used to find the machine-specific Python library\nfloat_repr_style -- string indicating the style of repr() output for floats\ndllhandle -- [Windows only] integer handle of the Python DLL\nwinver -- [Windows only] version number of the Python DLL\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in __builtin__._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexc_clear() -- clear the exception state for the current thread\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetcheckinterval() -- control how often the interpreter checks for events\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function\n",
                        "name": "sys",
                        "children": [
                            "_clear_type_cache",
                            "_current_frames",
                            "_getframe",
                            "_mercurial",
                            "api_version",
                            "builtin_module_names",
                            "byteorder",
                            "call_tracing",
                            "callstats",
                            "copyright",
                            "displayhook",
                            "dllhandle",
                            "dont_write_bytecode",
                            "exc_clear",
                            "exc_info",
                            "exc_type",
                            "excepthook",
                            "exec_prefix",
                            "executable",
                            "exit",
                            "exitfunc",
                            "flags",
                            "float_info",
                            "float_repr_style",
                            "getcheckinterval",
                            "getdefaultencoding",
                            "getfilesystemencoding",
                            "getprofile",
                            "getrecursionlimit",
                            "getrefcount",
                            "getsizeof",
                            "gettrace",
                            "getwindowsversion",
                            "hexversion",
                            "long_info",
                            "maxint",
                            "maxsize",
                            "maxunicode",
                            "meta_path",
                            "modules",
                            "path",
                            "path_hooks",
                            "path_importer_cache",
                            "platform",
                            "prefix",
                            "py3kwarning",
                            "setcheckinterval",
                            "setprofile",
                            "setrecursionlimit",
                            "settrace",
                            "stderr",
                            "stdin",
                            "stdout",
                            "subversion",
                            "version",
                            "version_info",
                            "warnoptions",
                            "winver"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "vector",
                        "children": [
                            "add",
                            "cross",
                            "dot",
                            "length",
                            "math",
                            "normalize",
                            "scale",
                            "sub",
                            "vector"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": "\n\n.. module:: modo.meshgeometry\n   :synopsis: Classes for mesh access and editing\n\n.. moduleauthor:: Ivo Grigull <ivo.grigull@thefoundry.co.uk>\n\n",
                "name": "meshgeometry",
                "children": [
                    {
                        "type": "type",
                        "docstring": "\n        Base class for vertex, edge- and polygon containers to share common behaviour\n    ",
                        "name": "MeshComponentContainer",
                        "children": [
                            "_getitem",
                            "internalMesh"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Class representing an edge\n    ",
                        "name": "MeshEdge",
                        "children": [
                            "_MeshEdge__apply_operator",
                            "_accessor",
                            "accessor",
                            "deselect",
                            "fromID",
                            "fromIDs",
                            "fromVertices",
                            "id",
                            "polygons",
                            "select",
                            "vertex_indices",
                            "vertices"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Extension class of the Edge accessor lx.object.Edge that adds iteration methods.\n\n        Note: Modo does not store edges by index, therefore they cannot be accessed by such.\n        You can use the built-in python iterator however.\n\n        :param mesh: Input mesh to obtain PointAccessor from\n        :param parent: MeshGeometry parent object\n    ",
                        "name": "MeshEdges",
                        "children": [
                            "_MeshEdges__pollEdgeIDs",
                            "_getitem",
                            "_performSelectionOperation",
                            "enumerate",
                            "fromVertices",
                            "internalMesh",
                            "select",
                            "selected"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": " A class wrapped around lx.object.Mesh that provides access to geometry of a given Mesh Item\n\n    :param item: Input item\n    :type item: type lx.object.Item\n    :param mode: Mode in which to access the mesh. Possible values: \"write\", \"read\", \"deformed\"\n    :type mode: string\n    :return: Instance of MeshGeometry\n\n    :raises LookupError: If item was passed as string and could not be found in the scene\n    :raises TypeError: If the passed item is not of type lx.object.Item\n    :raises TypeError: If the passed item is not compatible with the mesh type\n\n\n    example::\n\n        scene = modo.scene.current()\n\n        # Get the selected mesh\n        for mesh in scene.selectedByType(\"mesh\")[:1]:\n\n            # Print the number of vertices\n            print len(mesh.geometry.vertices)\n\n            # Print point position by index\n            print mesh.geometry.vertices[4]\n\n            # Set point position by index\n            mesh.geometry.vertices[4] = (1,2,3)\n\n            # Iterate all vertices and move them by 0.1 in x\n            for point in mesh.geometry.vertices:\n                point += (0.1, 0, 0)\n\n            # Update to see mesh changes\n            mesh.geometry.setMeshEdits()\n\n    .. py:attribute:: vertices\n\n        :rtype: :class:`MeshVertices<MeshVertices>`\n\n    .. py:attribute:: edges\n\n        :rtype: :class:`MeshEdges<MeshEdges>`\n\n    .. py:attribute:: polygons\n\n        :rtype: :class:`MeshPolygons<MeshPolygons>`\n\n    .. py:attribute:: vmaps\n\n        :rtype: :class:`MeshMaps<MeshMaps>`\n\n    ",
                        "name": "MeshGeometry",
                        "children": [
                            "_SEL_SVC",
                            "_UNDO_SVC",
                            "_item",
                            "accessMode",
                            "boundingBox",
                            "getMeshCenter",
                            "internalMesh",
                            "numEdges",
                            "numPolygons",
                            "numVertices",
                            "setAccessMode",
                            "setMeshEdits"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "This module provides access to the various map types that a mesh holds.\n\n        example::\n\n            # By index\n            myMap = geo.vmaps[0]\n\n            # From string\n            myMap = geo.vmaps['MyMap']\n\n            # From string with wildcard\n            myMap = geo.vmaps['MyMap*']\n\n            # Get the first morph map if any and change vertex 36\n            for morph in geo.vmaps.morphMaps[0:1]:\n                morph[36] = (0, 0, 0)\n\n            # Update changes on the mesh\n            geo.setMeshEdits()\n\n\n\n    ",
                        "name": "MeshMaps",
                        "children": [
                            "_MeshMaps__classFromSymbol",
                            "_MeshMaps__poll",
                            "_getitem",
                            "accessor",
                            "addMap",
                            "addMorphMap",
                            "addPickMap",
                            "addRGBAMap",
                            "addRGBMap",
                            "addSubdivMap",
                            "addUVMap",
                            "addVectorMap",
                            "addVertexNormalMap",
                            "addWeightMap",
                            "edgePickMap",
                            "getMapsByType",
                            "internalMesh",
                            "morphMaps",
                            "pickMaps",
                            "rgbMaps",
                            "rgbaMaps",
                            "tangentBasisMap",
                            "uvMaps",
                            "weightMaps"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Class wrapped around lx.object.Polygon for polygon access.\n    ",
                        "name": "MeshPolygon",
                        "children": [
                            "_MeshPolygon__apply_operator",
                            "_MeshPolygon__lookupUVMap",
                            "_accessor",
                            "_performSelectionOperation",
                            "accessor",
                            "area",
                            "deselect",
                            "edges",
                            "fromID",
                            "fromMesh",
                            "getTag",
                            "getUV",
                            "id",
                            "index",
                            "iterTriangles",
                            "iterVertexNormals",
                            "materialTag",
                            "neighbours",
                            "normal",
                            "numTriangles",
                            "numVertices",
                            "remove",
                            "select",
                            "setTag",
                            "setUV",
                            "tags",
                            "triangles",
                            "vertexNormal",
                            "vertices"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "\n        Extension class of the Polygon accessor that adds iteration methods.\n\n        The vertices of of individual vertices can be accessed through the built-in iterator function\n        or angular brackets\n\n        example::\n\n            mesh, = modo.scene.current().selectedByType(\"mesh\")\n\n            # Get the number of polygon\n            print \"Number of polygons: %i\" % len(mesh.geometry.polygons)\n\n            # Access the first polygon and print it's normal\n            polygon = mesh.geometry.polygons[0]\n            print polygon.normal\n\n            # Iterates all polygons through a generator object and print it's vertices\n            for polygon in mesh.geometry.polygons:\n                print polygon.vertices\n\n    ",
                        "name": "MeshPolygons",
                        "children": [
                            "_getitem",
                            "_performSelectionOperation",
                            "accessor",
                            "addFromPointIndices",
                            "enumerate",
                            "internalMesh",
                            "iterByIndices",
                            "iterByType",
                            "iterCurves",
                            "iterFaces",
                            "iterLines",
                            "iterPixarSubdivs",
                            "iterSplinePatches",
                            "iterSubdivs",
                            "iterTexts",
                            "new",
                            "select",
                            "selected"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Class representing a single vertex\n\n    example::\n\n        #Supports operators\n\n        v1 = mesh.geometry.vertices[1]\n        v2 = mesh.geometry.vertices[2]\n\n        v1 += v2\n        v1 = v1 - v2\n\n    ",
                        "name": "MeshVertex",
                        "children": [
                            "_MeshVertex__performSelectionOp",
                            "_accessor",
                            "accessor",
                            "deselect",
                            "fromId",
                            "getUVs",
                            "id",
                            "index",
                            "nextPointByVector",
                            "polygons",
                            "position",
                            "remove",
                            "select",
                            "setUVs",
                            "vertices",
                            "x",
                            "y",
                            "z"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Extension class of the point accessor that adds iteration methods.\n\n    The individual vertex objects can be accessed through the built-in iterator function\n    or angular brackets\n\n    example::\n\n        # Get the vertex count\n        print \"Number of vertices: %i\" % len(mesh.geometry.vertices)\n\n        # Access first vertex\n        print mesh.geometry.vertices[0]\n\n        # Iterates all vertices through a generator object\n        for vertex in mesh.geometry.vertices:\n            print vertex\n\n\n    :param mesh: Input mesh to obtain PointAccessor from\n    :param parent: MeshGeometry parent object\n    ",
                        "name": "MeshVertices",
                        "children": [
                            "_getitem",
                            "_vertexSelectionOperation",
                            "enumerate",
                            "internalMesh",
                            "iterByList",
                            "new",
                            "remove",
                            "select",
                            "selected"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "\n    example::\n\n        # Get first morph map if exists\n        for morph in geo.vmaps.morphMaps[:1]:\n\n            # Set position for vertex 10\n            morph[10] = (1,2,3)\n\n        # Update mesh\n        geo.setMeshEdits()\n\n    ",
                        "name": "MorphMap",
                        "children": [
                            "_accessor",
                            "accessor",
                            "clear",
                            "fromMesh",
                            "getAbsolutePosition",
                            "id",
                            "setAbsolutePosition"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "PickMap",
                        "children": [
                            "_accessor",
                            "accessor",
                            "clear",
                            "fromMesh",
                            "id"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "RGBAMap",
                        "children": [
                            "_accessor",
                            "accessor",
                            "clear",
                            "fromMesh",
                            "id"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "RGBMap",
                        "children": [
                            "_accessor",
                            "accessor",
                            "clear",
                            "fromMesh",
                            "id"
                        ]
                    },
                    {
                        "type": "Scene",
                        "docstring": null,
                        "name": "SCENE_SVC",
                        "children": [
                            "ChannelVectorSize",
                            "CreateScene",
                            "DestroyScene",
                            "GetMeshInstSourceItem",
                            "GetReplicatorEnumerator",
                            "ItemSubTypeByIndex",
                            "ItemSubTypeCount",
                            "ItemTypeByIndex",
                            "ItemTypeCommonChannels",
                            "ItemTypeCount",
                            "ItemTypeGetTag",
                            "ItemTypeLookup",
                            "ItemTypeName",
                            "ItemTypeSuper",
                            "ItemTypeTest",
                            "LoadImage",
                            "MeshInstanceByIndex",
                            "MeshInstanceCount",
                            "Root",
                            "ScriptQuery",
                            "SubSceneAdd",
                            "SubSceneLoad"
                        ]
                    },
                    {
                        "type": "Selection",
                        "docstring": null,
                        "name": "SEL_SVC",
                        "children": [
                            "AbortBatch",
                            "Allocate",
                            "ByIndex",
                            "Clear",
                            "Count",
                            "CurrentSubTypes",
                            "CurrentType",
                            "Deselect",
                            "Drop",
                            "EndBatch",
                            "GetTime",
                            "LookupName",
                            "LookupType",
                            "Recent",
                            "Remove",
                            "ScriptQuery",
                            "Select",
                            "SetTime",
                            "StartBatch",
                            "State",
                            "Test",
                            "Toggle"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Access for UV-Map values\n    ",
                        "name": "UVMap",
                        "children": [
                            "_UVMap__get",
                            "_accessor",
                            "_setValue",
                            "accessor",
                            "clear",
                            "continuousVertices",
                            "disContinuousVertices",
                            "fromMesh",
                            "id",
                            "iterContinuousVertices",
                            "iterDisContinuousVertices"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Vector3 class\n    ",
                        "name": "Vector3",
                        "children": [
                            "angle",
                            "copy",
                            "cross",
                            "distanceBetweenPoints",
                            "dot",
                            "equals",
                            "length",
                            "mulByMatrixAsPoint",
                            "normal",
                            "normalize",
                            "rotate",
                            "rotateByAxisAngle",
                            "rotateByQuat",
                            "setLength",
                            "x",
                            "y",
                            "z"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "A class representing a vertex map, accessible by point indices through angular brackets.\n\n    Base class for other maps.\n\n    ",
                        "name": "VertexMap",
                        "children": [
                            "_accessor",
                            "accessor",
                            "clear",
                            "fromMesh",
                            "id"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Vertex Normal Map class\n\n    * Available from Modo 901 SP1 and upwards *\n\n    Allows manipulation of a vertex normal map on either vertex or polygon basis.\n\n    Example::\n\n        import modo\n        reload(modo)\n\n        # Create a subdivided cube\n        lx.eval('script.implicit {Unit Cube Item}')\n        lx.eval('poly.subdivide ccsds')\n\n        mesh = modo.Mesh('Cube')\n\n        # Create a vertex normal map\n        normals = mesh.geometry.vmaps.addVertexNormalMap()\n\n        normalValue = (0, 0, -1)\n\n        # Set the normal value on every vertex per polygon\n        for polygon in mesh.geometry.polygons:\n            for vert in polygon.vertices:\n                normals.setNormal( normalValue, vert, polygon)\n\n        # Update the mesh\n        mesh.geometry.setMeshEdits(lx.symbol.f_MESHEDIT_MAP_OTHER)\n\n        # Select the vertex normal map to see the effect\n        lx.eval('select.vertexMap \"%s\" norm replace' % normals.name)\n\n    ",
                        "name": "VertexNormalMap",
                        "children": [
                            "_accessor",
                            "accessor",
                            "clear",
                            "fromMesh",
                            "getNormal",
                            "id",
                            "setNormal"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "Provides access to weight map values.\n\n    example::\n\n        scene = modo.scene.current()\n\n        # Get the first selected Mesh\n        mesh = scene.selectedByType(\"mesh\")[0]\n\n        # Get the weight maps object\n        vmaps = mesh.geometry.vmaps.weight_maps\n\n        if vmaps:\n\n            # Get the first weight map found\n            weightMap = vmaps[0]\n\n            # Set and get values\n            weightMap[0] = 0.333\n            print weightMap[0]\n\n            # Iterate and print all weight values\n            if weightMap:\n                for index, weight in enumerate(weightMap):\n                    print index, weight\n\n    ",
                        "name": "WeightMap",
                        "children": [
                            "_WeightMap__null",
                            "_accessor",
                            "accessor",
                            "clear",
                            "fromMesh",
                            "id"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "collections",
                        "children": [
                            "Callable",
                            "Container",
                            "Counter",
                            "Hashable",
                            "ItemsView",
                            "Iterable",
                            "Iterator",
                            "KeysView",
                            "Mapping",
                            "MappingView",
                            "MutableMapping",
                            "MutableSequence",
                            "MutableSet",
                            "OrderedDict",
                            "Sequence",
                            "Set",
                            "Sized",
                            "ValuesView",
                            "_abcoll",
                            "_chain",
                            "_get_ident",
                            "_heapq",
                            "_iskeyword",
                            "_itemgetter",
                            "_repeat",
                            "_starmap",
                            "_sys",
                            "defaultdict",
                            "deque",
                            "namedtuple"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Test whether FILENAME matches PATTERN.\n\n    Patterns are Unix shell style:\n\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\n    ",
                        "name": "fnmatch",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "builtin_function_or_method",
                        "docstring": "integer type = ItemTypeLookup(string name)",
                        "name": "item_type",
                        "parameters": [
                            "unavailable"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "lxu",
                        "children": [
                            "attributes",
                            "command",
                            "decodeID4",
                            "lxID4",
                            "object",
                            "select",
                            "utils",
                            "vector"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "\n    Use this descriptor as a decorator in the same way that you would use\n    'property', but only apply it to module-level functions, and watch as your\n    module gains properties!\n    ",
                        "name": "mproperty",
                        "children": [
                            "deleter",
                            "doc",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n\n.. module:: modo.util\n    :synopsis: A collection of support tools, decorators, functions etc used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "util",
                        "children": [
                            "c",
                            "collections",
                            "ensureModoItem",
                            "floatEquals",
                            "functools",
                            "item",
                            "lx",
                            "makeQuickCommand",
                            "paths",
                            "testGlobalInterpreter",
                            "typeToFunc"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "vec3",
                        "children": [
                            "add",
                            "cross",
                            "dot",
                            "length",
                            "math",
                            "normalize",
                            "scale",
                            "sub",
                            "vector"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Weak reference support for Python.\n\nThis module is an implementation of PEP 205:\n\nhttp://www.python.org/dev/peps/pep-0205/\n",
                        "name": "weakref",
                        "children": [
                            "CallableProxyType",
                            "KeyedRef",
                            "ProxyType",
                            "ProxyTypes",
                            "ReferenceError",
                            "ReferenceType",
                            "UserDict",
                            "WeakKeyDictionary",
                            "WeakSet",
                            "WeakValueDictionary",
                            "getweakrefcount",
                            "getweakrefs",
                            "proxy",
                            "ref"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": null,
                "name": "mprop",
                "children": [
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_cleanup",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "lock",
                        "docstring": "A lock object is a synchronization primitive.  To create a lock,\ncall the PyThread_allocate_lock() function.  Methods are:\n\nacquire() -- lock the lock, possibly blocking until it can be obtained\nrelease() -- unlock of the lock\nlocked() -- test whether the lock is currently locked\n\nA lock is not owned by the thread that locked it; another thread may\nunlock it.  A thread attempting to lock a lock that it has already locked\nwill block until another thread unlocks it.  Deadlocks may ensue.",
                        "name": "_cleanup_lock",
                        "children": [
                            "acquire",
                            "acquire_lock",
                            "locked",
                            "locked_lock",
                            "release",
                            "release_lock"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "_getattr",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "This module provides the components needed to build your own\n__import__ function.  Undocumented functions are obsolete.",
                        "name": "imp",
                        "children": [
                            "C_BUILTIN",
                            "C_EXTENSION",
                            "IMP_HOOK",
                            "NullImporter",
                            "PKG_DIRECTORY",
                            "PY_CODERESOURCE",
                            "PY_COMPILED",
                            "PY_FROZEN",
                            "PY_RESOURCE",
                            "PY_SOURCE",
                            "SEARCH_ERROR",
                            "acquire_lock",
                            "find_module",
                            "get_frozen_object",
                            "get_magic",
                            "get_suffixes",
                            "init_builtin",
                            "init_frozen",
                            "is_builtin",
                            "is_frozen",
                            "load_compiled",
                            "load_dynamic",
                            "load_module",
                            "load_package",
                            "load_source",
                            "lock_held",
                            "new_module",
                            "release_lock",
                            "reload"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "\n    Initialize the module-level properties/descriptors for the module that\n    this function is being called from. Or, if a globals dictionary is passed,\n    initialize the module-level properties/descriptors for the module that\n    those globals came from.\n\n    See the readme for more documentation.\n    ",
                        "name": "init",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "isdescriptor",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "\n    Use this descriptor as a decorator in the same way that you would use\n    'property', but only apply it to module-level functions, and watch as your\n    module gains properties!\n    ",
                        "name": "mproperty",
                        "children": [
                            "deleter",
                            "doc",
                            "fdel",
                            "fget",
                            "fset",
                            "getter",
                            "setter"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nexitfunc -- if sys.exitfunc exists, this routine is called when Python exits\n  Assigning to sys.exitfunc is deprecated; use the atexit module instead.\n\nstdin -- standard input file object; used by raw_input() and input()\nstdout -- standard output file object; used by the print statement\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nexc_type -- type of exception currently being handled\nexc_value -- value of exception currently being handled\nexc_traceback -- traceback of exception currently being handled\n  The function exc_info() should be used instead of these three,\n  because it is thread-safe.\n\nStatic objects:\n\nfloat_info -- a dict with information about the float inplementation.\nlong_info -- a struct sequence with information about the long implementation.\nmaxint -- the largest supported integer (the smallest is -maxint-1)\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the largest supported character\nbuiltin_module_names -- tuple of module names built into this interpreter\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\nhexversion -- version information encoded as a single integer\ncopyright -- copyright notice pertaining to this interpreter\nplatform -- platform identifier\nexecutable -- absolute path of the executable binary of the Python interpreter\nprefix -- prefix used to find the Python library\nexec_prefix -- prefix used to find the machine-specific Python library\nfloat_repr_style -- string indicating the style of repr() output for floats\ndllhandle -- [Windows only] integer handle of the Python DLL\nwinver -- [Windows only] version number of the Python DLL\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in __builtin__._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexc_clear() -- clear the exception state for the current thread\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetcheckinterval() -- control how often the interpreter checks for events\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function\n",
                        "name": "sys",
                        "children": [
                            "_clear_type_cache",
                            "_current_frames",
                            "_getframe",
                            "_mercurial",
                            "api_version",
                            "builtin_module_names",
                            "byteorder",
                            "call_tracing",
                            "callstats",
                            "copyright",
                            "displayhook",
                            "dllhandle",
                            "dont_write_bytecode",
                            "exc_clear",
                            "exc_info",
                            "exc_type",
                            "excepthook",
                            "exec_prefix",
                            "executable",
                            "exit",
                            "exitfunc",
                            "flags",
                            "float_info",
                            "float_repr_style",
                            "getcheckinterval",
                            "getdefaultencoding",
                            "getfilesystemencoding",
                            "getprofile",
                            "getrecursionlimit",
                            "getrefcount",
                            "getsizeof",
                            "gettrace",
                            "getwindowsversion",
                            "hexversion",
                            "long_info",
                            "maxint",
                            "maxsize",
                            "maxunicode",
                            "meta_path",
                            "modules",
                            "path",
                            "path_hooks",
                            "path_importer_cache",
                            "platform",
                            "prefix",
                            "py3kwarning",
                            "setcheckinterval",
                            "setprofile",
                            "setrecursionlimit",
                            "settrace",
                            "stderr",
                            "stdin",
                            "stdout",
                            "subversion",
                            "version",
                            "version_info",
                            "warnoptions",
                            "winver"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Thread module emulating a subset of Java's threading model.",
                        "name": "threading",
                        "children": [
                            "BoundedSemaphore",
                            "Condition",
                            "Event",
                            "Lock",
                            "RLock",
                            "Semaphore",
                            "Thread",
                            "ThreadError",
                            "Timer",
                            "_BoundedSemaphore",
                            "_Condition",
                            "_DummyThread",
                            "_Event",
                            "_MainThread",
                            "_RLock",
                            "_Semaphore",
                            "_Timer",
                            "_VERBOSE",
                            "_Verbose",
                            "_active",
                            "_active_limbo_lock",
                            "_after_fork",
                            "_allocate_lock",
                            "_counter",
                            "_enumerate",
                            "_format_exc",
                            "_get_ident",
                            "_limbo",
                            "_newname",
                            "_pickSomeNonDaemonThread",
                            "_profile_hook",
                            "_shutdown",
                            "_sleep",
                            "_start_new_thread",
                            "_sys",
                            "_test",
                            "_time",
                            "_trace_hook",
                            "activeCount",
                            "active_count",
                            "currentThread",
                            "current_thread",
                            "enumerate",
                            "local",
                            "setprofile",
                            "settrace",
                            "stack_size",
                            "warnings"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Define names for all type symbols known in the standard interpreter.\n\nTypes that are part of optional modules (e.g. array) are not listed.\n",
                        "name": "types",
                        "children": [
                            "BooleanType",
                            "BufferType",
                            "BuiltinFunctionType",
                            "BuiltinMethodType",
                            "ClassType",
                            "CodeType",
                            "ComplexType",
                            "DictProxyType",
                            "DictType",
                            "DictionaryType",
                            "EllipsisType",
                            "FileType",
                            "FloatType",
                            "FrameType",
                            "FunctionType",
                            "GeneratorType",
                            "GetSetDescriptorType",
                            "InstanceType",
                            "IntType",
                            "LambdaType",
                            "ListType",
                            "LongType",
                            "MemberDescriptorType",
                            "MethodType",
                            "ModuleType",
                            "NoneType",
                            "NotImplementedType",
                            "ObjectType",
                            "SliceType",
                            "StringType",
                            "StringTypes",
                            "TracebackType",
                            "TupleType",
                            "TypeType",
                            "UnboundMethodType",
                            "UnicodeType",
                            "XRangeType"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": "\n\n.. module:: modo.scene\n   :synopsis: Scene class and scene level utility functions.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n",
                "name": "scene",
                "children": [
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "ChannelRead",
                        "children": [
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": null,
                        "name": "ChannelWrite",
                        "children": [
                            "set"
                        ]
                    },
                    {
                        "type": "type",
                        "docstring": "The main scene class.\n\n    Takes an optional lx.object.Scene object as an argument. If none is provided (the default) then the currently\n    selected scene is used which will mostly be the general case. The module function :func:`sceneList` makes use of\n    the scene parameter to return a list of open scenes as modo.scene.Scene objects.\n\n    :param scene: Optional scene object to wrap.\n    :type scene: lx.object.Scene\n\n    ",
                        "name": "Scene",
                        "children": [
                            "_Scene__ItemAdd",
                            "_Scene__setupTextureLayerType",
                            "_allItems",
                            "actors",
                            "addActor",
                            "addCamera",
                            "addGroup",
                            "addItem",
                            "addJointLocator",
                            "addMaterial",
                            "addMesh",
                            "addRenderPassGroup",
                            "camera",
                            "cameraCount",
                            "cameras",
                            "currentRange",
                            "deformers",
                            "deselect",
                            "duplicateItem",
                            "filename",
                            "fps",
                            "groups",
                            "item",
                            "itemCount",
                            "items",
                            "iterItems",
                            "lightCount",
                            "locators",
                            "meshCount",
                            "meshes",
                            "name",
                            "removeItems",
                            "renderCamera",
                            "renderItem",
                            "renderPassGroups",
                            "sceneItem",
                            "sceneRange",
                            "select",
                            "selected",
                            "selectedByType"
                        ]
                    },
                    {
                        "type": "Module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "c",
                        "children": [
                            "ABCDEFORM_SAMPLE_TYPE",
                            "ACTIONCLIP_TYPE",
                            "ACTIONPOSE_TYPE",
                            "ADVANCEDMATERIAL_TYPE",
                            "ALEMBICCLOUD_TYPE",
                            "ALEMBICCURVES_TYPE",
                            "ALEMBICFILE_TYPE",
                            "ALEMBICMESH_TYPE",
                            "ANCHOR_TYPE",
                            "AREALIGHT_TYPE",
                            "AUDIOCLIP_TYPE",
                            "AUDIOFILE_TYPE",
                            "BACKDROP_TYPE",
                            "BASEVOLUME_TYPE",
                            "BEZIERNODE_TYPE",
                            "BLOB_TYPE",
                            "CAMERA_TYPE",
                            "CAPSULE_TYPE",
                            "CEFLOAT_TYPE",
                            "CELLULAR_TYPE",
                            "CEMATRIX_TYPE",
                            "CHANEFFECT_TYPE",
                            "CHANMODIFY_TYPE",
                            "CHECKER_TYPE",
                            "CMCHANNELRELATION_TYPE",
                            "CMCLAMP_TYPE",
                            "CMCOLORBLEND_TYPE",
                            "CMCOLORCORRECT_TYPE",
                            "CMCOLORGAMMA_TYPE",
                            "CMCOLORHSV_TYPE",
                            "CMCOLORINVERT_TYPE",
                            "CMCOLORKELVIN_TYPE",
                            "CMCONSTANT_TYPE",
                            "CMCURVEPROBE_TYPE",
                            "CMCYCLER_TYPE",
                            "CMDIRECTIONCONSTRAINT_TYPE",
                            "CMDISTANCECONSTRAINT_TYPE",
                            "CMDYNAMICPARENT_TYPE",
                            "CMFLOATOFFSET_TYPE",
                            "CMFLOATWARP_TYPE",
                            "CMGEOMETRYCONSTRAINT_TYPE",
                            "CMIKDUAL2D_TYPE",
                            "CMINTERSECT_TYPE",
                            "CMLINEARBLEND_TYPE",
                            "CMLOGIC_TYPE",
                            "CMMATHBASIC_TYPE",
                            "CMMATHMULTI_TYPE",
                            "CMMATHTRIG_TYPE",
                            "CMMATHVECTOR_TYPE",
                            "CMMATH_TYPE",
                            "CMMATRIXBLEND_TYPE",
                            "CMMATRIXCOMPOSE_TYPE",
                            "CMMATRIXCONSTRUCT_TYPE",
                            "CMMATRIXFROMEULER_TYPE",
                            "CMMATRIXINVERT_TYPE",
                            "CMMATRIXOFFSET_TYPE",
                            "CMMATRIXTOEULER_TYPE",
                            "CMMATRIXTRANSPOSE_TYPE",
                            "CMMATRIXVECTORMULTIPLY_TYPE",
                            "CMMATRIXVECTOR_TYPE",
                            "CMMATRIXWARP_TYPE",
                            "CMMEASUREANGLE_TYPE",
                            "CMMEASUREDISTANCE_TYPE",
                            "CMNOISE_TYPE",
                            "CMOSCILLATOR_TYPE",
                            "CMPATHCONSTRAINT_TYPE",
                            "CMPID_TYPE",
                            "CMQUATERNIONCONJUGATE_TYPE",
                            "CMQUATERNIONFROMAXISANGLE_TYPE",
                            "CMQUATERNIONFROMEULER_TYPE",
                            "CMQUATERNIONFROMMATRIX_TYPE",
                            "CMQUATERNIONGETVALUE_TYPE",
                            "CMQUATERNIONMATH_TYPE",
                            "CMQUATERNIONNORMALIZE_TYPE",
                            "CMQUATERNIONSETVALUE_TYPE",
                            "CMQUATERNIONSLERP_TYPE",
                            "CMQUATERNIONTOAXISANGLE_TYPE",
                            "CMQUATERNIONTOEULER_TYPE",
                            "CMQUATERNIONTOMATRIX_TYPE",
                            "CMQUATERNIONVECTORMULTIPLY_TYPE",
                            "CMRANDOM_TYPE",
                            "CMREVOLVE_TYPE",
                            "CMSHADEREFFECTS_TYPE",
                            "CMSHADERLIGHTING_TYPE",
                            "CMSHADERRAYCAST_TYPE",
                            "CMSHADERRAYTYPE_TYPE",
                            "CMSHADERSWITCH_TYPE",
                            "CMSIMPLEKINEMATICS_TYPE",
                            "CMSMOOTH_TYPE",
                            "CMSOUND_TYPE",
                            "CMSPEED_TYPE",
                            "CMSTRINGCOMPOSE_TYPE",
                            "CMSTRINGFINDANDREPLACE_TYPE",
                            "CMSTRINGSWITCH_TYPE",
                            "CMSWITCH_TYPE",
                            "CMTIME_TYPE",
                            "CMTRANSFORMCONSTRAINT_TYPE",
                            "CMVECTORBYSCALAR_TYPE",
                            "CMVECTORMAGNITUDE_TYPE",
                            "CMVECTORORTHOGONALIZE_TYPE",
                            "CMVECTORREFLECTION_TYPE",
                            "CMVECTOR_TYPE",
                            "CMVELOCITY_TYPE",
                            "CMWAVEFORM_TYPE",
                            "COLLECTOREMITTER_TYPE",
                            "CONSHINGE_TYPE",
                            "CONSPIN_TYPE",
                            "CONSPOINT_TYPE",
                            "CONSSLIDEHINGE_TYPE",
                            "CONSSPRING_TYPE",
                            "CONSTANT_TYPE",
                            "CONS_TYPE",
                            "CSVCACHE_TYPE",
                            "CURVEEMITTER_TYPE",
                            "CYLINDERLIGHT_TYPE",
                            "DEFAULTSHADER_TYPE",
                            "DEFERREDMESH_TYPE",
                            "DEFORMFOLDER_TYPE",
                            "DEFORMGROUP_TYPE",
                            "DEFORMMDD2_TYPE",
                            "DEFORMMDD_TYPE",
                            "DEFORM_BEND_TYPE",
                            "DEFORM_BEZIER_TYPE",
                            "DEFORM_CRVCONST_TYPE",
                            "DEFORM_LAG_TYPE",
                            "DEFORM_LATTICE_TYPE",
                            "DEFORM_MAGNET_TYPE",
                            "DEFORM_SLACK_TYPE",
                            "DEFORM_SPLINE_TYPE",
                            "DEFORM_TYPE",
                            "DEFORM_VORTEX_TYPE",
                            "DEFORM_WRAP_TYPE",
                            "DOMELIGHT_TYPE",
                            "DOTS_TYPE",
                            "DYNAMICCOLLIDER_TYPE",
                            "DYNAMICCOLLISIONEMITTER_TYPE",
                            "DYNAMICFLUID_TYPE",
                            "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                            "DYNAMIC_REPLICATORFILTER_TYPE",
                            "ENVIRONMENT_TYPE",
                            "ENVMATERIAL_TYPE",
                            "EXPRESSION_TYPE",
                            "FALLOFF_BEZIER_TYPE",
                            "FALLOFF_CAPSULE_TYPE",
                            "FALLOFF_LINEAR_TYPE",
                            "FALLOFF_RADIAL_TYPE",
                            "FALLOFF_SPLINE_TYPE",
                            "FALLOFF_TYPE",
                            "FLOCKINGOP_TYPE",
                            "FORCE_CURVE_TYPE",
                            "FORCE_DRAG_TYPE",
                            "FORCE_LINEAR_TYPE",
                            "FORCE_NEWTON_TYPE",
                            "FORCE_RADIAL_TYPE",
                            "FORCE_ROOT_TYPE",
                            "FORCE_TURBULENCE_TYPE",
                            "FORCE_VORTEX_TYPE",
                            "FORCE_WIND_TYPE",
                            "FURMATERIAL_TYPE",
                            "GASKETTOY_TYPE",
                            "GEAR_ITEM_TYPE",
                            "GENINFLUENCE_TYPE",
                            "GPLANE_TYPE",
                            "GRADIENT_TYPE",
                            "GRASS_ITEM_TYPE",
                            "GRID_TYPE",
                            "GROUPLOCATOR_TYPE",
                            "GROUP_TYPE",
                            "IKFULLBODY_TYPE",
                            "IKSOLVER_TYPE",
                            "IMAGEFOLDER_TYPE",
                            "IMAGEGROUP_TYPE",
                            "IMAGELAYER_TYPE",
                            "IMAGEMAP_TYPE",
                            "ITEMCHANNELPROBE_TYPE",
                            "ITEMINFLUENCE_TYPE",
                            "ITEMMODIFY_TYPE",
                            "ITEM_ROCK_TYPE",
                            "LIGHTMATERIAL_TYPE",
                            "LIGHT_TYPE",
                            "LOCATOR_TYPE",
                            "LOCDEFORM_TYPE",
                            "MAPMIX_TYPE",
                            "MASK_TYPE",
                            "MATCAPSHADER_TYPE",
                            "MATERIAL_CELEDGES_TYPE",
                            "MATERIAL_CELSHADER_TYPE",
                            "MATERIAL_HAIRMATERIAL_TYPE",
                            "MATERIAL_HALFTONE_TYPE",
                            "MATERIAL_IRIDESCENCE_TYPE",
                            "MATERIAL_SKINMATERIAL_TYPE",
                            "MATERIAL_THINFILM_TYPE",
                            "MEDIACLIP_TYPE",
                            "MESHINST_TYPE",
                            "MESH_TYPE",
                            "MORPHDEFORM_TYPE",
                            "MORPHMIX_TYPE",
                            "NOISE_TYPE",
                            "OCCLUSION_TYPE",
                            "PARTICLEOP_TYPE",
                            "PARTICLESIM_TYPE",
                            "PARTICLETERMINATOR_TYPE",
                            "PCLOUD_TYPE",
                            "PHOTOMETRYLIGHT_TYPE",
                            "PMOD_AUDIO_TYPE",
                            "PMOD_BASIC_TYPE",
                            "PMOD_EXPRESSION_TYPE",
                            "PMOD_GENERATOR_TYPE",
                            "PMOD_LOOKAT_TYPE",
                            "PMOD_RANDOM_TYPE",
                            "PMOD_SIEVE_TYPE",
                            "PMOD_STEP_TYPE",
                            "POINTLIGHT_TYPE",
                            "POLYRENDER_TYPE",
                            "PORTAL_TYPE",
                            "PROBEFALLOFF_TYPE",
                            "PROCESS_TYPE",
                            "PROJECTSHADER_TYPE",
                            "PROXY_TYPE",
                            "RADIALEMITTER_TYPE",
                            "REALPARTICLE_TYPE",
                            "RENDERBOOL_TYPE",
                            "RENDEROUTPUT_TYPE",
                            "RENDER_TYPE",
                            "REPLICATOR_TYPE",
                            "RIPPLES_TYPE",
                            "ROTATION_TYPE",
                            "RPC_MESH_TYPE",
                            "SCALE_TYPE",
                            "SCENE_SVC",
                            "SCENE_TYPE",
                            "SCHMNODE_TYPE",
                            "SEL_SVC",
                            "SHADERFOLDER_TYPE",
                            "SHADER_TYPE",
                            "SHEAR_TYPE",
                            "SOFTLAG_TYPE",
                            "SOLVER_TYPE",
                            "SOURCEEMITTER_TYPE",
                            "SPOTLIGHT_TYPE",
                            "SPRITE_TYPE",
                            "SUNLIGHT_TYPE",
                            "SURFACESCATTER_TYPE",
                            "SURFEMITTER_TYPE",
                            "SURFGENLOC_TYPE",
                            "SURFGEN_TYPE",
                            "TENSIONTEXTURE_TYPE",
                            "TEXTURELAYER_TYPE",
                            "TRANSFORM_TYPE",
                            "TRANSLATION_TYPE",
                            "TRISURF_TYPE",
                            "TXTRLOCATOR_TYPE",
                            "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                            "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                            "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                            "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                            "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                            "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                            "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                            "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                            "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                            "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                            "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_RING_RJJ_TYPE",
                            "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                            "VAL_NOISE_AGATE_RJJ_TYPE",
                            "VAL_NOISE_BOZO_RJJ_TYPE",
                            "VAL_NOISE_CRUDDY_RJJ_TYPE",
                            "VAL_NOISE_DENTED_RJJ_TYPE",
                            "VAL_NOISE_ETCHED_RJJ_TYPE",
                            "VAL_NOISE_FBM_RJJ_TYPE",
                            "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                            "VAL_NOISE_GABOR_TYPE",
                            "VAL_NOISE_GRANITE_RJJ_TYPE",
                            "VAL_NOISE_HYBRID_RJJ_TYPE",
                            "VAL_NOISE_LUMP_RJJ_TYPE",
                            "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                            "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                            "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                            "VAL_NOISE_PEBBLES_RJJ_TYPE",
                            "VAL_NOISE_POISSON_TYPE",
                            "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                            "VAL_NOISE_RIDGED_RJJ_TYPE",
                            "VAL_NOISE_SCAR_RJJ_TYPE",
                            "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                            "VAL_NOISE_STRATA_RJJ_TYPE",
                            "VAL_NOISE_STUCCO_RJJ_TYPE",
                            "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                            "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                            "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                            "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                            "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                            "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                            "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                            "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                            "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                            "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                            "VAL_ORGANIC_DIRT_RJJ_TYPE",
                            "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                            "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                            "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                            "VAL_ORGANIC_FIRE_RJJ_TYPE",
                            "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                            "VAL_ORGANIC_MINKY_RJJ_TYPE",
                            "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                            "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                            "VAL_ORGANIC_VEINS_RJJ_TYPE",
                            "VAL_ORGANIC_WIRES_RJJ_TYPE",
                            "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                            "VAL_PANELS_PEEL_RJJ_TYPE",
                            "VAL_PANELS_PLATES_RJJ_TYPE",
                            "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                            "VAL_PANELS_RIVETS_RJJ_TYPE",
                            "VAL_PANELS_RUST_RJJ_TYPE",
                            "VAL_PANELS_SMEAR_RJJ_TYPE",
                            "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                            "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                            "VAL_RPCTEXTURE_TYPE",
                            "VAL_RTCURVATURE_TYPE",
                            "VAL_SKINS_CAMO_RJJ_TYPE",
                            "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                            "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                            "VAL_SKINS_DISEASE_RJJ_TYPE",
                            "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                            "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                            "VAL_SKINS_LEATHER_RJJ_TYPE",
                            "VAL_SKINS_MONSTER_RJJ_TYPE",
                            "VAL_SKINS_PASTELLA_RJJ_TYPE",
                            "VAL_SKINS_PEENED_RJJ_TYPE",
                            "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                            "VAL_SPACE_BLAST_RJJ_TYPE",
                            "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                            "VAL_SPACE_FLARE_RJJ_TYPE",
                            "VAL_SPACE_GASGIANT_RJJ_TYPE",
                            "VAL_SPACE_GLINT_RJJ_TYPE",
                            "VAL_SPACE_HURRICANE_RJJ_TYPE",
                            "VAL_SPACE_NURNIES_RJJ_TYPE",
                            "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                            "VAL_SPACE_PLANET_RJJ_TYPE",
                            "VAL_SPACE_RINGS_RJJ_TYPE",
                            "VAL_SPACE_STARFIELD_RJJ_TYPE",
                            "VAL_SPACE_SWIRL_RJJ_TYPE",
                            "VAL_SPACE_TERRA_RJJ_TYPE",
                            "VAL_SPACE_WINDOWS_RJJ_TYPE",
                            "VAL_TILES_BASKET_RJJ_TYPE",
                            "VAL_TILES_BATHTILE_RJJ_TYPE",
                            "VAL_TILES_BRICKS_RJJ_TYPE",
                            "VAL_TILES_CHECKS_RJJ_TYPE",
                            "VAL_TILES_CORNERLESS_RJJ_TYPE",
                            "VAL_TILES_CUBES_RJJ_TYPE",
                            "VAL_TILES_DASHLINE_RJJ_TYPE",
                            "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                            "VAL_TILES_FISHSCALES_RJJ_TYPE",
                            "VAL_TILES_HEXTILE_RJJ_TYPE",
                            "VAL_TILES_LATTICE1_RJJ_TYPE",
                            "VAL_TILES_LATTICE2_RJJ_TYPE",
                            "VAL_TILES_LATTICE3_RJJ_TYPE",
                            "VAL_TILES_MOSAIC_RJJ_TYPE",
                            "VAL_TILES_OCTTILE_RJJ_TYPE",
                            "VAL_TILES_PARQUET_RJJ_TYPE",
                            "VAL_TILES_PAVING_RJJ_TYPE",
                            "VAL_TILES_PLAID_RJJ_TYPE",
                            "VAL_TILES_PLANKS_RJJ_TYPE",
                            "VAL_TILES_RIBS_RJJ_TYPE",
                            "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                            "VAL_TILES_SHINGLES_RJJ_TYPE",
                            "VAL_TILES_SPOTS_RJJ_TYPE",
                            "VAL_TILES_STAMPED_RJJ_TYPE",
                            "VAL_TILES_TACOS_RJJ_TYPE",
                            "VAL_TILES_TARTAN_RJJ_TYPE",
                            "VAL_TILES_TILER_RJJ_TYPE",
                            "VAL_TILES_TRICHECKS_RJJ_TYPE",
                            "VAL_TILES_TRIHEXES_RJJ_TYPE",
                            "VAL_TILES_TRITILE_RJJ_TYPE",
                            "VAL_TILES_WALL_RJJ_TYPE",
                            "VAL_WATER_DRIPDROP_RJJ_TYPE",
                            "VAL_WATER_RAIN_RJJ_TYPE",
                            "VAL_WATER_RIPPLES_RJJ_TYPE",
                            "VAL_WATER_SURF_RJJ_TYPE",
                            "VAL_WATER_WAVES_RJJ_TYPE",
                            "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                            "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                            "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                            "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                            "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                            "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                            "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                            "VAL_WIREFRAME_TYPE",
                            "VARIATIONTEXTURE_TYPE",
                            "VIDEOBLANK_TYPE",
                            "VIDEOCLIP_TYPE",
                            "VIDEOSEQUENCE_TYPE",
                            "VIDEOSTILL_TYPE",
                            "VMAPTEXTURE_TYPE",
                            "VOLUME_TYPE",
                            "VOXELITEM_TYPE",
                            "WEAVE_TYPE",
                            "WEIGHTCONTAINER_TYPE",
                            "WIDGET_TYPE",
                            "WOOD_TYPE",
                            "XFRMCORE_TYPE",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "current",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Test whether FILENAME matches PATTERN.\n\n    Patterns are Unix shell style:\n\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\n    ",
                        "name": "fnmatch",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n\n.. module:: modo.item\n   :synopsis: Item classes.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n",
                        "name": "item",
                        "children": [
                            "ActionClip",
                            "Actor",
                            "AreaLight",
                            "Camera",
                            "Channel",
                            "ChannelRead",
                            "ChannelTriple",
                            "ChannelWrite",
                            "CylinderLight",
                            "Deformer",
                            "DeformerGroup",
                            "DirectionalLight",
                            "DomeLight",
                            "Envelope",
                            "GeneralInfluenceDeformer",
                            "Group",
                            "GroupLocator",
                            "Item",
                            "ItemGraph",
                            "Iterable",
                            "Joint",
                            "Keyframes",
                            "Light",
                            "LightMaterial",
                            "Locator",
                            "LocatorSuperType",
                            "Matrix4",
                            "Mesh",
                            "MeshGeometry",
                            "PhotometricLight",
                            "PointLight",
                            "Portal",
                            "RenderPassGroup",
                            "SpotLight",
                            "TextureLocator",
                            "TransformItem",
                            "TransformItems",
                            "Vector3",
                            "c",
                            "fnmatch",
                            "lx",
                            "lxu",
                            "scene",
                            "util"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "lxu",
                        "children": [
                            "attributes",
                            "command",
                            "decodeID4",
                            "lxID4",
                            "object",
                            "select",
                            "utils",
                            "vector"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Get a list of all the currently open scenes.\n\n    :returns: Collection of currently open scenes as modo.scene.Scene objects.\n    :rtype: list\n\n    ",
                        "name": "sceneList",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n\n.. module:: modo.util\n    :synopsis: A collection of support tools, decorators, functions etc used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "util",
                        "children": [
                            "c",
                            "collections",
                            "ensureModoItem",
                            "floatEquals",
                            "functools",
                            "item",
                            "lx",
                            "makeQuickCommand",
                            "paths",
                            "testGlobalInterpreter",
                            "typeToFunc"
                        ]
                    }
                ]
            },
            {
                "type": "function",
                "docstring": "Get a list of all the currently open scenes.\n\n    :returns: Collection of currently open scenes as modo.scene.Scene objects.\n    :rtype: list\n\n    ",
                "name": "sceneList",
                "children": [
                    {
                        "type": "NoneType",
                        "docstring": null,
                        "name": "func_closure"
                    },
                    {
                        "type": "code",
                        "docstring": "code(argcount, nlocals, stacksize, flags, codestring, constants, names,\n      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])\n\nCreate a code object.  Not for the faint of heart.",
                        "name": "func_code",
                        "children": [
                            "co_argcount",
                            "co_cellvars",
                            "co_code",
                            "co_consts",
                            "co_filename",
                            "co_firstlineno",
                            "co_flags",
                            "co_freevars",
                            "co_lnotab",
                            "co_name",
                            "co_names",
                            "co_nlocals",
                            "co_stacksize",
                            "co_varnames"
                        ]
                    },
                    {
                        "type": "NoneType",
                        "docstring": null,
                        "name": "func_defaults"
                    },
                    {
                        "type": "dict",
                        "docstring": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
                        "name": "func_dict",
                        "children": [
                            "clear",
                            "copy",
                            "fromkeys",
                            "get",
                            "has_key",
                            "items",
                            "iteritems",
                            "iterkeys",
                            "itervalues",
                            "keys",
                            "pop",
                            "popitem",
                            "setdefault",
                            "update",
                            "values",
                            "viewitems",
                            "viewkeys",
                            "viewvalues"
                        ]
                    },
                    {
                        "type": "str",
                        "docstring": "str(object) -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.",
                        "name": "func_doc",
                        "children": [
                            "_formatter_field_name_split",
                            "_formatter_parser",
                            "capitalize",
                            "center",
                            "count",
                            "decode",
                            "encode",
                            "endswith",
                            "expandtabs",
                            "find",
                            "format",
                            "index",
                            "isalnum",
                            "isalpha",
                            "isdigit",
                            "islower",
                            "isspace",
                            "istitle",
                            "isupper",
                            "join",
                            "ljust",
                            "lower",
                            "lstrip",
                            "partition",
                            "replace",
                            "rfind",
                            "rindex",
                            "rjust",
                            "rpartition",
                            "rsplit",
                            "rstrip",
                            "split",
                            "splitlines",
                            "startswith",
                            "strip",
                            "swapcase",
                            "title",
                            "translate",
                            "upper",
                            "zfill"
                        ]
                    },
                    {
                        "type": "dict",
                        "docstring": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
                        "name": "func_globals",
                        "children": [
                            "clear",
                            "copy",
                            "fromkeys",
                            "get",
                            "has_key",
                            "items",
                            "iteritems",
                            "iterkeys",
                            "itervalues",
                            "keys",
                            "pop",
                            "popitem",
                            "setdefault",
                            "update",
                            "values",
                            "viewitems",
                            "viewkeys",
                            "viewvalues"
                        ]
                    },
                    {
                        "type": "str",
                        "docstring": "str(object) -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.",
                        "name": "func_name",
                        "children": [
                            "_formatter_field_name_split",
                            "_formatter_parser",
                            "capitalize",
                            "center",
                            "count",
                            "decode",
                            "encode",
                            "endswith",
                            "expandtabs",
                            "find",
                            "format",
                            "index",
                            "isalnum",
                            "isalpha",
                            "isdigit",
                            "islower",
                            "isspace",
                            "istitle",
                            "isupper",
                            "join",
                            "ljust",
                            "lower",
                            "lstrip",
                            "partition",
                            "replace",
                            "rfind",
                            "rindex",
                            "rjust",
                            "rpartition",
                            "rsplit",
                            "rstrip",
                            "split",
                            "splitlines",
                            "startswith",
                            "strip",
                            "swapcase",
                            "title",
                            "translate",
                            "upper",
                            "zfill"
                        ]
                    }
                ]
            },
            {
                "type": "module",
                "docstring": "\n\n.. module:: modo.util\n    :synopsis: A collection of support tools, decorators, functions etc used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                "name": "util",
                "children": [
                    {
                        "type": "Module",
                        "docstring": "\n.. module:: modo.constants\n    :synopsis: Constants & defines used by the other modules in the package.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n\n",
                        "name": "c",
                        "children": [
                            "ABCDEFORM_SAMPLE_TYPE",
                            "ACTIONCLIP_TYPE",
                            "ACTIONPOSE_TYPE",
                            "ADVANCEDMATERIAL_TYPE",
                            "ALEMBICCLOUD_TYPE",
                            "ALEMBICCURVES_TYPE",
                            "ALEMBICFILE_TYPE",
                            "ALEMBICMESH_TYPE",
                            "ANCHOR_TYPE",
                            "AREALIGHT_TYPE",
                            "AUDIOCLIP_TYPE",
                            "AUDIOFILE_TYPE",
                            "BACKDROP_TYPE",
                            "BASEVOLUME_TYPE",
                            "BEZIERNODE_TYPE",
                            "BLOB_TYPE",
                            "CAMERA_TYPE",
                            "CAPSULE_TYPE",
                            "CEFLOAT_TYPE",
                            "CELLULAR_TYPE",
                            "CEMATRIX_TYPE",
                            "CHANEFFECT_TYPE",
                            "CHANMODIFY_TYPE",
                            "CHECKER_TYPE",
                            "CMCHANNELRELATION_TYPE",
                            "CMCLAMP_TYPE",
                            "CMCOLORBLEND_TYPE",
                            "CMCOLORCORRECT_TYPE",
                            "CMCOLORGAMMA_TYPE",
                            "CMCOLORHSV_TYPE",
                            "CMCOLORINVERT_TYPE",
                            "CMCOLORKELVIN_TYPE",
                            "CMCONSTANT_TYPE",
                            "CMCURVEPROBE_TYPE",
                            "CMCYCLER_TYPE",
                            "CMDIRECTIONCONSTRAINT_TYPE",
                            "CMDISTANCECONSTRAINT_TYPE",
                            "CMDYNAMICPARENT_TYPE",
                            "CMFLOATOFFSET_TYPE",
                            "CMFLOATWARP_TYPE",
                            "CMGEOMETRYCONSTRAINT_TYPE",
                            "CMIKDUAL2D_TYPE",
                            "CMINTERSECT_TYPE",
                            "CMLINEARBLEND_TYPE",
                            "CMLOGIC_TYPE",
                            "CMMATHBASIC_TYPE",
                            "CMMATHMULTI_TYPE",
                            "CMMATHTRIG_TYPE",
                            "CMMATHVECTOR_TYPE",
                            "CMMATH_TYPE",
                            "CMMATRIXBLEND_TYPE",
                            "CMMATRIXCOMPOSE_TYPE",
                            "CMMATRIXCONSTRUCT_TYPE",
                            "CMMATRIXFROMEULER_TYPE",
                            "CMMATRIXINVERT_TYPE",
                            "CMMATRIXOFFSET_TYPE",
                            "CMMATRIXTOEULER_TYPE",
                            "CMMATRIXTRANSPOSE_TYPE",
                            "CMMATRIXVECTORMULTIPLY_TYPE",
                            "CMMATRIXVECTOR_TYPE",
                            "CMMATRIXWARP_TYPE",
                            "CMMEASUREANGLE_TYPE",
                            "CMMEASUREDISTANCE_TYPE",
                            "CMNOISE_TYPE",
                            "CMOSCILLATOR_TYPE",
                            "CMPATHCONSTRAINT_TYPE",
                            "CMPID_TYPE",
                            "CMQUATERNIONCONJUGATE_TYPE",
                            "CMQUATERNIONFROMAXISANGLE_TYPE",
                            "CMQUATERNIONFROMEULER_TYPE",
                            "CMQUATERNIONFROMMATRIX_TYPE",
                            "CMQUATERNIONGETVALUE_TYPE",
                            "CMQUATERNIONMATH_TYPE",
                            "CMQUATERNIONNORMALIZE_TYPE",
                            "CMQUATERNIONSETVALUE_TYPE",
                            "CMQUATERNIONSLERP_TYPE",
                            "CMQUATERNIONTOAXISANGLE_TYPE",
                            "CMQUATERNIONTOEULER_TYPE",
                            "CMQUATERNIONTOMATRIX_TYPE",
                            "CMQUATERNIONVECTORMULTIPLY_TYPE",
                            "CMRANDOM_TYPE",
                            "CMREVOLVE_TYPE",
                            "CMSHADEREFFECTS_TYPE",
                            "CMSHADERLIGHTING_TYPE",
                            "CMSHADERRAYCAST_TYPE",
                            "CMSHADERRAYTYPE_TYPE",
                            "CMSHADERSWITCH_TYPE",
                            "CMSIMPLEKINEMATICS_TYPE",
                            "CMSMOOTH_TYPE",
                            "CMSOUND_TYPE",
                            "CMSPEED_TYPE",
                            "CMSTRINGCOMPOSE_TYPE",
                            "CMSTRINGFINDANDREPLACE_TYPE",
                            "CMSTRINGSWITCH_TYPE",
                            "CMSWITCH_TYPE",
                            "CMTIME_TYPE",
                            "CMTRANSFORMCONSTRAINT_TYPE",
                            "CMVECTORBYSCALAR_TYPE",
                            "CMVECTORMAGNITUDE_TYPE",
                            "CMVECTORORTHOGONALIZE_TYPE",
                            "CMVECTORREFLECTION_TYPE",
                            "CMVECTOR_TYPE",
                            "CMVELOCITY_TYPE",
                            "CMWAVEFORM_TYPE",
                            "COLLECTOREMITTER_TYPE",
                            "CONSHINGE_TYPE",
                            "CONSPIN_TYPE",
                            "CONSPOINT_TYPE",
                            "CONSSLIDEHINGE_TYPE",
                            "CONSSPRING_TYPE",
                            "CONSTANT_TYPE",
                            "CONS_TYPE",
                            "CSVCACHE_TYPE",
                            "CURVEEMITTER_TYPE",
                            "CYLINDERLIGHT_TYPE",
                            "DEFAULTSHADER_TYPE",
                            "DEFERREDMESH_TYPE",
                            "DEFORMFOLDER_TYPE",
                            "DEFORMGROUP_TYPE",
                            "DEFORMMDD2_TYPE",
                            "DEFORMMDD_TYPE",
                            "DEFORM_BEND_TYPE",
                            "DEFORM_BEZIER_TYPE",
                            "DEFORM_CRVCONST_TYPE",
                            "DEFORM_LAG_TYPE",
                            "DEFORM_LATTICE_TYPE",
                            "DEFORM_MAGNET_TYPE",
                            "DEFORM_SLACK_TYPE",
                            "DEFORM_SPLINE_TYPE",
                            "DEFORM_TYPE",
                            "DEFORM_VORTEX_TYPE",
                            "DEFORM_WRAP_TYPE",
                            "DOMELIGHT_TYPE",
                            "DOTS_TYPE",
                            "DYNAMICCOLLIDER_TYPE",
                            "DYNAMICCOLLISIONEMITTER_TYPE",
                            "DYNAMICFLUID_TYPE",
                            "DYNAMICSCONSTRAINTMODIFIER_TYPE",
                            "DYNAMIC_REPLICATORFILTER_TYPE",
                            "ENVIRONMENT_TYPE",
                            "ENVMATERIAL_TYPE",
                            "EXPRESSION_TYPE",
                            "FALLOFF_BEZIER_TYPE",
                            "FALLOFF_CAPSULE_TYPE",
                            "FALLOFF_LINEAR_TYPE",
                            "FALLOFF_RADIAL_TYPE",
                            "FALLOFF_SPLINE_TYPE",
                            "FALLOFF_TYPE",
                            "FLOCKINGOP_TYPE",
                            "FORCE_CURVE_TYPE",
                            "FORCE_DRAG_TYPE",
                            "FORCE_LINEAR_TYPE",
                            "FORCE_NEWTON_TYPE",
                            "FORCE_RADIAL_TYPE",
                            "FORCE_ROOT_TYPE",
                            "FORCE_TURBULENCE_TYPE",
                            "FORCE_VORTEX_TYPE",
                            "FORCE_WIND_TYPE",
                            "FURMATERIAL_TYPE",
                            "GASKETTOY_TYPE",
                            "GEAR_ITEM_TYPE",
                            "GENINFLUENCE_TYPE",
                            "GPLANE_TYPE",
                            "GRADIENT_TYPE",
                            "GRASS_ITEM_TYPE",
                            "GRID_TYPE",
                            "GROUPLOCATOR_TYPE",
                            "GROUP_TYPE",
                            "IKFULLBODY_TYPE",
                            "IKSOLVER_TYPE",
                            "IMAGEFOLDER_TYPE",
                            "IMAGEGROUP_TYPE",
                            "IMAGELAYER_TYPE",
                            "IMAGEMAP_TYPE",
                            "ITEMCHANNELPROBE_TYPE",
                            "ITEMINFLUENCE_TYPE",
                            "ITEMMODIFY_TYPE",
                            "ITEM_ROCK_TYPE",
                            "LIGHTMATERIAL_TYPE",
                            "LIGHT_TYPE",
                            "LOCATOR_TYPE",
                            "LOCDEFORM_TYPE",
                            "MAPMIX_TYPE",
                            "MASK_TYPE",
                            "MATCAPSHADER_TYPE",
                            "MATERIAL_CELEDGES_TYPE",
                            "MATERIAL_CELSHADER_TYPE",
                            "MATERIAL_HAIRMATERIAL_TYPE",
                            "MATERIAL_HALFTONE_TYPE",
                            "MATERIAL_IRIDESCENCE_TYPE",
                            "MATERIAL_SKINMATERIAL_TYPE",
                            "MATERIAL_THINFILM_TYPE",
                            "MEDIACLIP_TYPE",
                            "MESHINST_TYPE",
                            "MESH_TYPE",
                            "MORPHDEFORM_TYPE",
                            "MORPHMIX_TYPE",
                            "NOISE_TYPE",
                            "OCCLUSION_TYPE",
                            "PARTICLEOP_TYPE",
                            "PARTICLESIM_TYPE",
                            "PARTICLETERMINATOR_TYPE",
                            "PCLOUD_TYPE",
                            "PHOTOMETRYLIGHT_TYPE",
                            "PMOD_AUDIO_TYPE",
                            "PMOD_BASIC_TYPE",
                            "PMOD_EXPRESSION_TYPE",
                            "PMOD_GENERATOR_TYPE",
                            "PMOD_LOOKAT_TYPE",
                            "PMOD_RANDOM_TYPE",
                            "PMOD_SIEVE_TYPE",
                            "PMOD_STEP_TYPE",
                            "POINTLIGHT_TYPE",
                            "POLYRENDER_TYPE",
                            "PORTAL_TYPE",
                            "PROBEFALLOFF_TYPE",
                            "PROCESS_TYPE",
                            "PROJECTSHADER_TYPE",
                            "PROXY_TYPE",
                            "RADIALEMITTER_TYPE",
                            "REALPARTICLE_TYPE",
                            "RENDERBOOL_TYPE",
                            "RENDEROUTPUT_TYPE",
                            "RENDER_TYPE",
                            "REPLICATOR_TYPE",
                            "RIPPLES_TYPE",
                            "ROTATION_TYPE",
                            "RPC_MESH_TYPE",
                            "SCALE_TYPE",
                            "SCENE_SVC",
                            "SCENE_TYPE",
                            "SCHMNODE_TYPE",
                            "SEL_SVC",
                            "SHADERFOLDER_TYPE",
                            "SHADER_TYPE",
                            "SHEAR_TYPE",
                            "SOFTLAG_TYPE",
                            "SOLVER_TYPE",
                            "SOURCEEMITTER_TYPE",
                            "SPOTLIGHT_TYPE",
                            "SPRITE_TYPE",
                            "SUNLIGHT_TYPE",
                            "SURFACESCATTER_TYPE",
                            "SURFEMITTER_TYPE",
                            "SURFGENLOC_TYPE",
                            "SURFGEN_TYPE",
                            "TENSIONTEXTURE_TYPE",
                            "TEXTURELAYER_TYPE",
                            "TRANSFORM_TYPE",
                            "TRANSLATION_TYPE",
                            "TRISURF_TYPE",
                            "TXTRLOCATOR_TYPE",
                            "VAL_DISPLAY_COUNTER1_RJJ_TYPE",
                            "VAL_DISPLAY_COUNTER2_RJJ_TYPE",
                            "VAL_DISPLAY_UVLEDS_RJJ_TYPE",
                            "VAL_GEOMETRIC_BOX_RJJ_TYPE",
                            "VAL_GEOMETRIC_CIRCULAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_CORNERS_RJJ_TYPE",
                            "VAL_GEOMETRIC_CUBIC_RJJ_TYPE",
                            "VAL_GEOMETRIC_DIMPLES_RJJ_TYPE",
                            "VAL_GEOMETRIC_GRID_RJJ_TYPE",
                            "VAL_GEOMETRIC_IRIS_RJJ_TYPE",
                            "VAL_GEOMETRIC_LINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_POLYGON_RJJ_TYPE",
                            "VAL_GEOMETRIC_RADIAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_RING_RJJ_TYPE",
                            "VAL_GEOMETRIC_RNDLINEAR_RJJ_TYPE",
                            "VAL_GEOMETRIC_SPIRAL_RJJ_TYPE",
                            "VAL_GEOMETRIC_STAR_RJJ_TYPE",
                            "VAL_NOISE_AGATE_RJJ_TYPE",
                            "VAL_NOISE_BOZO_RJJ_TYPE",
                            "VAL_NOISE_CRUDDY_RJJ_TYPE",
                            "VAL_NOISE_DENTED_RJJ_TYPE",
                            "VAL_NOISE_ETCHED_RJJ_TYPE",
                            "VAL_NOISE_FBM_RJJ_TYPE",
                            "VAL_NOISE_FLOWBOZO_RJJ_TYPE",
                            "VAL_NOISE_GABOR_TYPE",
                            "VAL_NOISE_GRANITE_RJJ_TYPE",
                            "VAL_NOISE_HYBRID_RJJ_TYPE",
                            "VAL_NOISE_LUMP_RJJ_TYPE",
                            "VAL_NOISE_MARBLENOISE_RJJ_TYPE",
                            "VAL_NOISE_MARBLEVEIN_RJJ_TYPE",
                            "VAL_NOISE_MULTIFRACTAL_RJJ_TYPE",
                            "VAL_NOISE_PEBBLES_RJJ_TYPE",
                            "VAL_NOISE_POISSON_TYPE",
                            "VAL_NOISE_PUFFYCLOUDS_RJJ_TYPE",
                            "VAL_NOISE_RIDGED_RJJ_TYPE",
                            "VAL_NOISE_SCAR_RJJ_TYPE",
                            "VAL_NOISE_SCRUFFED_RJJ_TYPE",
                            "VAL_NOISE_STRATA_RJJ_TYPE",
                            "VAL_NOISE_STUCCO_RJJ_TYPE",
                            "VAL_NOISE_VECTORBOZO_RJJ_TYPE",
                            "VAL_NOISE_WRAPPEDFBM_RJJ_TYPE",
                            "VAL_ORGANIC_ARTDECO_RJJ_TYPE",
                            "VAL_ORGANIC_BLISTER_RJJ_TYPE",
                            "VAL_ORGANIC_BRANCHES_RJJ_TYPE",
                            "VAL_ORGANIC_CAUSTIC_RJJ_TYPE",
                            "VAL_ORGANIC_CELLULAR_RJJ_TYPE",
                            "VAL_ORGANIC_CHEESY_RJJ_TYPE",
                            "VAL_ORGANIC_CONCRETE_RJJ_TYPE",
                            "VAL_ORGANIC_CRACKLE_RJJ_TYPE",
                            "VAL_ORGANIC_DIRT_RJJ_TYPE",
                            "VAL_ORGANIC_DISTURBED_RJJ_TYPE",
                            "VAL_ORGANIC_EASYWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_ELECTRIC_RJJ_TYPE",
                            "VAL_ORGANIC_FIREWALL_RJJ_TYPE",
                            "VAL_ORGANIC_FIRE_RJJ_TYPE",
                            "VAL_ORGANIC_HARDWOOD_RJJ_TYPE",
                            "VAL_ORGANIC_MEMBRANE_RJJ_TYPE",
                            "VAL_ORGANIC_MINKY_RJJ_TYPE",
                            "VAL_ORGANIC_SCATTER_RJJ_TYPE",
                            "VAL_ORGANIC_SINBLOB_RJJ_TYPE",
                            "VAL_ORGANIC_VEINS_RJJ_TYPE",
                            "VAL_ORGANIC_WIRES_RJJ_TYPE",
                            "VAL_ORGANIC_WORMVEIN_RJJ_TYPE",
                            "VAL_PANELS_PEEL_RJJ_TYPE",
                            "VAL_PANELS_PLATES_RJJ_TYPE",
                            "VAL_PANELS_RIVETRUST_RJJ_TYPE",
                            "VAL_PANELS_RIVETS_RJJ_TYPE",
                            "VAL_PANELS_RUST_RJJ_TYPE",
                            "VAL_PANELS_SMEAR_RJJ_TYPE",
                            "VAL_PROCESS_EASYGRAD_RJJ_TYPE",
                            "VAL_PROCESS_REGIONALHSV_RJJ_TYPE",
                            "VAL_RPCTEXTURE_TYPE",
                            "VAL_RTCURVATURE_TYPE",
                            "VAL_SKINS_CAMO_RJJ_TYPE",
                            "VAL_SKINS_CRUMPLED_RJJ_TYPE",
                            "VAL_SKINS_DINOSKIN_RJJ_TYPE",
                            "VAL_SKINS_DISEASE_RJJ_TYPE",
                            "VAL_SKINS_FROGSKIN_RJJ_TYPE",
                            "VAL_SKINS_GRAINYWOOD_RJJ_TYPE",
                            "VAL_SKINS_LEATHER_RJJ_TYPE",
                            "VAL_SKINS_MONSTER_RJJ_TYPE",
                            "VAL_SKINS_PASTELLA_RJJ_TYPE",
                            "VAL_SKINS_PEENED_RJJ_TYPE",
                            "VAL_SKINS_SCRATCHES_RJJ_TYPE",
                            "VAL_SPACE_BLAST_RJJ_TYPE",
                            "VAL_SPACE_CORIOLIS_RJJ_TYPE",
                            "VAL_SPACE_FLARE_RJJ_TYPE",
                            "VAL_SPACE_GASGIANT_RJJ_TYPE",
                            "VAL_SPACE_GLINT_RJJ_TYPE",
                            "VAL_SPACE_HURRICANE_RJJ_TYPE",
                            "VAL_SPACE_NURNIES_RJJ_TYPE",
                            "VAL_SPACE_PLANETCLOUDS_RJJ_TYPE",
                            "VAL_SPACE_PLANET_RJJ_TYPE",
                            "VAL_SPACE_RINGS_RJJ_TYPE",
                            "VAL_SPACE_STARFIELD_RJJ_TYPE",
                            "VAL_SPACE_SWIRL_RJJ_TYPE",
                            "VAL_SPACE_TERRA_RJJ_TYPE",
                            "VAL_SPACE_WINDOWS_RJJ_TYPE",
                            "VAL_TILES_BASKET_RJJ_TYPE",
                            "VAL_TILES_BATHTILE_RJJ_TYPE",
                            "VAL_TILES_BRICKS_RJJ_TYPE",
                            "VAL_TILES_CHECKS_RJJ_TYPE",
                            "VAL_TILES_CORNERLESS_RJJ_TYPE",
                            "VAL_TILES_CUBES_RJJ_TYPE",
                            "VAL_TILES_DASHLINE_RJJ_TYPE",
                            "VAL_TILES_DIAMONDDECK_RJJ_TYPE",
                            "VAL_TILES_FISHSCALES_RJJ_TYPE",
                            "VAL_TILES_HEXTILE_RJJ_TYPE",
                            "VAL_TILES_LATTICE1_RJJ_TYPE",
                            "VAL_TILES_LATTICE2_RJJ_TYPE",
                            "VAL_TILES_LATTICE3_RJJ_TYPE",
                            "VAL_TILES_MOSAIC_RJJ_TYPE",
                            "VAL_TILES_OCTTILE_RJJ_TYPE",
                            "VAL_TILES_PARQUET_RJJ_TYPE",
                            "VAL_TILES_PAVING_RJJ_TYPE",
                            "VAL_TILES_PLAID_RJJ_TYPE",
                            "VAL_TILES_PLANKS_RJJ_TYPE",
                            "VAL_TILES_RIBS_RJJ_TYPE",
                            "VAL_TILES_ROUNDEDTILE_RJJ_TYPE",
                            "VAL_TILES_SHINGLES_RJJ_TYPE",
                            "VAL_TILES_SPOTS_RJJ_TYPE",
                            "VAL_TILES_STAMPED_RJJ_TYPE",
                            "VAL_TILES_TACOS_RJJ_TYPE",
                            "VAL_TILES_TARTAN_RJJ_TYPE",
                            "VAL_TILES_TILER_RJJ_TYPE",
                            "VAL_TILES_TRICHECKS_RJJ_TYPE",
                            "VAL_TILES_TRIHEXES_RJJ_TYPE",
                            "VAL_TILES_TRITILE_RJJ_TYPE",
                            "VAL_TILES_WALL_RJJ_TYPE",
                            "VAL_WATER_DRIPDROP_RJJ_TYPE",
                            "VAL_WATER_RAIN_RJJ_TYPE",
                            "VAL_WATER_RIPPLES_RJJ_TYPE",
                            "VAL_WATER_SURF_RJJ_TYPE",
                            "VAL_WATER_WAVES_RJJ_TYPE",
                            "VAL_WATER_WINDYWAVES_RJJ_TYPE",
                            "VAL_WAVEFORMS_BIASGAIN_RJJ_TYPE",
                            "VAL_WAVEFORMS_FRESNEL_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAMMA_RJJ_TYPE",
                            "VAL_WAVEFORMS_GAUSSIAN_RJJ_TYPE",
                            "VAL_WAVEFORMS_IMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_NOISE_RJJ_TYPE",
                            "VAL_WAVEFORMS_RAMP_RJJ_TYPE",
                            "VAL_WAVEFORMS_ROUNDED_RJJ_TYPE",
                            "VAL_WAVEFORMS_SAWTOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCALLOP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SCURVE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SINE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHIMPULSE_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTHSTEP_RJJ_TYPE",
                            "VAL_WAVEFORMS_SMOOTH_RJJ_TYPE",
                            "VAL_WAVEFORMS_STAIRCASE_RJJ_TYPE",
                            "VAL_WIREFRAME_TYPE",
                            "VARIATIONTEXTURE_TYPE",
                            "VIDEOBLANK_TYPE",
                            "VIDEOCLIP_TYPE",
                            "VIDEOSEQUENCE_TYPE",
                            "VIDEOSTILL_TYPE",
                            "VMAPTEXTURE_TYPE",
                            "VOLUME_TYPE",
                            "VOXELITEM_TYPE",
                            "WEAVE_TYPE",
                            "WEIGHTCONTAINER_TYPE",
                            "WIDGET_TYPE",
                            "WOOD_TYPE",
                            "XFRMCORE_TYPE",
                            "_module",
                            "_pmodule",
                            "item_type",
                            "lx",
                            "mproperty"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": null,
                        "name": "collections",
                        "children": [
                            "Callable",
                            "Container",
                            "Counter",
                            "Hashable",
                            "ItemsView",
                            "Iterable",
                            "Iterator",
                            "KeysView",
                            "Mapping",
                            "MappingView",
                            "MutableMapping",
                            "MutableSequence",
                            "MutableSet",
                            "OrderedDict",
                            "Sequence",
                            "Set",
                            "Sized",
                            "ValuesView",
                            "_abcoll",
                            "_chain",
                            "_get_ident",
                            "_heapq",
                            "_iskeyword",
                            "_itemgetter",
                            "_repeat",
                            "_starmap",
                            "_sys",
                            "defaultdict",
                            "deque",
                            "namedtuple"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Decorator - ensures that the argument passed as the first parameter\n    to a function is an instance of the modo :class:`Item` class. Should only\n    only be used to decorate methods where the first argument is meant to be\n    an item and ensures that if for any reason an item of either type lx.object.Item\n    or lxu.object.Item gets passed to the method it will get wrapped as an\n    modo.item.Item object before being used.\n\n    ",
                        "name": "ensureModoItem",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Test if two floats are equal\n\n    :returns bool:\n    ",
                        "name": "floatEquals",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "functools.py - Tools for working with functions and callable objects\n",
                        "name": "functools",
                        "children": [
                            "WRAPPER_ASSIGNMENTS",
                            "WRAPPER_UPDATES",
                            "cmp_to_key",
                            "partial",
                            "reduce",
                            "total_ordering",
                            "update_wrapper",
                            "wraps"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "\n\n.. module:: modo.item\n   :synopsis: Item classes.\n\n.. moduleauthor:: Gwynne Reddick <gwynne.reddick@thefoundry.co.uk>\n\n",
                        "name": "item",
                        "children": [
                            "ActionClip",
                            "Actor",
                            "AreaLight",
                            "Camera",
                            "Channel",
                            "ChannelRead",
                            "ChannelTriple",
                            "ChannelWrite",
                            "CylinderLight",
                            "Deformer",
                            "DeformerGroup",
                            "DirectionalLight",
                            "DomeLight",
                            "Envelope",
                            "GeneralInfluenceDeformer",
                            "Group",
                            "GroupLocator",
                            "Item",
                            "ItemGraph",
                            "Iterable",
                            "Joint",
                            "Keyframes",
                            "Light",
                            "LightMaterial",
                            "Locator",
                            "LocatorSuperType",
                            "Matrix4",
                            "Mesh",
                            "MeshGeometry",
                            "PhotometricLight",
                            "PointLight",
                            "Portal",
                            "RenderPassGroup",
                            "SpotLight",
                            "TextureLocator",
                            "TransformItem",
                            "TransformItems",
                            "Vector3",
                            "c",
                            "fnmatch",
                            "lx",
                            "lxu",
                            "scene",
                            "util"
                        ]
                    },
                    {
                        "type": "module",
                        "docstring": "Module for modo extensions.",
                        "name": "lx",
                        "children": [
                            "Monitor",
                            "Service",
                            "arg",
                            "args",
                            "bless",
                            "command",
                            "eval",
                            "eval1",
                            "evalN",
                            "extract",
                            "getQWidget",
                            "ifc",
                            "lastResult",
                            "notimpl",
                            "object",
                            "option",
                            "out",
                            "outEx",
                            "queryToggle",
                            "result",
                            "service",
                            "setOption",
                            "symbol",
                            "test",
                            "throw",
                            "trace"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Quick way to create a command.\n\n    Note that a command can only be blessed (registered) once per modo session,\n    so this command will fail when attempting to rebless a command.\n\n    :param string name: Name that the command will be callable by. Example: cmds.myCommand\n    :param function func: The function that the command should call\n    :param iterable arguments: A sequence of name:defaultvalue pairs to make arguments that will be passed on to the function\n    :param basestring userName: The user name\n    :param basestring description: Summary of the command's purpose\n    :param basestring toolTip: Text that appears when hovering over the button\n\n    example::\n\n        import modo\n\n        def func_args(mystring, myint):\n            print mystring, myint\n\n        def func_simple():\n            print 'simple function, no arguments'\n\n\n        modo.util.makeQuickCommand('test.simple', func_simple)\n        modo.util.makeQuickCommand('test.args', func_args, (('mystring', 'mesh021'), ('myint', 23)))\n\n        lx.eval('test.simple')\n        lx.eval('test.args mesh022 24')\n\n    ",
                        "name": "makeQuickCommand",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "Access to various system paths.\n\n    :param basestring key: Specific path to return. Returns all if None.\n    :returns dictionary or string: Dictionary containing all paths or single path as string\n    ",
                        "name": "paths",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": null,
                        "name": "testGlobalInterpreter",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    },
                    {
                        "type": "function",
                        "docstring": "selects an item class constructor based on the item type passed as an argument and returns that as a class\n    instantiation 'function' object to call the correct class in methods that eg select by item type or return items. In\n    essence it acts as a sort of clearing house to try to ensure that any recognised but unwrapped items are wrapped\n    with the correct modo.item.xxx type before being returned.\n\n    example usage::\n\n        # get a list of all the light items in a scene where each light in the list is returned as the correctly\n        # wrapped modo version of each light sub-type.\n        import modo\n        scene = modo.Scene()\n        lights = []\n        for light in scene.ItemList(modo.c.LIGHT_TYPE):\n            func = modo.c.typeToFunc(light.Type())\n            lights.append(func(light))\n\n        # or more succinctly as a list comprehension:\n        lights = [modo.c.typeToFunc(light.Type())(light) for light in scene.ItemList(modo.c.LIGHT_TYPE)]\n\n    ",
                        "name": "typeToFunc",
                        "children": [
                            "func_closure",
                            "func_code",
                            "func_defaults",
                            "func_dict",
                            "func_doc",
                            "func_globals",
                            "func_name"
                        ]
                    }
                ]
            }
        ]
    }
]